
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Party
 * 
 */
export type Party = $Result.DefaultSelection<Prisma.$PartyPayload>
/**
 * Model Alteration
 * 
 */
export type Alteration = $Result.DefaultSelection<Prisma.$AlterationPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model PartyMember
 * 
 */
export type PartyMember = $Result.DefaultSelection<Prisma.$PartyMemberPayload>
/**
 * Model SaleAssignment
 * 
 */
export type SaleAssignment = $Result.DefaultSelection<Prisma.$SaleAssignmentPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.party`: Exposes CRUD operations for the **Party** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parties
    * const parties = await prisma.party.findMany()
    * ```
    */
  get party(): Prisma.PartyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alteration`: Exposes CRUD operations for the **Alteration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alterations
    * const alterations = await prisma.alteration.findMany()
    * ```
    */
  get alteration(): Prisma.AlterationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partyMember`: Exposes CRUD operations for the **PartyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartyMembers
    * const partyMembers = await prisma.partyMember.findMany()
    * ```
    */
  get partyMember(): Prisma.PartyMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.saleAssignment`: Exposes CRUD operations for the **SaleAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaleAssignments
    * const saleAssignments = await prisma.saleAssignment.findMany()
    * ```
    */
  get saleAssignment(): Prisma.SaleAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Customer: 'Customer',
    User: 'User',
    Party: 'Party',
    Alteration: 'Alteration',
    Appointment: 'Appointment',
    AuditLog: 'AuditLog',
    PartyMember: 'PartyMember',
    SaleAssignment: 'SaleAssignment',
    Skill: 'Skill'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "customer" | "user" | "party" | "alteration" | "appointment" | "auditLog" | "partyMember" | "saleAssignment" | "skill"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Party: {
        payload: Prisma.$PartyPayload<ExtArgs>
        fields: Prisma.PartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findFirst: {
            args: Prisma.PartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findMany: {
            args: Prisma.PartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          create: {
            args: Prisma.PartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          createMany: {
            args: Prisma.PartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          delete: {
            args: Prisma.PartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          update: {
            args: Prisma.PartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          deleteMany: {
            args: Prisma.PartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          upsert: {
            args: Prisma.PartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          aggregate: {
            args: Prisma.PartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParty>
          }
          groupBy: {
            args: Prisma.PartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartyCountArgs<ExtArgs>
            result: $Utils.Optional<PartyCountAggregateOutputType> | number
          }
        }
      }
      Alteration: {
        payload: Prisma.$AlterationPayload<ExtArgs>
        fields: Prisma.AlterationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlterationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlterationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          findFirst: {
            args: Prisma.AlterationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlterationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          findMany: {
            args: Prisma.AlterationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>[]
          }
          create: {
            args: Prisma.AlterationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          createMany: {
            args: Prisma.AlterationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlterationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>[]
          }
          delete: {
            args: Prisma.AlterationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          update: {
            args: Prisma.AlterationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          deleteMany: {
            args: Prisma.AlterationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlterationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlterationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>[]
          }
          upsert: {
            args: Prisma.AlterationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationPayload>
          }
          aggregate: {
            args: Prisma.AlterationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlteration>
          }
          groupBy: {
            args: Prisma.AlterationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlterationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlterationCountArgs<ExtArgs>
            result: $Utils.Optional<AlterationCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      PartyMember: {
        payload: Prisma.$PartyMemberPayload<ExtArgs>
        fields: Prisma.PartyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          findFirst: {
            args: Prisma.PartyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          findMany: {
            args: Prisma.PartyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          create: {
            args: Prisma.PartyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          createMany: {
            args: Prisma.PartyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartyMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          delete: {
            args: Prisma.PartyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          update: {
            args: Prisma.PartyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          deleteMany: {
            args: Prisma.PartyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartyMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          upsert: {
            args: Prisma.PartyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          aggregate: {
            args: Prisma.PartyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartyMember>
          }
          groupBy: {
            args: Prisma.PartyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<PartyMemberCountAggregateOutputType> | number
          }
        }
      }
      SaleAssignment: {
        payload: Prisma.$SaleAssignmentPayload<ExtArgs>
        fields: Prisma.SaleAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          findFirst: {
            args: Prisma.SaleAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          findMany: {
            args: Prisma.SaleAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          create: {
            args: Prisma.SaleAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          createMany: {
            args: Prisma.SaleAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          delete: {
            args: Prisma.SaleAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          update: {
            args: Prisma.SaleAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.SaleAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaleAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.SaleAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          aggregate: {
            args: Prisma.SaleAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaleAssignment>
          }
          groupBy: {
            args: Prisma.SaleAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<SaleAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    customer?: CustomerOmit
    user?: UserOmit
    party?: PartyOmit
    alteration?: AlterationOmit
    appointment?: AppointmentOmit
    auditLog?: AuditLogOmit
    partyMember?: PartyMemberOmit
    saleAssignment?: SaleAssignmentOmit
    skill?: SkillOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    parties: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parties?: boolean | CustomerCountOutputTypeCountPartiesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    appointments: number
    alterations: number
    auditLogs: number
    assignedAlterations: number
    saleAssignments: number
    skills: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    alterations?: boolean | UserCountOutputTypeCountAlterationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    assignedAlterations?: boolean | UserCountOutputTypeCountAssignedAlterationsArgs
    saleAssignments?: boolean | UserCountOutputTypeCountSaleAssignmentsArgs
    skills?: boolean | UserCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedAlterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSaleAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * Count Type PartyCountOutputType
   */

  export type PartyCountOutputType = {
    alterations: number
    appointments: number
    members: number
  }

  export type PartyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alterations?: boolean | PartyCountOutputTypeCountAlterationsArgs
    appointments?: boolean | PartyCountOutputTypeCountAppointmentsArgs
    members?: boolean | PartyCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyCountOutputType
     */
    select?: PartyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountAlterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationWhereInput
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyMemberWhereInput
  }


  /**
   * Count Type PartyMemberCountOutputType
   */

  export type PartyMemberCountOutputType = {
    alterations: number
    appointments: number
  }

  export type PartyMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alterations?: boolean | PartyMemberCountOutputTypeCountAlterationsArgs
    appointments?: boolean | PartyMemberCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * PartyMemberCountOutputType without action
   */
  export type PartyMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMemberCountOutputType
     */
    select?: PartyMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartyMemberCountOutputType without action
   */
  export type PartyMemberCountOutputTypeCountAlterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationWhereInput
  }

  /**
   * PartyMemberCountOutputType without action
   */
  export type PartyMemberCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    users: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SkillCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parties?: boolean | Customer$partiesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parties?: boolean | Customer$partiesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      parties: Prisma.$PartyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parties<T extends Customer$partiesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$partiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.parties
   */
  export type Customer$partiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    where?: PartyWhereInput
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    cursor?: PartyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    alterations?: boolean | User$alterationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    assignedAlterations?: boolean | User$assignedAlterationsArgs<ExtArgs>
    saleAssignments?: boolean | User$saleAssignmentsArgs<ExtArgs>
    skills?: boolean | User$skillsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "name" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    alterations?: boolean | User$alterationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    assignedAlterations?: boolean | User$assignedAlterationsArgs<ExtArgs>
    saleAssignments?: boolean | User$saleAssignmentsArgs<ExtArgs>
    skills?: boolean | User$skillsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      alterations: Prisma.$AlterationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      assignedAlterations: Prisma.$AlterationPayload<ExtArgs>[]
      saleAssignments: Prisma.$SaleAssignmentPayload<ExtArgs>[]
      skills: Prisma.$SkillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      name: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alterations<T extends User$alterationsArgs<ExtArgs> = {}>(args?: Subset<T, User$alterationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedAlterations<T extends User$assignedAlterationsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedAlterationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saleAssignments<T extends User$saleAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$saleAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skills<T extends User$skillsArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.alterations
   */
  export type User$alterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    where?: AlterationWhereInput
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    cursor?: AlterationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.assignedAlterations
   */
  export type User$assignedAlterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    where?: AlterationWhereInput
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    cursor?: AlterationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * User.saleAssignments
   */
  export type User$saleAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    where?: SaleAssignmentWhereInput
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    cursor?: SaleAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * User.skills
   */
  export type User$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Party
   */

  export type AggregateParty = {
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  export type PartyAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
  }

  export type PartySumAggregateOutputType = {
    id: number | null
    customerId: number | null
  }

  export type PartyMinAggregateOutputType = {
    id: number | null
    name: string | null
    eventDate: Date | null
    customerId: number | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
    syncedToLs: boolean | null
    lsPartyId: string | null
  }

  export type PartyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    eventDate: Date | null
    customerId: number | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
    syncedToLs: boolean | null
    lsPartyId: string | null
  }

  export type PartyCountAggregateOutputType = {
    id: number
    name: number
    eventDate: number
    customerId: number
    externalId: number
    syncedAt: number
    createdAt: number
    updatedAt: number
    notes: number
    syncedToLs: number
    lsPartyId: number
    _all: number
  }


  export type PartyAvgAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type PartySumAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type PartyMinAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
  }

  export type PartyMaxAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
  }

  export type PartyCountAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
    _all?: true
  }

  export type PartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Party to aggregate.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parties
    **/
    _count?: true | PartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartyMaxAggregateInputType
  }

  export type GetPartyAggregateType<T extends PartyAggregateArgs> = {
        [P in keyof T & keyof AggregateParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParty[P]>
      : GetScalarType<T[P], AggregateParty[P]>
  }




  export type PartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyWhereInput
    orderBy?: PartyOrderByWithAggregationInput | PartyOrderByWithAggregationInput[]
    by: PartyScalarFieldEnum[] | PartyScalarFieldEnum
    having?: PartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartyCountAggregateInputType | true
    _avg?: PartyAvgAggregateInputType
    _sum?: PartySumAggregateInputType
    _min?: PartyMinAggregateInputType
    _max?: PartyMaxAggregateInputType
  }

  export type PartyGroupByOutputType = {
    id: number
    name: string
    eventDate: Date
    customerId: number
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    notes: string | null
    syncedToLs: boolean
    lsPartyId: string | null
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  type GetPartyGroupByPayload<T extends PartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartyGroupByOutputType[P]>
            : GetScalarType<T[P], PartyGroupByOutputType[P]>
        }
      >
    >


  export type PartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    alterations?: boolean | Party$alterationsArgs<ExtArgs>
    appointments?: boolean | Party$appointmentsArgs<ExtArgs>
    members?: boolean | Party$membersArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectScalar = {
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
  }

  export type PartyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "eventDate" | "customerId" | "externalId" | "syncedAt" | "createdAt" | "updatedAt" | "notes" | "syncedToLs" | "lsPartyId", ExtArgs["result"]["party"]>
  export type PartyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    alterations?: boolean | Party$alterationsArgs<ExtArgs>
    appointments?: boolean | Party$appointmentsArgs<ExtArgs>
    members?: boolean | Party$membersArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type PartyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $PartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Party"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      alterations: Prisma.$AlterationPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      members: Prisma.$PartyMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      eventDate: Date
      customerId: number
      externalId: string | null
      syncedAt: Date | null
      createdAt: Date
      updatedAt: Date
      notes: string | null
      syncedToLs: boolean
      lsPartyId: string | null
    }, ExtArgs["result"]["party"]>
    composites: {}
  }

  type PartyGetPayload<S extends boolean | null | undefined | PartyDefaultArgs> = $Result.GetResult<Prisma.$PartyPayload, S>

  type PartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartyCountAggregateInputType | true
    }

  export interface PartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Party'], meta: { name: 'Party' } }
    /**
     * Find zero or one Party that matches the filter.
     * @param {PartyFindUniqueArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartyFindUniqueArgs>(args: SelectSubset<T, PartyFindUniqueArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Party that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartyFindUniqueOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartyFindUniqueOrThrowArgs>(args: SelectSubset<T, PartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Party that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartyFindFirstArgs>(args?: SelectSubset<T, PartyFindFirstArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Party that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartyFindFirstOrThrowArgs>(args?: SelectSubset<T, PartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Parties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parties
     * const parties = await prisma.party.findMany()
     * 
     * // Get first 10 Parties
     * const parties = await prisma.party.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partyWithIdOnly = await prisma.party.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartyFindManyArgs>(args?: SelectSubset<T, PartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Party.
     * @param {PartyCreateArgs} args - Arguments to create a Party.
     * @example
     * // Create one Party
     * const Party = await prisma.party.create({
     *   data: {
     *     // ... data to create a Party
     *   }
     * })
     * 
     */
    create<T extends PartyCreateArgs>(args: SelectSubset<T, PartyCreateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Parties.
     * @param {PartyCreateManyArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartyCreateManyArgs>(args?: SelectSubset<T, PartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parties and returns the data saved in the database.
     * @param {PartyCreateManyAndReturnArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parties and only return the `id`
     * const partyWithIdOnly = await prisma.party.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartyCreateManyAndReturnArgs>(args?: SelectSubset<T, PartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Party.
     * @param {PartyDeleteArgs} args - Arguments to delete one Party.
     * @example
     * // Delete one Party
     * const Party = await prisma.party.delete({
     *   where: {
     *     // ... filter to delete one Party
     *   }
     * })
     * 
     */
    delete<T extends PartyDeleteArgs>(args: SelectSubset<T, PartyDeleteArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Party.
     * @param {PartyUpdateArgs} args - Arguments to update one Party.
     * @example
     * // Update one Party
     * const party = await prisma.party.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartyUpdateArgs>(args: SelectSubset<T, PartyUpdateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Parties.
     * @param {PartyDeleteManyArgs} args - Arguments to filter Parties to delete.
     * @example
     * // Delete a few Parties
     * const { count } = await prisma.party.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartyDeleteManyArgs>(args?: SelectSubset<T, PartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parties
     * const party = await prisma.party.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartyUpdateManyArgs>(args: SelectSubset<T, PartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parties and returns the data updated in the database.
     * @param {PartyUpdateManyAndReturnArgs} args - Arguments to update many Parties.
     * @example
     * // Update many Parties
     * const party = await prisma.party.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Parties and only return the `id`
     * const partyWithIdOnly = await prisma.party.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartyUpdateManyAndReturnArgs>(args: SelectSubset<T, PartyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Party.
     * @param {PartyUpsertArgs} args - Arguments to update or create a Party.
     * @example
     * // Update or create a Party
     * const party = await prisma.party.upsert({
     *   create: {
     *     // ... data to create a Party
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Party we want to update
     *   }
     * })
     */
    upsert<T extends PartyUpsertArgs>(args: SelectSubset<T, PartyUpsertArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyCountArgs} args - Arguments to filter Parties to count.
     * @example
     * // Count the number of Parties
     * const count = await prisma.party.count({
     *   where: {
     *     // ... the filter for the Parties we want to count
     *   }
     * })
    **/
    count<T extends PartyCountArgs>(
      args?: Subset<T, PartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartyAggregateArgs>(args: Subset<T, PartyAggregateArgs>): Prisma.PrismaPromise<GetPartyAggregateType<T>>

    /**
     * Group by Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartyGroupByArgs['orderBy'] }
        : { orderBy?: PartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Party model
   */
  readonly fields: PartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Party.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alterations<T extends Party$alterationsArgs<ExtArgs> = {}>(args?: Subset<T, Party$alterationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Party$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Party$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends Party$membersArgs<ExtArgs> = {}>(args?: Subset<T, Party$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Party model
   */
  interface PartyFieldRefs {
    readonly id: FieldRef<"Party", 'Int'>
    readonly name: FieldRef<"Party", 'String'>
    readonly eventDate: FieldRef<"Party", 'DateTime'>
    readonly customerId: FieldRef<"Party", 'Int'>
    readonly externalId: FieldRef<"Party", 'String'>
    readonly syncedAt: FieldRef<"Party", 'DateTime'>
    readonly createdAt: FieldRef<"Party", 'DateTime'>
    readonly updatedAt: FieldRef<"Party", 'DateTime'>
    readonly notes: FieldRef<"Party", 'String'>
    readonly syncedToLs: FieldRef<"Party", 'Boolean'>
    readonly lsPartyId: FieldRef<"Party", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Party findUnique
   */
  export type PartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findUniqueOrThrow
   */
  export type PartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findFirst
   */
  export type PartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findFirstOrThrow
   */
  export type PartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findMany
   */
  export type PartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Parties to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party create
   */
  export type PartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to create a Party.
     */
    data: XOR<PartyCreateInput, PartyUncheckedCreateInput>
  }

  /**
   * Party createMany
   */
  export type PartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
  }

  /**
   * Party createManyAndReturn
   */
  export type PartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Party update
   */
  export type PartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to update a Party.
     */
    data: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
    /**
     * Choose, which Party to update.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party updateMany
   */
  export type PartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parties.
     */
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyInput>
    /**
     * Filter which Parties to update
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to update.
     */
    limit?: number
  }

  /**
   * Party updateManyAndReturn
   */
  export type PartyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * The data used to update Parties.
     */
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyInput>
    /**
     * Filter which Parties to update
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Party upsert
   */
  export type PartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The filter to search for the Party to update in case it exists.
     */
    where: PartyWhereUniqueInput
    /**
     * In case the Party found by the `where` argument doesn't exist, create a new Party with this data.
     */
    create: XOR<PartyCreateInput, PartyUncheckedCreateInput>
    /**
     * In case the Party was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
  }

  /**
   * Party delete
   */
  export type PartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter which Party to delete.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party deleteMany
   */
  export type PartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parties to delete
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to delete.
     */
    limit?: number
  }

  /**
   * Party.alterations
   */
  export type Party$alterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    where?: AlterationWhereInput
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    cursor?: AlterationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * Party.appointments
   */
  export type Party$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Party.members
   */
  export type Party$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    where?: PartyMemberWhereInput
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    cursor?: PartyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * Party without action
   */
  export type PartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
  }


  /**
   * Model Alteration
   */

  export type AggregateAlteration = {
    _count: AlterationCountAggregateOutputType | null
    _avg: AlterationAvgAggregateOutputType | null
    _sum: AlterationSumAggregateOutputType | null
    _min: AlterationMinAggregateOutputType | null
    _max: AlterationMaxAggregateOutputType | null
  }

  export type AlterationAvgAggregateOutputType = {
    id: number | null
    partyId: number | null
    timeSpent: number | null
    tailorId: number | null
    memberId: number | null
    assignedTailorId: number | null
    estimatedTime: number | null
    actualTime: number | null
  }

  export type AlterationSumAggregateOutputType = {
    id: number | null
    partyId: number | null
    timeSpent: number | null
    tailorId: number | null
    memberId: number | null
    assignedTailorId: number | null
    estimatedTime: number | null
    actualTime: number | null
  }

  export type AlterationMinAggregateOutputType = {
    id: number | null
    partyId: number | null
    notes: string | null
    timeSpent: number | null
    scheduledDateTime: Date | null
    tailorId: number | null
    status: string | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    lsLineItemId: string | null
    assignedTailorId: number | null
    itemType: string | null
    estimatedTime: number | null
    actualTime: number | null
  }

  export type AlterationMaxAggregateOutputType = {
    id: number | null
    partyId: number | null
    notes: string | null
    timeSpent: number | null
    scheduledDateTime: Date | null
    tailorId: number | null
    status: string | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    lsLineItemId: string | null
    assignedTailorId: number | null
    itemType: string | null
    estimatedTime: number | null
    actualTime: number | null
  }

  export type AlterationCountAggregateOutputType = {
    id: number
    partyId: number
    notes: number
    timeSpent: number
    scheduledDateTime: number
    tailorId: number
    status: number
    externalId: number
    syncedAt: number
    createdAt: number
    updatedAt: number
    memberId: number
    lsLineItemId: number
    assignedTailorId: number
    itemType: number
    estimatedTime: number
    actualTime: number
    _all: number
  }


  export type AlterationAvgAggregateInputType = {
    id?: true
    partyId?: true
    timeSpent?: true
    tailorId?: true
    memberId?: true
    assignedTailorId?: true
    estimatedTime?: true
    actualTime?: true
  }

  export type AlterationSumAggregateInputType = {
    id?: true
    partyId?: true
    timeSpent?: true
    tailorId?: true
    memberId?: true
    assignedTailorId?: true
    estimatedTime?: true
    actualTime?: true
  }

  export type AlterationMinAggregateInputType = {
    id?: true
    partyId?: true
    notes?: true
    timeSpent?: true
    scheduledDateTime?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    lsLineItemId?: true
    assignedTailorId?: true
    itemType?: true
    estimatedTime?: true
    actualTime?: true
  }

  export type AlterationMaxAggregateInputType = {
    id?: true
    partyId?: true
    notes?: true
    timeSpent?: true
    scheduledDateTime?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    lsLineItemId?: true
    assignedTailorId?: true
    itemType?: true
    estimatedTime?: true
    actualTime?: true
  }

  export type AlterationCountAggregateInputType = {
    id?: true
    partyId?: true
    notes?: true
    timeSpent?: true
    scheduledDateTime?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    lsLineItemId?: true
    assignedTailorId?: true
    itemType?: true
    estimatedTime?: true
    actualTime?: true
    _all?: true
  }

  export type AlterationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alteration to aggregate.
     */
    where?: AlterationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alterations to fetch.
     */
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlterationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alterations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alterations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alterations
    **/
    _count?: true | AlterationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlterationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlterationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlterationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlterationMaxAggregateInputType
  }

  export type GetAlterationAggregateType<T extends AlterationAggregateArgs> = {
        [P in keyof T & keyof AggregateAlteration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlteration[P]>
      : GetScalarType<T[P], AggregateAlteration[P]>
  }




  export type AlterationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationWhereInput
    orderBy?: AlterationOrderByWithAggregationInput | AlterationOrderByWithAggregationInput[]
    by: AlterationScalarFieldEnum[] | AlterationScalarFieldEnum
    having?: AlterationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlterationCountAggregateInputType | true
    _avg?: AlterationAvgAggregateInputType
    _sum?: AlterationSumAggregateInputType
    _min?: AlterationMinAggregateInputType
    _max?: AlterationMaxAggregateInputType
  }

  export type AlterationGroupByOutputType = {
    id: number
    partyId: number
    notes: string | null
    timeSpent: number | null
    scheduledDateTime: Date | null
    tailorId: number | null
    status: string
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    memberId: number | null
    lsLineItemId: string | null
    assignedTailorId: number | null
    itemType: string | null
    estimatedTime: number | null
    actualTime: number | null
    _count: AlterationCountAggregateOutputType | null
    _avg: AlterationAvgAggregateOutputType | null
    _sum: AlterationSumAggregateOutputType | null
    _min: AlterationMinAggregateOutputType | null
    _max: AlterationMaxAggregateOutputType | null
  }

  type GetAlterationGroupByPayload<T extends AlterationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlterationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlterationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlterationGroupByOutputType[P]>
            : GetScalarType<T[P], AlterationGroupByOutputType[P]>
        }
      >
    >


  export type AlterationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    notes?: boolean
    timeSpent?: boolean
    scheduledDateTime?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    lsLineItemId?: boolean
    assignedTailorId?: boolean
    itemType?: boolean
    estimatedTime?: boolean
    actualTime?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alteration"]>

  export type AlterationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    notes?: boolean
    timeSpent?: boolean
    scheduledDateTime?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    lsLineItemId?: boolean
    assignedTailorId?: boolean
    itemType?: boolean
    estimatedTime?: boolean
    actualTime?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alteration"]>

  export type AlterationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    notes?: boolean
    timeSpent?: boolean
    scheduledDateTime?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    lsLineItemId?: boolean
    assignedTailorId?: boolean
    itemType?: boolean
    estimatedTime?: boolean
    actualTime?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alteration"]>

  export type AlterationSelectScalar = {
    id?: boolean
    partyId?: boolean
    notes?: boolean
    timeSpent?: boolean
    scheduledDateTime?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    lsLineItemId?: boolean
    assignedTailorId?: boolean
    itemType?: boolean
    estimatedTime?: boolean
    actualTime?: boolean
  }

  export type AlterationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "partyId" | "notes" | "timeSpent" | "scheduledDateTime" | "tailorId" | "status" | "externalId" | "syncedAt" | "createdAt" | "updatedAt" | "memberId" | "lsLineItemId" | "assignedTailorId" | "itemType" | "estimatedTime" | "actualTime", ExtArgs["result"]["alteration"]>
  export type AlterationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }
  export type AlterationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }
  export type AlterationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Alteration$tailorArgs<ExtArgs>
    member?: boolean | Alteration$memberArgs<ExtArgs>
    assignedTailor?: boolean | Alteration$assignedTailorArgs<ExtArgs>
  }

  export type $AlterationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alteration"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs>
      tailor: Prisma.$UserPayload<ExtArgs> | null
      member: Prisma.$PartyMemberPayload<ExtArgs> | null
      assignedTailor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partyId: number
      notes: string | null
      timeSpent: number | null
      scheduledDateTime: Date | null
      tailorId: number | null
      status: string
      externalId: string | null
      syncedAt: Date | null
      createdAt: Date
      updatedAt: Date
      memberId: number | null
      lsLineItemId: string | null
      assignedTailorId: number | null
      itemType: string | null
      estimatedTime: number | null
      actualTime: number | null
    }, ExtArgs["result"]["alteration"]>
    composites: {}
  }

  type AlterationGetPayload<S extends boolean | null | undefined | AlterationDefaultArgs> = $Result.GetResult<Prisma.$AlterationPayload, S>

  type AlterationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlterationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlterationCountAggregateInputType | true
    }

  export interface AlterationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alteration'], meta: { name: 'Alteration' } }
    /**
     * Find zero or one Alteration that matches the filter.
     * @param {AlterationFindUniqueArgs} args - Arguments to find a Alteration
     * @example
     * // Get one Alteration
     * const alteration = await prisma.alteration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlterationFindUniqueArgs>(args: SelectSubset<T, AlterationFindUniqueArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alteration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlterationFindUniqueOrThrowArgs} args - Arguments to find a Alteration
     * @example
     * // Get one Alteration
     * const alteration = await prisma.alteration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlterationFindUniqueOrThrowArgs>(args: SelectSubset<T, AlterationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alteration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationFindFirstArgs} args - Arguments to find a Alteration
     * @example
     * // Get one Alteration
     * const alteration = await prisma.alteration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlterationFindFirstArgs>(args?: SelectSubset<T, AlterationFindFirstArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alteration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationFindFirstOrThrowArgs} args - Arguments to find a Alteration
     * @example
     * // Get one Alteration
     * const alteration = await prisma.alteration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlterationFindFirstOrThrowArgs>(args?: SelectSubset<T, AlterationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alterations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alterations
     * const alterations = await prisma.alteration.findMany()
     * 
     * // Get first 10 Alterations
     * const alterations = await prisma.alteration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alterationWithIdOnly = await prisma.alteration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlterationFindManyArgs>(args?: SelectSubset<T, AlterationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alteration.
     * @param {AlterationCreateArgs} args - Arguments to create a Alteration.
     * @example
     * // Create one Alteration
     * const Alteration = await prisma.alteration.create({
     *   data: {
     *     // ... data to create a Alteration
     *   }
     * })
     * 
     */
    create<T extends AlterationCreateArgs>(args: SelectSubset<T, AlterationCreateArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alterations.
     * @param {AlterationCreateManyArgs} args - Arguments to create many Alterations.
     * @example
     * // Create many Alterations
     * const alteration = await prisma.alteration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlterationCreateManyArgs>(args?: SelectSubset<T, AlterationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alterations and returns the data saved in the database.
     * @param {AlterationCreateManyAndReturnArgs} args - Arguments to create many Alterations.
     * @example
     * // Create many Alterations
     * const alteration = await prisma.alteration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alterations and only return the `id`
     * const alterationWithIdOnly = await prisma.alteration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlterationCreateManyAndReturnArgs>(args?: SelectSubset<T, AlterationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alteration.
     * @param {AlterationDeleteArgs} args - Arguments to delete one Alteration.
     * @example
     * // Delete one Alteration
     * const Alteration = await prisma.alteration.delete({
     *   where: {
     *     // ... filter to delete one Alteration
     *   }
     * })
     * 
     */
    delete<T extends AlterationDeleteArgs>(args: SelectSubset<T, AlterationDeleteArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alteration.
     * @param {AlterationUpdateArgs} args - Arguments to update one Alteration.
     * @example
     * // Update one Alteration
     * const alteration = await prisma.alteration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlterationUpdateArgs>(args: SelectSubset<T, AlterationUpdateArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alterations.
     * @param {AlterationDeleteManyArgs} args - Arguments to filter Alterations to delete.
     * @example
     * // Delete a few Alterations
     * const { count } = await prisma.alteration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlterationDeleteManyArgs>(args?: SelectSubset<T, AlterationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alterations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alterations
     * const alteration = await prisma.alteration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlterationUpdateManyArgs>(args: SelectSubset<T, AlterationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alterations and returns the data updated in the database.
     * @param {AlterationUpdateManyAndReturnArgs} args - Arguments to update many Alterations.
     * @example
     * // Update many Alterations
     * const alteration = await prisma.alteration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alterations and only return the `id`
     * const alterationWithIdOnly = await prisma.alteration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlterationUpdateManyAndReturnArgs>(args: SelectSubset<T, AlterationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alteration.
     * @param {AlterationUpsertArgs} args - Arguments to update or create a Alteration.
     * @example
     * // Update or create a Alteration
     * const alteration = await prisma.alteration.upsert({
     *   create: {
     *     // ... data to create a Alteration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alteration we want to update
     *   }
     * })
     */
    upsert<T extends AlterationUpsertArgs>(args: SelectSubset<T, AlterationUpsertArgs<ExtArgs>>): Prisma__AlterationClient<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alterations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationCountArgs} args - Arguments to filter Alterations to count.
     * @example
     * // Count the number of Alterations
     * const count = await prisma.alteration.count({
     *   where: {
     *     // ... the filter for the Alterations we want to count
     *   }
     * })
    **/
    count<T extends AlterationCountArgs>(
      args?: Subset<T, AlterationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlterationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alteration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlterationAggregateArgs>(args: Subset<T, AlterationAggregateArgs>): Prisma.PrismaPromise<GetAlterationAggregateType<T>>

    /**
     * Group by Alteration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlterationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlterationGroupByArgs['orderBy'] }
        : { orderBy?: AlterationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlterationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlterationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alteration model
   */
  readonly fields: AlterationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alteration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlterationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tailor<T extends Alteration$tailorArgs<ExtArgs> = {}>(args?: Subset<T, Alteration$tailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    member<T extends Alteration$memberArgs<ExtArgs> = {}>(args?: Subset<T, Alteration$memberArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedTailor<T extends Alteration$assignedTailorArgs<ExtArgs> = {}>(args?: Subset<T, Alteration$assignedTailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alteration model
   */
  interface AlterationFieldRefs {
    readonly id: FieldRef<"Alteration", 'Int'>
    readonly partyId: FieldRef<"Alteration", 'Int'>
    readonly notes: FieldRef<"Alteration", 'String'>
    readonly timeSpent: FieldRef<"Alteration", 'Int'>
    readonly scheduledDateTime: FieldRef<"Alteration", 'DateTime'>
    readonly tailorId: FieldRef<"Alteration", 'Int'>
    readonly status: FieldRef<"Alteration", 'String'>
    readonly externalId: FieldRef<"Alteration", 'String'>
    readonly syncedAt: FieldRef<"Alteration", 'DateTime'>
    readonly createdAt: FieldRef<"Alteration", 'DateTime'>
    readonly updatedAt: FieldRef<"Alteration", 'DateTime'>
    readonly memberId: FieldRef<"Alteration", 'Int'>
    readonly lsLineItemId: FieldRef<"Alteration", 'String'>
    readonly assignedTailorId: FieldRef<"Alteration", 'Int'>
    readonly itemType: FieldRef<"Alteration", 'String'>
    readonly estimatedTime: FieldRef<"Alteration", 'Int'>
    readonly actualTime: FieldRef<"Alteration", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Alteration findUnique
   */
  export type AlterationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter, which Alteration to fetch.
     */
    where: AlterationWhereUniqueInput
  }

  /**
   * Alteration findUniqueOrThrow
   */
  export type AlterationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter, which Alteration to fetch.
     */
    where: AlterationWhereUniqueInput
  }

  /**
   * Alteration findFirst
   */
  export type AlterationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter, which Alteration to fetch.
     */
    where?: AlterationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alterations to fetch.
     */
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alterations.
     */
    cursor?: AlterationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alterations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alterations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alterations.
     */
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * Alteration findFirstOrThrow
   */
  export type AlterationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter, which Alteration to fetch.
     */
    where?: AlterationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alterations to fetch.
     */
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alterations.
     */
    cursor?: AlterationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alterations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alterations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alterations.
     */
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * Alteration findMany
   */
  export type AlterationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter, which Alterations to fetch.
     */
    where?: AlterationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alterations to fetch.
     */
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alterations.
     */
    cursor?: AlterationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alterations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alterations.
     */
    skip?: number
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * Alteration create
   */
  export type AlterationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * The data needed to create a Alteration.
     */
    data: XOR<AlterationCreateInput, AlterationUncheckedCreateInput>
  }

  /**
   * Alteration createMany
   */
  export type AlterationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alterations.
     */
    data: AlterationCreateManyInput | AlterationCreateManyInput[]
  }

  /**
   * Alteration createManyAndReturn
   */
  export type AlterationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * The data used to create many Alterations.
     */
    data: AlterationCreateManyInput | AlterationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alteration update
   */
  export type AlterationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * The data needed to update a Alteration.
     */
    data: XOR<AlterationUpdateInput, AlterationUncheckedUpdateInput>
    /**
     * Choose, which Alteration to update.
     */
    where: AlterationWhereUniqueInput
  }

  /**
   * Alteration updateMany
   */
  export type AlterationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alterations.
     */
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyInput>
    /**
     * Filter which Alterations to update
     */
    where?: AlterationWhereInput
    /**
     * Limit how many Alterations to update.
     */
    limit?: number
  }

  /**
   * Alteration updateManyAndReturn
   */
  export type AlterationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * The data used to update Alterations.
     */
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyInput>
    /**
     * Filter which Alterations to update
     */
    where?: AlterationWhereInput
    /**
     * Limit how many Alterations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alteration upsert
   */
  export type AlterationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * The filter to search for the Alteration to update in case it exists.
     */
    where: AlterationWhereUniqueInput
    /**
     * In case the Alteration found by the `where` argument doesn't exist, create a new Alteration with this data.
     */
    create: XOR<AlterationCreateInput, AlterationUncheckedCreateInput>
    /**
     * In case the Alteration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlterationUpdateInput, AlterationUncheckedUpdateInput>
  }

  /**
   * Alteration delete
   */
  export type AlterationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    /**
     * Filter which Alteration to delete.
     */
    where: AlterationWhereUniqueInput
  }

  /**
   * Alteration deleteMany
   */
  export type AlterationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alterations to delete
     */
    where?: AlterationWhereInput
    /**
     * Limit how many Alterations to delete.
     */
    limit?: number
  }

  /**
   * Alteration.tailor
   */
  export type Alteration$tailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Alteration.member
   */
  export type Alteration$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    where?: PartyMemberWhereInput
  }

  /**
   * Alteration.assignedTailor
   */
  export type Alteration$assignedTailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Alteration without action
   */
  export type AlterationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    partyId: number | null
    duration: number | null
    tailorId: number | null
    memberId: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    partyId: number | null
    duration: number | null
    tailorId: number | null
    memberId: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    partyId: number | null
    dateTime: Date | null
    duration: number | null
    tailorId: number | null
    status: string | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    endDatetime: Date | null
    type: string | null
    notes: string | null
    lsEventId: string | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    partyId: number | null
    dateTime: Date | null
    duration: number | null
    tailorId: number | null
    status: string | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    endDatetime: Date | null
    type: string | null
    notes: string | null
    lsEventId: string | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    partyId: number
    dateTime: number
    duration: number
    tailorId: number
    status: number
    externalId: number
    syncedAt: number
    createdAt: number
    updatedAt: number
    memberId: number
    endDatetime: number
    type: number
    notes: number
    lsEventId: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    partyId?: true
    duration?: true
    tailorId?: true
    memberId?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    partyId?: true
    duration?: true
    tailorId?: true
    memberId?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    partyId?: true
    dateTime?: true
    duration?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    endDatetime?: true
    type?: true
    notes?: true
    lsEventId?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    partyId?: true
    dateTime?: true
    duration?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    endDatetime?: true
    type?: true
    notes?: true
    lsEventId?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    partyId?: true
    dateTime?: true
    duration?: true
    tailorId?: true
    status?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    endDatetime?: true
    type?: true
    notes?: true
    lsEventId?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: number
    partyId: number
    dateTime: Date
    duration: number | null
    tailorId: number | null
    status: string
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    memberId: number | null
    endDatetime: Date | null
    type: string | null
    notes: string | null
    lsEventId: string | null
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    dateTime?: boolean
    duration?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    endDatetime?: boolean
    type?: boolean
    notes?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    dateTime?: boolean
    duration?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    endDatetime?: boolean
    type?: boolean
    notes?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    dateTime?: boolean
    duration?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    endDatetime?: boolean
    type?: boolean
    notes?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    partyId?: boolean
    dateTime?: boolean
    duration?: boolean
    tailorId?: boolean
    status?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    endDatetime?: boolean
    type?: boolean
    notes?: boolean
    lsEventId?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "partyId" | "dateTime" | "duration" | "tailorId" | "status" | "externalId" | "syncedAt" | "createdAt" | "updatedAt" | "memberId" | "endDatetime" | "type" | "notes" | "lsEventId", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs>
      tailor: Prisma.$UserPayload<ExtArgs> | null
      member: Prisma.$PartyMemberPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partyId: number
      dateTime: Date
      duration: number | null
      tailorId: number | null
      status: string
      externalId: string | null
      syncedAt: Date | null
      createdAt: Date
      updatedAt: Date
      memberId: number | null
      endDatetime: Date | null
      type: string | null
      notes: string | null
      lsEventId: string | null
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tailor<T extends Appointment$tailorArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$tailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    member<T extends Appointment$memberArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$memberArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'Int'>
    readonly partyId: FieldRef<"Appointment", 'Int'>
    readonly dateTime: FieldRef<"Appointment", 'DateTime'>
    readonly duration: FieldRef<"Appointment", 'Int'>
    readonly tailorId: FieldRef<"Appointment", 'Int'>
    readonly status: FieldRef<"Appointment", 'String'>
    readonly externalId: FieldRef<"Appointment", 'String'>
    readonly syncedAt: FieldRef<"Appointment", 'DateTime'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
    readonly memberId: FieldRef<"Appointment", 'Int'>
    readonly endDatetime: FieldRef<"Appointment", 'DateTime'>
    readonly type: FieldRef<"Appointment", 'String'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly lsEventId: FieldRef<"Appointment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.tailor
   */
  export type Appointment$tailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.member
   */
  export type Appointment$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    where?: PartyMemberWhereInput
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    details: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    userId: number | null
    action: string
    entity: string
    entityId: number
    details: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entity" | "entityId" | "details" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      action: string
      entity: string
      entityId: number
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'Int'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model PartyMember
   */

  export type AggregatePartyMember = {
    _count: PartyMemberCountAggregateOutputType | null
    _avg: PartyMemberAvgAggregateOutputType | null
    _sum: PartyMemberSumAggregateOutputType | null
    _min: PartyMemberMinAggregateOutputType | null
    _max: PartyMemberMaxAggregateOutputType | null
  }

  export type PartyMemberAvgAggregateOutputType = {
    id: number | null
    partyId: number | null
  }

  export type PartyMemberSumAggregateOutputType = {
    id: number | null
    partyId: number | null
  }

  export type PartyMemberMinAggregateOutputType = {
    id: number | null
    partyId: number | null
    lsCustomerId: string | null
    role: string | null
    measurements: string | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyMemberMaxAggregateOutputType = {
    id: number | null
    partyId: number | null
    lsCustomerId: string | null
    role: string | null
    measurements: string | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyMemberCountAggregateOutputType = {
    id: number
    partyId: number
    lsCustomerId: number
    role: number
    measurements: number
    notes: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartyMemberAvgAggregateInputType = {
    id?: true
    partyId?: true
  }

  export type PartyMemberSumAggregateInputType = {
    id?: true
    partyId?: true
  }

  export type PartyMemberMinAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    measurements?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyMemberMaxAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    measurements?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyMemberCountAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    measurements?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartyMember to aggregate.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartyMembers
    **/
    _count?: true | PartyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartyMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartyMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartyMemberMaxAggregateInputType
  }

  export type GetPartyMemberAggregateType<T extends PartyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregatePartyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartyMember[P]>
      : GetScalarType<T[P], AggregatePartyMember[P]>
  }




  export type PartyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyMemberWhereInput
    orderBy?: PartyMemberOrderByWithAggregationInput | PartyMemberOrderByWithAggregationInput[]
    by: PartyMemberScalarFieldEnum[] | PartyMemberScalarFieldEnum
    having?: PartyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartyMemberCountAggregateInputType | true
    _avg?: PartyMemberAvgAggregateInputType
    _sum?: PartyMemberSumAggregateInputType
    _min?: PartyMemberMinAggregateInputType
    _max?: PartyMemberMaxAggregateInputType
  }

  export type PartyMemberGroupByOutputType = {
    id: number
    partyId: number
    lsCustomerId: string | null
    role: string
    measurements: string | null
    notes: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: PartyMemberCountAggregateOutputType | null
    _avg: PartyMemberAvgAggregateOutputType | null
    _sum: PartyMemberSumAggregateOutputType | null
    _min: PartyMemberMinAggregateOutputType | null
    _max: PartyMemberMaxAggregateOutputType | null
  }

  type GetPartyMemberGroupByPayload<T extends PartyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], PartyMemberGroupByOutputType[P]>
        }
      >
    >


  export type PartyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    measurements?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    alterations?: boolean | PartyMember$alterationsArgs<ExtArgs>
    appointments?: boolean | PartyMember$appointmentsArgs<ExtArgs>
    _count?: boolean | PartyMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    measurements?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    measurements?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectScalar = {
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    measurements?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartyMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "partyId" | "lsCustomerId" | "role" | "measurements" | "notes" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["partyMember"]>
  export type PartyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    alterations?: boolean | PartyMember$alterationsArgs<ExtArgs>
    appointments?: boolean | PartyMember$appointmentsArgs<ExtArgs>
    _count?: boolean | PartyMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartyMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }
  export type PartyMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }

  export type $PartyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartyMember"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs>
      alterations: Prisma.$AlterationPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partyId: number
      lsCustomerId: string | null
      role: string
      measurements: string | null
      notes: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partyMember"]>
    composites: {}
  }

  type PartyMemberGetPayload<S extends boolean | null | undefined | PartyMemberDefaultArgs> = $Result.GetResult<Prisma.$PartyMemberPayload, S>

  type PartyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartyMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartyMemberCountAggregateInputType | true
    }

  export interface PartyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartyMember'], meta: { name: 'PartyMember' } }
    /**
     * Find zero or one PartyMember that matches the filter.
     * @param {PartyMemberFindUniqueArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartyMemberFindUniqueArgs>(args: SelectSubset<T, PartyMemberFindUniqueArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PartyMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartyMemberFindUniqueOrThrowArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, PartyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindFirstArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartyMemberFindFirstArgs>(args?: SelectSubset<T, PartyMemberFindFirstArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindFirstOrThrowArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, PartyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PartyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartyMembers
     * const partyMembers = await prisma.partyMember.findMany()
     * 
     * // Get first 10 PartyMembers
     * const partyMembers = await prisma.partyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartyMemberFindManyArgs>(args?: SelectSubset<T, PartyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PartyMember.
     * @param {PartyMemberCreateArgs} args - Arguments to create a PartyMember.
     * @example
     * // Create one PartyMember
     * const PartyMember = await prisma.partyMember.create({
     *   data: {
     *     // ... data to create a PartyMember
     *   }
     * })
     * 
     */
    create<T extends PartyMemberCreateArgs>(args: SelectSubset<T, PartyMemberCreateArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PartyMembers.
     * @param {PartyMemberCreateManyArgs} args - Arguments to create many PartyMembers.
     * @example
     * // Create many PartyMembers
     * const partyMember = await prisma.partyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartyMemberCreateManyArgs>(args?: SelectSubset<T, PartyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartyMembers and returns the data saved in the database.
     * @param {PartyMemberCreateManyAndReturnArgs} args - Arguments to create many PartyMembers.
     * @example
     * // Create many PartyMembers
     * const partyMember = await prisma.partyMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartyMembers and only return the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartyMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, PartyMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PartyMember.
     * @param {PartyMemberDeleteArgs} args - Arguments to delete one PartyMember.
     * @example
     * // Delete one PartyMember
     * const PartyMember = await prisma.partyMember.delete({
     *   where: {
     *     // ... filter to delete one PartyMember
     *   }
     * })
     * 
     */
    delete<T extends PartyMemberDeleteArgs>(args: SelectSubset<T, PartyMemberDeleteArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PartyMember.
     * @param {PartyMemberUpdateArgs} args - Arguments to update one PartyMember.
     * @example
     * // Update one PartyMember
     * const partyMember = await prisma.partyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartyMemberUpdateArgs>(args: SelectSubset<T, PartyMemberUpdateArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PartyMembers.
     * @param {PartyMemberDeleteManyArgs} args - Arguments to filter PartyMembers to delete.
     * @example
     * // Delete a few PartyMembers
     * const { count } = await prisma.partyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartyMemberDeleteManyArgs>(args?: SelectSubset<T, PartyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartyMembers
     * const partyMember = await prisma.partyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartyMemberUpdateManyArgs>(args: SelectSubset<T, PartyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartyMembers and returns the data updated in the database.
     * @param {PartyMemberUpdateManyAndReturnArgs} args - Arguments to update many PartyMembers.
     * @example
     * // Update many PartyMembers
     * const partyMember = await prisma.partyMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PartyMembers and only return the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartyMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, PartyMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PartyMember.
     * @param {PartyMemberUpsertArgs} args - Arguments to update or create a PartyMember.
     * @example
     * // Update or create a PartyMember
     * const partyMember = await prisma.partyMember.upsert({
     *   create: {
     *     // ... data to create a PartyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartyMember we want to update
     *   }
     * })
     */
    upsert<T extends PartyMemberUpsertArgs>(args: SelectSubset<T, PartyMemberUpsertArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PartyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberCountArgs} args - Arguments to filter PartyMembers to count.
     * @example
     * // Count the number of PartyMembers
     * const count = await prisma.partyMember.count({
     *   where: {
     *     // ... the filter for the PartyMembers we want to count
     *   }
     * })
    **/
    count<T extends PartyMemberCountArgs>(
      args?: Subset<T, PartyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartyMemberAggregateArgs>(args: Subset<T, PartyMemberAggregateArgs>): Prisma.PrismaPromise<GetPartyMemberAggregateType<T>>

    /**
     * Group by PartyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartyMemberGroupByArgs['orderBy'] }
        : { orderBy?: PartyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartyMember model
   */
  readonly fields: PartyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alterations<T extends PartyMember$alterationsArgs<ExtArgs> = {}>(args?: Subset<T, PartyMember$alterationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends PartyMember$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, PartyMember$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartyMember model
   */
  interface PartyMemberFieldRefs {
    readonly id: FieldRef<"PartyMember", 'Int'>
    readonly partyId: FieldRef<"PartyMember", 'Int'>
    readonly lsCustomerId: FieldRef<"PartyMember", 'String'>
    readonly role: FieldRef<"PartyMember", 'String'>
    readonly measurements: FieldRef<"PartyMember", 'String'>
    readonly notes: FieldRef<"PartyMember", 'String'>
    readonly status: FieldRef<"PartyMember", 'String'>
    readonly createdAt: FieldRef<"PartyMember", 'DateTime'>
    readonly updatedAt: FieldRef<"PartyMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PartyMember findUnique
   */
  export type PartyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember findUniqueOrThrow
   */
  export type PartyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember findFirst
   */
  export type PartyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartyMembers.
     */
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember findFirstOrThrow
   */
  export type PartyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartyMembers.
     */
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember findMany
   */
  export type PartyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMembers to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember create
   */
  export type PartyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a PartyMember.
     */
    data: XOR<PartyMemberCreateInput, PartyMemberUncheckedCreateInput>
  }

  /**
   * PartyMember createMany
   */
  export type PartyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartyMembers.
     */
    data: PartyMemberCreateManyInput | PartyMemberCreateManyInput[]
  }

  /**
   * PartyMember createManyAndReturn
   */
  export type PartyMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * The data used to create many PartyMembers.
     */
    data: PartyMemberCreateManyInput | PartyMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartyMember update
   */
  export type PartyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a PartyMember.
     */
    data: XOR<PartyMemberUpdateInput, PartyMemberUncheckedUpdateInput>
    /**
     * Choose, which PartyMember to update.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember updateMany
   */
  export type PartyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartyMembers.
     */
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyInput>
    /**
     * Filter which PartyMembers to update
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to update.
     */
    limit?: number
  }

  /**
   * PartyMember updateManyAndReturn
   */
  export type PartyMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * The data used to update PartyMembers.
     */
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyInput>
    /**
     * Filter which PartyMembers to update
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartyMember upsert
   */
  export type PartyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the PartyMember to update in case it exists.
     */
    where: PartyMemberWhereUniqueInput
    /**
     * In case the PartyMember found by the `where` argument doesn't exist, create a new PartyMember with this data.
     */
    create: XOR<PartyMemberCreateInput, PartyMemberUncheckedCreateInput>
    /**
     * In case the PartyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartyMemberUpdateInput, PartyMemberUncheckedUpdateInput>
  }

  /**
   * PartyMember delete
   */
  export type PartyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter which PartyMember to delete.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember deleteMany
   */
  export type PartyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartyMembers to delete
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to delete.
     */
    limit?: number
  }

  /**
   * PartyMember.alterations
   */
  export type PartyMember$alterationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alteration
     */
    select?: AlterationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alteration
     */
    omit?: AlterationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationInclude<ExtArgs> | null
    where?: AlterationWhereInput
    orderBy?: AlterationOrderByWithRelationInput | AlterationOrderByWithRelationInput[]
    cursor?: AlterationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationScalarFieldEnum | AlterationScalarFieldEnum[]
  }

  /**
   * PartyMember.appointments
   */
  export type PartyMember$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * PartyMember without action
   */
  export type PartyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
  }


  /**
   * Model SaleAssignment
   */

  export type AggregateSaleAssignment = {
    _count: SaleAssignmentCountAggregateOutputType | null
    _avg: SaleAssignmentAvgAggregateOutputType | null
    _sum: SaleAssignmentSumAggregateOutputType | null
    _min: SaleAssignmentMinAggregateOutputType | null
    _max: SaleAssignmentMaxAggregateOutputType | null
  }

  export type SaleAssignmentAvgAggregateOutputType = {
    id: number | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
  }

  export type SaleAssignmentSumAggregateOutputType = {
    id: number | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
  }

  export type SaleAssignmentMinAggregateOutputType = {
    id: number | null
    saleId: string | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SaleAssignmentMaxAggregateOutputType = {
    id: number | null
    saleId: string | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SaleAssignmentCountAggregateOutputType = {
    id: number
    saleId: number
    associateId: number
    commissionRate: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SaleAssignmentAvgAggregateInputType = {
    id?: true
    associateId?: true
    commissionRate?: true
    amount?: true
  }

  export type SaleAssignmentSumAggregateInputType = {
    id?: true
    associateId?: true
    commissionRate?: true
    amount?: true
  }

  export type SaleAssignmentMinAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SaleAssignmentMaxAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SaleAssignmentCountAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SaleAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleAssignment to aggregate.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaleAssignments
    **/
    _count?: true | SaleAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleAssignmentMaxAggregateInputType
  }

  export type GetSaleAssignmentAggregateType<T extends SaleAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateSaleAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleAssignment[P]>
      : GetScalarType<T[P], AggregateSaleAssignment[P]>
  }




  export type SaleAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleAssignmentWhereInput
    orderBy?: SaleAssignmentOrderByWithAggregationInput | SaleAssignmentOrderByWithAggregationInput[]
    by: SaleAssignmentScalarFieldEnum[] | SaleAssignmentScalarFieldEnum
    having?: SaleAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleAssignmentCountAggregateInputType | true
    _avg?: SaleAssignmentAvgAggregateInputType
    _sum?: SaleAssignmentSumAggregateInputType
    _min?: SaleAssignmentMinAggregateInputType
    _max?: SaleAssignmentMaxAggregateInputType
  }

  export type SaleAssignmentGroupByOutputType = {
    id: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: SaleAssignmentCountAggregateOutputType | null
    _avg: SaleAssignmentAvgAggregateOutputType | null
    _sum: SaleAssignmentSumAggregateOutputType | null
    _min: SaleAssignmentMinAggregateOutputType | null
    _max: SaleAssignmentMaxAggregateOutputType | null
  }

  type GetSaleAssignmentGroupByPayload<T extends SaleAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], SaleAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type SaleAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectScalar = {
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SaleAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "saleId" | "associateId" | "commissionRate" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["saleAssignment"]>
  export type SaleAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SaleAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SaleAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SaleAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaleAssignment"
    objects: {
      associate: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saleId: string
      associateId: number
      commissionRate: number
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["saleAssignment"]>
    composites: {}
  }

  type SaleAssignmentGetPayload<S extends boolean | null | undefined | SaleAssignmentDefaultArgs> = $Result.GetResult<Prisma.$SaleAssignmentPayload, S>

  type SaleAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaleAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaleAssignmentCountAggregateInputType | true
    }

  export interface SaleAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleAssignment'], meta: { name: 'SaleAssignment' } }
    /**
     * Find zero or one SaleAssignment that matches the filter.
     * @param {SaleAssignmentFindUniqueArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleAssignmentFindUniqueArgs>(args: SelectSubset<T, SaleAssignmentFindUniqueArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SaleAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaleAssignmentFindUniqueOrThrowArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindFirstArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleAssignmentFindFirstArgs>(args?: SelectSubset<T, SaleAssignmentFindFirstArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindFirstOrThrowArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SaleAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleAssignments
     * const saleAssignments = await prisma.saleAssignment.findMany()
     * 
     * // Get first 10 SaleAssignments
     * const saleAssignments = await prisma.saleAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleAssignmentFindManyArgs>(args?: SelectSubset<T, SaleAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SaleAssignment.
     * @param {SaleAssignmentCreateArgs} args - Arguments to create a SaleAssignment.
     * @example
     * // Create one SaleAssignment
     * const SaleAssignment = await prisma.saleAssignment.create({
     *   data: {
     *     // ... data to create a SaleAssignment
     *   }
     * })
     * 
     */
    create<T extends SaleAssignmentCreateArgs>(args: SelectSubset<T, SaleAssignmentCreateArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SaleAssignments.
     * @param {SaleAssignmentCreateManyArgs} args - Arguments to create many SaleAssignments.
     * @example
     * // Create many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleAssignmentCreateManyArgs>(args?: SelectSubset<T, SaleAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaleAssignments and returns the data saved in the database.
     * @param {SaleAssignmentCreateManyAndReturnArgs} args - Arguments to create many SaleAssignments.
     * @example
     * // Create many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaleAssignments and only return the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaleAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, SaleAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SaleAssignment.
     * @param {SaleAssignmentDeleteArgs} args - Arguments to delete one SaleAssignment.
     * @example
     * // Delete one SaleAssignment
     * const SaleAssignment = await prisma.saleAssignment.delete({
     *   where: {
     *     // ... filter to delete one SaleAssignment
     *   }
     * })
     * 
     */
    delete<T extends SaleAssignmentDeleteArgs>(args: SelectSubset<T, SaleAssignmentDeleteArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SaleAssignment.
     * @param {SaleAssignmentUpdateArgs} args - Arguments to update one SaleAssignment.
     * @example
     * // Update one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleAssignmentUpdateArgs>(args: SelectSubset<T, SaleAssignmentUpdateArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SaleAssignments.
     * @param {SaleAssignmentDeleteManyArgs} args - Arguments to filter SaleAssignments to delete.
     * @example
     * // Delete a few SaleAssignments
     * const { count } = await prisma.saleAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleAssignmentDeleteManyArgs>(args?: SelectSubset<T, SaleAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleAssignmentUpdateManyArgs>(args: SelectSubset<T, SaleAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleAssignments and returns the data updated in the database.
     * @param {SaleAssignmentUpdateManyAndReturnArgs} args - Arguments to update many SaleAssignments.
     * @example
     * // Update many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SaleAssignments and only return the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaleAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, SaleAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SaleAssignment.
     * @param {SaleAssignmentUpsertArgs} args - Arguments to update or create a SaleAssignment.
     * @example
     * // Update or create a SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.upsert({
     *   create: {
     *     // ... data to create a SaleAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleAssignment we want to update
     *   }
     * })
     */
    upsert<T extends SaleAssignmentUpsertArgs>(args: SelectSubset<T, SaleAssignmentUpsertArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SaleAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentCountArgs} args - Arguments to filter SaleAssignments to count.
     * @example
     * // Count the number of SaleAssignments
     * const count = await prisma.saleAssignment.count({
     *   where: {
     *     // ... the filter for the SaleAssignments we want to count
     *   }
     * })
    **/
    count<T extends SaleAssignmentCountArgs>(
      args?: Subset<T, SaleAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaleAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAssignmentAggregateArgs>(args: Subset<T, SaleAssignmentAggregateArgs>): Prisma.PrismaPromise<GetSaleAssignmentAggregateType<T>>

    /**
     * Group by SaleAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: SaleAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaleAssignment model
   */
  readonly fields: SaleAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    associate<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaleAssignment model
   */
  interface SaleAssignmentFieldRefs {
    readonly id: FieldRef<"SaleAssignment", 'Int'>
    readonly saleId: FieldRef<"SaleAssignment", 'String'>
    readonly associateId: FieldRef<"SaleAssignment", 'Int'>
    readonly commissionRate: FieldRef<"SaleAssignment", 'Float'>
    readonly amount: FieldRef<"SaleAssignment", 'Float'>
    readonly createdAt: FieldRef<"SaleAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"SaleAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SaleAssignment findUnique
   */
  export type SaleAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment findUniqueOrThrow
   */
  export type SaleAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment findFirst
   */
  export type SaleAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleAssignments.
     */
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment findFirstOrThrow
   */
  export type SaleAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleAssignments.
     */
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment findMany
   */
  export type SaleAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignments to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment create
   */
  export type SaleAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a SaleAssignment.
     */
    data: XOR<SaleAssignmentCreateInput, SaleAssignmentUncheckedCreateInput>
  }

  /**
   * SaleAssignment createMany
   */
  export type SaleAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaleAssignments.
     */
    data: SaleAssignmentCreateManyInput | SaleAssignmentCreateManyInput[]
  }

  /**
   * SaleAssignment createManyAndReturn
   */
  export type SaleAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many SaleAssignments.
     */
    data: SaleAssignmentCreateManyInput | SaleAssignmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleAssignment update
   */
  export type SaleAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a SaleAssignment.
     */
    data: XOR<SaleAssignmentUpdateInput, SaleAssignmentUncheckedUpdateInput>
    /**
     * Choose, which SaleAssignment to update.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment updateMany
   */
  export type SaleAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaleAssignments.
     */
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which SaleAssignments to update
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to update.
     */
    limit?: number
  }

  /**
   * SaleAssignment updateManyAndReturn
   */
  export type SaleAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update SaleAssignments.
     */
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which SaleAssignments to update
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleAssignment upsert
   */
  export type SaleAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the SaleAssignment to update in case it exists.
     */
    where: SaleAssignmentWhereUniqueInput
    /**
     * In case the SaleAssignment found by the `where` argument doesn't exist, create a new SaleAssignment with this data.
     */
    create: XOR<SaleAssignmentCreateInput, SaleAssignmentUncheckedCreateInput>
    /**
     * In case the SaleAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleAssignmentUpdateInput, SaleAssignmentUncheckedUpdateInput>
  }

  /**
   * SaleAssignment delete
   */
  export type SaleAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter which SaleAssignment to delete.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment deleteMany
   */
  export type SaleAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleAssignments to delete
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to delete.
     */
    limit?: number
  }

  /**
   * SaleAssignment without action
   */
  export type SaleAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: number
    name: string
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Skill$usersArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["skill"]>
  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Skill$usersArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills and returns the data updated in the database.
     * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Skill$usersArgs<ExtArgs> = {}>(args?: Subset<T, Skill$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'Int'>
    readonly name: FieldRef<"Skill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill updateManyAndReturn
   */
  export type SkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to delete.
     */
    limit?: number
  }

  /**
   * Skill.users
   */
  export type Skill$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PartyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    eventDate: 'eventDate',
    customerId: 'customerId',
    externalId: 'externalId',
    syncedAt: 'syncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    notes: 'notes',
    syncedToLs: 'syncedToLs',
    lsPartyId: 'lsPartyId'
  };

  export type PartyScalarFieldEnum = (typeof PartyScalarFieldEnum)[keyof typeof PartyScalarFieldEnum]


  export const AlterationScalarFieldEnum: {
    id: 'id',
    partyId: 'partyId',
    notes: 'notes',
    timeSpent: 'timeSpent',
    scheduledDateTime: 'scheduledDateTime',
    tailorId: 'tailorId',
    status: 'status',
    externalId: 'externalId',
    syncedAt: 'syncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    memberId: 'memberId',
    lsLineItemId: 'lsLineItemId',
    assignedTailorId: 'assignedTailorId',
    itemType: 'itemType',
    estimatedTime: 'estimatedTime',
    actualTime: 'actualTime'
  };

  export type AlterationScalarFieldEnum = (typeof AlterationScalarFieldEnum)[keyof typeof AlterationScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    partyId: 'partyId',
    dateTime: 'dateTime',
    duration: 'duration',
    tailorId: 'tailorId',
    status: 'status',
    externalId: 'externalId',
    syncedAt: 'syncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    memberId: 'memberId',
    endDatetime: 'endDatetime',
    type: 'type',
    notes: 'notes',
    lsEventId: 'lsEventId'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const PartyMemberScalarFieldEnum: {
    id: 'id',
    partyId: 'partyId',
    lsCustomerId: 'lsCustomerId',
    role: 'role',
    measurements: 'measurements',
    notes: 'notes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartyMemberScalarFieldEnum = (typeof PartyMemberScalarFieldEnum)[keyof typeof PartyMemberScalarFieldEnum]


  export const SaleAssignmentScalarFieldEnum: {
    id: 'id',
    saleId: 'saleId',
    associateId: 'associateId',
    commissionRate: 'commissionRate',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SaleAssignmentScalarFieldEnum = (typeof SaleAssignmentScalarFieldEnum)[keyof typeof SaleAssignmentScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    name?: StringFilter<"Customer"> | string
    email?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    parties?: PartyListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parties?: PartyOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    parties?: PartyListRelationFilter
  }, "id" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    name?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    alterations?: AlterationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    assignedAlterations?: AlterationListRelationFilter
    saleAssignments?: SaleAssignmentListRelationFilter
    skills?: SkillListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    alterations?: AlterationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    assignedAlterations?: AlterationOrderByRelationAggregateInput
    saleAssignments?: SaleAssignmentOrderByRelationAggregateInput
    skills?: SkillOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    alterations?: AlterationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    assignedAlterations?: AlterationListRelationFilter
    saleAssignments?: SaleAssignmentListRelationFilter
    skills?: SkillListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PartyWhereInput = {
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    id?: IntFilter<"Party"> | number
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    alterations?: AlterationListRelationFilter
    appointments?: AppointmentListRelationFilter
    members?: PartyMemberListRelationFilter
  }

  export type PartyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    alterations?: AlterationOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    members?: PartyMemberOrderByRelationAggregateInput
  }

  export type PartyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    alterations?: AlterationListRelationFilter
    appointments?: AppointmentListRelationFilter
    members?: PartyMemberListRelationFilter
  }, "id">

  export type PartyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrderInput | SortOrder
    _count?: PartyCountOrderByAggregateInput
    _avg?: PartyAvgOrderByAggregateInput
    _max?: PartyMaxOrderByAggregateInput
    _min?: PartyMinOrderByAggregateInput
    _sum?: PartySumOrderByAggregateInput
  }

  export type PartyScalarWhereWithAggregatesInput = {
    AND?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    OR?: PartyScalarWhereWithAggregatesInput[]
    NOT?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Party"> | number
    name?: StringWithAggregatesFilter<"Party"> | string
    eventDate?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    customerId?: IntWithAggregatesFilter<"Party"> | number
    externalId?: StringNullableWithAggregatesFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Party"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Party"> | string | null
    syncedToLs?: BoolWithAggregatesFilter<"Party"> | boolean
    lsPartyId?: StringNullableWithAggregatesFilter<"Party"> | string | null
  }

  export type AlterationWhereInput = {
    AND?: AlterationWhereInput | AlterationWhereInput[]
    OR?: AlterationWhereInput[]
    NOT?: AlterationWhereInput | AlterationWhereInput[]
    id?: IntFilter<"Alteration"> | number
    partyId?: IntFilter<"Alteration"> | number
    notes?: StringNullableFilter<"Alteration"> | string | null
    timeSpent?: IntNullableFilter<"Alteration"> | number | null
    scheduledDateTime?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    tailorId?: IntNullableFilter<"Alteration"> | number | null
    status?: StringFilter<"Alteration"> | string
    externalId?: StringNullableFilter<"Alteration"> | string | null
    syncedAt?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    createdAt?: DateTimeFilter<"Alteration"> | Date | string
    updatedAt?: DateTimeFilter<"Alteration"> | Date | string
    memberId?: IntNullableFilter<"Alteration"> | number | null
    lsLineItemId?: StringNullableFilter<"Alteration"> | string | null
    assignedTailorId?: IntNullableFilter<"Alteration"> | number | null
    itemType?: StringNullableFilter<"Alteration"> | string | null
    estimatedTime?: IntNullableFilter<"Alteration"> | number | null
    actualTime?: IntNullableFilter<"Alteration"> | number | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
    assignedTailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AlterationOrderByWithRelationInput = {
    id?: SortOrder
    partyId?: SortOrder
    notes?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    scheduledDateTime?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    status?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    lsLineItemId?: SortOrderInput | SortOrder
    assignedTailorId?: SortOrderInput | SortOrder
    itemType?: SortOrderInput | SortOrder
    estimatedTime?: SortOrderInput | SortOrder
    actualTime?: SortOrderInput | SortOrder
    party?: PartyOrderByWithRelationInput
    tailor?: UserOrderByWithRelationInput
    member?: PartyMemberOrderByWithRelationInput
    assignedTailor?: UserOrderByWithRelationInput
  }

  export type AlterationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlterationWhereInput | AlterationWhereInput[]
    OR?: AlterationWhereInput[]
    NOT?: AlterationWhereInput | AlterationWhereInput[]
    partyId?: IntFilter<"Alteration"> | number
    notes?: StringNullableFilter<"Alteration"> | string | null
    timeSpent?: IntNullableFilter<"Alteration"> | number | null
    scheduledDateTime?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    tailorId?: IntNullableFilter<"Alteration"> | number | null
    status?: StringFilter<"Alteration"> | string
    externalId?: StringNullableFilter<"Alteration"> | string | null
    syncedAt?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    createdAt?: DateTimeFilter<"Alteration"> | Date | string
    updatedAt?: DateTimeFilter<"Alteration"> | Date | string
    memberId?: IntNullableFilter<"Alteration"> | number | null
    lsLineItemId?: StringNullableFilter<"Alteration"> | string | null
    assignedTailorId?: IntNullableFilter<"Alteration"> | number | null
    itemType?: StringNullableFilter<"Alteration"> | string | null
    estimatedTime?: IntNullableFilter<"Alteration"> | number | null
    actualTime?: IntNullableFilter<"Alteration"> | number | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
    assignedTailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AlterationOrderByWithAggregationInput = {
    id?: SortOrder
    partyId?: SortOrder
    notes?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    scheduledDateTime?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    status?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    lsLineItemId?: SortOrderInput | SortOrder
    assignedTailorId?: SortOrderInput | SortOrder
    itemType?: SortOrderInput | SortOrder
    estimatedTime?: SortOrderInput | SortOrder
    actualTime?: SortOrderInput | SortOrder
    _count?: AlterationCountOrderByAggregateInput
    _avg?: AlterationAvgOrderByAggregateInput
    _max?: AlterationMaxOrderByAggregateInput
    _min?: AlterationMinOrderByAggregateInput
    _sum?: AlterationSumOrderByAggregateInput
  }

  export type AlterationScalarWhereWithAggregatesInput = {
    AND?: AlterationScalarWhereWithAggregatesInput | AlterationScalarWhereWithAggregatesInput[]
    OR?: AlterationScalarWhereWithAggregatesInput[]
    NOT?: AlterationScalarWhereWithAggregatesInput | AlterationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alteration"> | number
    partyId?: IntWithAggregatesFilter<"Alteration"> | number
    notes?: StringNullableWithAggregatesFilter<"Alteration"> | string | null
    timeSpent?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
    scheduledDateTime?: DateTimeNullableWithAggregatesFilter<"Alteration"> | Date | string | null
    tailorId?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
    status?: StringWithAggregatesFilter<"Alteration"> | string
    externalId?: StringNullableWithAggregatesFilter<"Alteration"> | string | null
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Alteration"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Alteration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Alteration"> | Date | string
    memberId?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
    lsLineItemId?: StringNullableWithAggregatesFilter<"Alteration"> | string | null
    assignedTailorId?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
    itemType?: StringNullableWithAggregatesFilter<"Alteration"> | string | null
    estimatedTime?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
    actualTime?: IntNullableWithAggregatesFilter<"Alteration"> | number | null
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: IntFilter<"Appointment"> | number
    partyId?: IntFilter<"Appointment"> | number
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    status?: StringFilter<"Appointment"> | string
    externalId?: StringNullableFilter<"Appointment"> | string | null
    syncedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    endDatetime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    partyId?: SortOrder
    dateTime?: SortOrder
    duration?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    status?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    endDatetime?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    lsEventId?: SortOrderInput | SortOrder
    party?: PartyOrderByWithRelationInput
    tailor?: UserOrderByWithRelationInput
    member?: PartyMemberOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    partyId?: IntFilter<"Appointment"> | number
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    status?: StringFilter<"Appointment"> | string
    externalId?: StringNullableFilter<"Appointment"> | string | null
    syncedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    endDatetime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    partyId?: SortOrder
    dateTime?: SortOrder
    duration?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    status?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    endDatetime?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    lsEventId?: SortOrderInput | SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appointment"> | number
    partyId?: IntWithAggregatesFilter<"Appointment"> | number
    dateTime?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    duration?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    tailorId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    status?: StringWithAggregatesFilter<"Appointment"> | string
    externalId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    memberId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    endDatetime?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
    type?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    lsEventId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: IntWithAggregatesFilter<"AuditLog"> | number
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type PartyMemberWhereInput = {
    AND?: PartyMemberWhereInput | PartyMemberWhereInput[]
    OR?: PartyMemberWhereInput[]
    NOT?: PartyMemberWhereInput | PartyMemberWhereInput[]
    id?: IntFilter<"PartyMember"> | number
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    measurements?: StringNullableFilter<"PartyMember"> | string | null
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    alterations?: AlterationListRelationFilter
    appointments?: AppointmentListRelationFilter
  }

  export type PartyMemberOrderByWithRelationInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrderInput | SortOrder
    role?: SortOrder
    measurements?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    party?: PartyOrderByWithRelationInput
    alterations?: AlterationOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type PartyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartyMemberWhereInput | PartyMemberWhereInput[]
    OR?: PartyMemberWhereInput[]
    NOT?: PartyMemberWhereInput | PartyMemberWhereInput[]
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    measurements?: StringNullableFilter<"PartyMember"> | string | null
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    alterations?: AlterationListRelationFilter
    appointments?: AppointmentListRelationFilter
  }, "id">

  export type PartyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrderInput | SortOrder
    role?: SortOrder
    measurements?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartyMemberCountOrderByAggregateInput
    _avg?: PartyMemberAvgOrderByAggregateInput
    _max?: PartyMemberMaxOrderByAggregateInput
    _min?: PartyMemberMinOrderByAggregateInput
    _sum?: PartyMemberSumOrderByAggregateInput
  }

  export type PartyMemberScalarWhereWithAggregatesInput = {
    AND?: PartyMemberScalarWhereWithAggregatesInput | PartyMemberScalarWhereWithAggregatesInput[]
    OR?: PartyMemberScalarWhereWithAggregatesInput[]
    NOT?: PartyMemberScalarWhereWithAggregatesInput | PartyMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PartyMember"> | number
    partyId?: IntWithAggregatesFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableWithAggregatesFilter<"PartyMember"> | string | null
    role?: StringWithAggregatesFilter<"PartyMember"> | string
    measurements?: StringNullableWithAggregatesFilter<"PartyMember"> | string | null
    notes?: StringNullableWithAggregatesFilter<"PartyMember"> | string | null
    status?: StringWithAggregatesFilter<"PartyMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PartyMember"> | Date | string
  }

  export type SaleAssignmentWhereInput = {
    AND?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    OR?: SaleAssignmentWhereInput[]
    NOT?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    id?: IntFilter<"SaleAssignment"> | number
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    associate?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SaleAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    associate?: UserOrderByWithRelationInput
  }

  export type SaleAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    OR?: SaleAssignmentWhereInput[]
    NOT?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    associate?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SaleAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SaleAssignmentCountOrderByAggregateInput
    _avg?: SaleAssignmentAvgOrderByAggregateInput
    _max?: SaleAssignmentMaxOrderByAggregateInput
    _min?: SaleAssignmentMinOrderByAggregateInput
    _sum?: SaleAssignmentSumOrderByAggregateInput
  }

  export type SaleAssignmentScalarWhereWithAggregatesInput = {
    AND?: SaleAssignmentScalarWhereWithAggregatesInput | SaleAssignmentScalarWhereWithAggregatesInput[]
    OR?: SaleAssignmentScalarWhereWithAggregatesInput[]
    NOT?: SaleAssignmentScalarWhereWithAggregatesInput | SaleAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SaleAssignment"> | number
    saleId?: StringWithAggregatesFilter<"SaleAssignment"> | string
    associateId?: IntWithAggregatesFilter<"SaleAssignment"> | number
    commissionRate?: FloatWithAggregatesFilter<"SaleAssignment"> | number
    amount?: FloatWithAggregatesFilter<"SaleAssignment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SaleAssignment"> | Date | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
    users?: UserListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "name">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skill"> | number
    name?: StringWithAggregatesFilter<"Skill"> | string
  }

  export type CustomerCreateInput = {
    name: string
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyCreateInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterations?: AlterationCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterations?: AlterationUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterations?: AlterationUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterations?: AlterationUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type PartyCreateManyInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
  }

  export type PartyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlterationCreateInput = {
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
    party: PartyCreateNestedOneWithoutAlterationsInput
    tailor?: UserCreateNestedOneWithoutAlterationsInput
    member?: PartyMemberCreateNestedOneWithoutAlterationsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedAlterationsInput
  }

  export type AlterationUncheckedCreateInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationUpdateInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
    party?: PartyUpdateOneRequiredWithoutAlterationsNestedInput
    tailor?: UserUpdateOneWithoutAlterationsNestedInput
    member?: PartyMemberUpdateOneWithoutAlterationsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedAlterationsNestedInput
  }

  export type AlterationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationCreateManyInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationUpdateManyMutationInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppointmentCreateInput = {
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AppointmentUpdateInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentCreateManyInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AppointmentUpdateManyMutationInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateInput = {
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyMemberCreateInput = {
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    party: PartyCreateNestedOneWithoutMembersInput
    alterations?: AlterationCreateNestedManyWithoutMemberInput
    appointments?: AppointmentCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationUncheckedCreateNestedManyWithoutMemberInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUpdateInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneRequiredWithoutMembersNestedInput
    alterations?: AlterationUpdateManyWithoutMemberNestedInput
    appointments?: AppointmentUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUncheckedUpdateManyWithoutMemberNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberCreateManyInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartyMemberUpdateManyMutationInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentCreateInput = {
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    associate: UserCreateNestedOneWithoutSaleAssignmentsInput
  }

  export type SaleAssignmentUncheckedCreateInput = {
    id?: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUpdateInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    associate?: UserUpdateOneRequiredWithoutSaleAssignmentsNestedInput
  }

  export type SaleAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    associateId?: IntFieldUpdateOperationsInput | number
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentCreateManyInput = {
    id?: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUpdateManyMutationInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    associateId?: IntFieldUpdateOperationsInput | number
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillCreateManyInput = {
    id?: number
    name: string
  }

  export type SkillUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PartyListRelationFilter = {
    every?: PartyWhereInput
    some?: PartyWhereInput
    none?: PartyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PartyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AlterationListRelationFilter = {
    every?: AlterationWhereInput
    some?: AlterationWhereInput
    none?: AlterationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SaleAssignmentListRelationFilter = {
    every?: SaleAssignmentWhereInput
    some?: SaleAssignmentWhereInput
    none?: SaleAssignmentWhereInput
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlterationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaleAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type PartyMemberListRelationFilter = {
    every?: PartyMemberWhereInput
    some?: PartyMemberWhereInput
    none?: PartyMemberWhereInput
  }

  export type PartyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartyAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type PartyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartySumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PartyScalarRelationFilter = {
    is?: PartyWhereInput
    isNot?: PartyWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PartyMemberNullableScalarRelationFilter = {
    is?: PartyMemberWhereInput | null
    isNot?: PartyMemberWhereInput | null
  }

  export type AlterationCountOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    notes?: SortOrder
    timeSpent?: SortOrder
    scheduledDateTime?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    lsLineItemId?: SortOrder
    assignedTailorId?: SortOrder
    itemType?: SortOrder
    estimatedTime?: SortOrder
    actualTime?: SortOrder
  }

  export type AlterationAvgOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    timeSpent?: SortOrder
    tailorId?: SortOrder
    memberId?: SortOrder
    assignedTailorId?: SortOrder
    estimatedTime?: SortOrder
    actualTime?: SortOrder
  }

  export type AlterationMaxOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    notes?: SortOrder
    timeSpent?: SortOrder
    scheduledDateTime?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    lsLineItemId?: SortOrder
    assignedTailorId?: SortOrder
    itemType?: SortOrder
    estimatedTime?: SortOrder
    actualTime?: SortOrder
  }

  export type AlterationMinOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    notes?: SortOrder
    timeSpent?: SortOrder
    scheduledDateTime?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    lsLineItemId?: SortOrder
    assignedTailorId?: SortOrder
    itemType?: SortOrder
    estimatedTime?: SortOrder
    actualTime?: SortOrder
  }

  export type AlterationSumOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    timeSpent?: SortOrder
    tailorId?: SortOrder
    memberId?: SortOrder
    assignedTailorId?: SortOrder
    estimatedTime?: SortOrder
    actualTime?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    dateTime?: SortOrder
    duration?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    endDatetime?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    duration?: SortOrder
    tailorId?: SortOrder
    memberId?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    dateTime?: SortOrder
    duration?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    endDatetime?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    dateTime?: SortOrder
    duration?: SortOrder
    tailorId?: SortOrder
    status?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    endDatetime?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    duration?: SortOrder
    tailorId?: SortOrder
    memberId?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type PartyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    measurements?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
  }

  export type PartyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    measurements?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    measurements?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMemberSumOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SaleAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
  }

  export type SaleAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PartyCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
  }

  export type PartyUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PartyUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    upsert?: PartyUpsertWithWhereUniqueWithoutCustomerInput | PartyUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    set?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    disconnect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    delete?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    update?: PartyUpdateWithWhereUniqueWithoutCustomerInput | PartyUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PartyUpdateManyWithWhereWithoutCustomerInput | PartyUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PartyScalarWhereInput | PartyScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartyUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    upsert?: PartyUpsertWithWhereUniqueWithoutCustomerInput | PartyUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    set?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    disconnect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    delete?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    update?: PartyUpdateWithWhereUniqueWithoutCustomerInput | PartyUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PartyUpdateManyWithWhereWithoutCustomerInput | PartyUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PartyScalarWhereInput | PartyScalarWhereInput[]
  }

  export type AppointmentCreateNestedManyWithoutTailorInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AlterationCreateNestedManyWithoutTailorInput = {
    create?: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput> | AlterationCreateWithoutTailorInput[] | AlterationUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutTailorInput | AlterationCreateOrConnectWithoutTailorInput[]
    createMany?: AlterationCreateManyTailorInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AlterationCreateNestedManyWithoutAssignedTailorInput = {
    create?: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput> | AlterationCreateWithoutAssignedTailorInput[] | AlterationUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutAssignedTailorInput | AlterationCreateOrConnectWithoutAssignedTailorInput[]
    createMany?: AlterationCreateManyAssignedTailorInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type SaleAssignmentCreateNestedManyWithoutAssociateInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
  }

  export type SkillCreateNestedManyWithoutUsersInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AlterationUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput> | AlterationCreateWithoutTailorInput[] | AlterationUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutTailorInput | AlterationCreateOrConnectWithoutTailorInput[]
    createMany?: AlterationCreateManyTailorInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput = {
    create?: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput> | AlterationCreateWithoutAssignedTailorInput[] | AlterationUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutAssignedTailorInput | AlterationCreateOrConnectWithoutAssignedTailorInput[]
    createMany?: AlterationCreateManyAssignedTailorInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type AppointmentUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTailorInput | AppointmentUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTailorInput | AppointmentUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTailorInput | AppointmentUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AlterationUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput> | AlterationCreateWithoutTailorInput[] | AlterationUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutTailorInput | AlterationCreateOrConnectWithoutTailorInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutTailorInput | AlterationUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AlterationCreateManyTailorInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutTailorInput | AlterationUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutTailorInput | AlterationUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AlterationUpdateManyWithoutAssignedTailorNestedInput = {
    create?: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput> | AlterationCreateWithoutAssignedTailorInput[] | AlterationUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutAssignedTailorInput | AlterationCreateOrConnectWithoutAssignedTailorInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutAssignedTailorInput | AlterationUpsertWithWhereUniqueWithoutAssignedTailorInput[]
    createMany?: AlterationCreateManyAssignedTailorInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutAssignedTailorInput | AlterationUpdateWithWhereUniqueWithoutAssignedTailorInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutAssignedTailorInput | AlterationUpdateManyWithWhereWithoutAssignedTailorInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type SaleAssignmentUpdateManyWithoutAssociateNestedInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    upsert?: SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    set?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    disconnect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    delete?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    update?: SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput[]
    updateMany?: SaleAssignmentUpdateManyWithWhereWithoutAssociateInput | SaleAssignmentUpdateManyWithWhereWithoutAssociateInput[]
    deleteMany?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
  }

  export type SkillUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUsersInput | SkillUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUsersInput | SkillUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUsersInput | SkillUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTailorInput | AppointmentUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTailorInput | AppointmentUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTailorInput | AppointmentUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AlterationUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput> | AlterationCreateWithoutTailorInput[] | AlterationUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutTailorInput | AlterationCreateOrConnectWithoutTailorInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutTailorInput | AlterationUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AlterationCreateManyTailorInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutTailorInput | AlterationUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutTailorInput | AlterationUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput = {
    create?: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput> | AlterationCreateWithoutAssignedTailorInput[] | AlterationUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutAssignedTailorInput | AlterationCreateOrConnectWithoutAssignedTailorInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutAssignedTailorInput | AlterationUpsertWithWhereUniqueWithoutAssignedTailorInput[]
    createMany?: AlterationCreateManyAssignedTailorInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutAssignedTailorInput | AlterationUpdateWithWhereUniqueWithoutAssignedTailorInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutAssignedTailorInput | AlterationUpdateManyWithWhereWithoutAssignedTailorInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    upsert?: SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    set?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    disconnect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    delete?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    update?: SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput[]
    updateMany?: SaleAssignmentUpdateManyWithWhereWithoutAssociateInput | SaleAssignmentUpdateManyWithWhereWithoutAssociateInput[]
    deleteMany?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUsersInput | SkillUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUsersInput | SkillUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUsersInput | SkillUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutPartiesInput = {
    create?: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPartiesInput
    connect?: CustomerWhereUniqueInput
  }

  export type AlterationCreateNestedManyWithoutPartyInput = {
    create?: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput> | AlterationCreateWithoutPartyInput[] | AlterationUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutPartyInput | AlterationCreateOrConnectWithoutPartyInput[]
    createMany?: AlterationCreateManyPartyInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPartyInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyMemberCreateNestedManyWithoutPartyInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
  }

  export type AlterationUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput> | AlterationCreateWithoutPartyInput[] | AlterationUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutPartyInput | AlterationCreateOrConnectWithoutPartyInput[]
    createMany?: AlterationCreateManyPartyInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyMemberUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CustomerUpdateOneRequiredWithoutPartiesNestedInput = {
    create?: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPartiesInput
    upsert?: CustomerUpsertWithoutPartiesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPartiesInput, CustomerUpdateWithoutPartiesInput>, CustomerUncheckedUpdateWithoutPartiesInput>
  }

  export type AlterationUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput> | AlterationCreateWithoutPartyInput[] | AlterationUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutPartyInput | AlterationCreateOrConnectWithoutPartyInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutPartyInput | AlterationUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AlterationCreateManyPartyInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutPartyInput | AlterationUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutPartyInput | AlterationUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPartyInput | AppointmentUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPartyInput | AppointmentUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPartyInput | AppointmentUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PartyMemberUpdateManyWithoutPartyNestedInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    upsert?: PartyMemberUpsertWithWhereUniqueWithoutPartyInput | PartyMemberUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    set?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    disconnect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    delete?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    update?: PartyMemberUpdateWithWhereUniqueWithoutPartyInput | PartyMemberUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: PartyMemberUpdateManyWithWhereWithoutPartyInput | PartyMemberUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
  }

  export type AlterationUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput> | AlterationCreateWithoutPartyInput[] | AlterationUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutPartyInput | AlterationCreateOrConnectWithoutPartyInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutPartyInput | AlterationUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AlterationCreateManyPartyInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutPartyInput | AlterationUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutPartyInput | AlterationUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPartyInput | AppointmentUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPartyInput | AppointmentUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPartyInput | AppointmentUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PartyMemberUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    upsert?: PartyMemberUpsertWithWhereUniqueWithoutPartyInput | PartyMemberUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    set?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    disconnect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    delete?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    update?: PartyMemberUpdateWithWhereUniqueWithoutPartyInput | PartyMemberUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: PartyMemberUpdateManyWithWhereWithoutPartyInput | PartyMemberUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
  }

  export type PartyCreateNestedOneWithoutAlterationsInput = {
    create?: XOR<PartyCreateWithoutAlterationsInput, PartyUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAlterationsInput
    connect?: PartyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAlterationsInput = {
    create?: XOR<UserCreateWithoutAlterationsInput, UserUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlterationsInput
    connect?: UserWhereUniqueInput
  }

  export type PartyMemberCreateNestedOneWithoutAlterationsInput = {
    create?: XOR<PartyMemberCreateWithoutAlterationsInput, PartyMemberUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAlterationsInput
    connect?: PartyMemberWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedAlterationsInput = {
    create?: XOR<UserCreateWithoutAssignedAlterationsInput, UserUncheckedCreateWithoutAssignedAlterationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAlterationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartyUpdateOneRequiredWithoutAlterationsNestedInput = {
    create?: XOR<PartyCreateWithoutAlterationsInput, PartyUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAlterationsInput
    upsert?: PartyUpsertWithoutAlterationsInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutAlterationsInput, PartyUpdateWithoutAlterationsInput>, PartyUncheckedUpdateWithoutAlterationsInput>
  }

  export type UserUpdateOneWithoutAlterationsNestedInput = {
    create?: XOR<UserCreateWithoutAlterationsInput, UserUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlterationsInput
    upsert?: UserUpsertWithoutAlterationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlterationsInput, UserUpdateWithoutAlterationsInput>, UserUncheckedUpdateWithoutAlterationsInput>
  }

  export type PartyMemberUpdateOneWithoutAlterationsNestedInput = {
    create?: XOR<PartyMemberCreateWithoutAlterationsInput, PartyMemberUncheckedCreateWithoutAlterationsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAlterationsInput
    upsert?: PartyMemberUpsertWithoutAlterationsInput
    disconnect?: PartyMemberWhereInput | boolean
    delete?: PartyMemberWhereInput | boolean
    connect?: PartyMemberWhereUniqueInput
    update?: XOR<XOR<PartyMemberUpdateToOneWithWhereWithoutAlterationsInput, PartyMemberUpdateWithoutAlterationsInput>, PartyMemberUncheckedUpdateWithoutAlterationsInput>
  }

  export type UserUpdateOneWithoutAssignedAlterationsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedAlterationsInput, UserUncheckedCreateWithoutAssignedAlterationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAlterationsInput
    upsert?: UserUpsertWithoutAssignedAlterationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedAlterationsInput, UserUpdateWithoutAssignedAlterationsInput>, UserUncheckedUpdateWithoutAssignedAlterationsInput>
  }

  export type PartyCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAppointmentsInput
    connect?: PartyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type PartyMemberCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAppointmentsInput
    connect?: PartyMemberWhereUniqueInput
  }

  export type PartyUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAppointmentsInput
    upsert?: PartyUpsertWithoutAppointmentsInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutAppointmentsInput, PartyUpdateWithoutAppointmentsInput>, PartyUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PartyMemberUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAppointmentsInput
    upsert?: PartyMemberUpsertWithoutAppointmentsInput
    disconnect?: PartyMemberWhereInput | boolean
    delete?: PartyMemberWhereInput | boolean
    connect?: PartyMemberWhereUniqueInput
    update?: XOR<XOR<PartyMemberUpdateToOneWithWhereWithoutAppointmentsInput, PartyMemberUpdateWithoutAppointmentsInput>, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type PartyCreateNestedOneWithoutMembersInput = {
    create?: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: PartyCreateOrConnectWithoutMembersInput
    connect?: PartyWhereUniqueInput
  }

  export type AlterationCreateNestedManyWithoutMemberInput = {
    create?: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput> | AlterationCreateWithoutMemberInput[] | AlterationUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutMemberInput | AlterationCreateOrConnectWithoutMemberInput[]
    createMany?: AlterationCreateManyMemberInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutMemberInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AlterationUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput> | AlterationCreateWithoutMemberInput[] | AlterationUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutMemberInput | AlterationCreateOrConnectWithoutMemberInput[]
    createMany?: AlterationCreateManyMemberInputEnvelope
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: PartyCreateOrConnectWithoutMembersInput
    upsert?: PartyUpsertWithoutMembersInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutMembersInput, PartyUpdateWithoutMembersInput>, PartyUncheckedUpdateWithoutMembersInput>
  }

  export type AlterationUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput> | AlterationCreateWithoutMemberInput[] | AlterationUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutMemberInput | AlterationCreateOrConnectWithoutMemberInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutMemberInput | AlterationUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AlterationCreateManyMemberInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutMemberInput | AlterationUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutMemberInput | AlterationUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutMemberInput | AppointmentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutMemberInput | AppointmentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutMemberInput | AppointmentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AlterationUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput> | AlterationCreateWithoutMemberInput[] | AlterationUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AlterationCreateOrConnectWithoutMemberInput | AlterationCreateOrConnectWithoutMemberInput[]
    upsert?: AlterationUpsertWithWhereUniqueWithoutMemberInput | AlterationUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AlterationCreateManyMemberInputEnvelope
    set?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    disconnect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    delete?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    connect?: AlterationWhereUniqueInput | AlterationWhereUniqueInput[]
    update?: AlterationUpdateWithWhereUniqueWithoutMemberInput | AlterationUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AlterationUpdateManyWithWhereWithoutMemberInput | AlterationUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutMemberInput | AppointmentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutMemberInput | AppointmentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutMemberInput | AppointmentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSaleAssignmentsInput = {
    create?: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSaleAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleAssignmentsInput
    upsert?: UserUpsertWithoutSaleAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSaleAssignmentsInput, UserUpdateWithoutSaleAssignmentsInput>, UserUncheckedUpdateWithoutSaleAssignmentsInput>
  }

  export type UserCreateNestedManyWithoutSkillsInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSkillsInput | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSkillsInput | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSkillsInput | UserUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSkillsInput | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSkillsInput | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSkillsInput | UserUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PartyCreateWithoutCustomerInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterations?: AlterationCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutCustomerInput = {
    id?: number
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterations?: AlterationUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput>
  }

  export type PartyCreateManyCustomerInputEnvelope = {
    data: PartyCreateManyCustomerInput | PartyCreateManyCustomerInput[]
  }

  export type PartyUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    update: XOR<PartyUpdateWithoutCustomerInput, PartyUncheckedUpdateWithoutCustomerInput>
    create: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput>
  }

  export type PartyUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    data: XOR<PartyUpdateWithoutCustomerInput, PartyUncheckedUpdateWithoutCustomerInput>
  }

  export type PartyUpdateManyWithWhereWithoutCustomerInput = {
    where: PartyScalarWhereInput
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PartyScalarWhereInput = {
    AND?: PartyScalarWhereInput | PartyScalarWhereInput[]
    OR?: PartyScalarWhereInput[]
    NOT?: PartyScalarWhereInput | PartyScalarWhereInput[]
    id?: IntFilter<"Party"> | number
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
  }

  export type AppointmentCreateWithoutTailorInput = {
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutTailorInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AppointmentCreateOrConnectWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput>
  }

  export type AppointmentCreateManyTailorInputEnvelope = {
    data: AppointmentCreateManyTailorInput | AppointmentCreateManyTailorInput[]
  }

  export type AlterationCreateWithoutTailorInput = {
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
    party: PartyCreateNestedOneWithoutAlterationsInput
    member?: PartyMemberCreateNestedOneWithoutAlterationsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedAlterationsInput
  }

  export type AlterationUncheckedCreateWithoutTailorInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationCreateOrConnectWithoutTailorInput = {
    where: AlterationWhereUniqueInput
    create: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput>
  }

  export type AlterationCreateManyTailorInputEnvelope = {
    data: AlterationCreateManyTailorInput | AlterationCreateManyTailorInput[]
  }

  export type AuditLogCreateWithoutUserInput = {
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
  }

  export type AlterationCreateWithoutAssignedTailorInput = {
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
    party: PartyCreateNestedOneWithoutAlterationsInput
    tailor?: UserCreateNestedOneWithoutAlterationsInput
    member?: PartyMemberCreateNestedOneWithoutAlterationsInput
  }

  export type AlterationUncheckedCreateWithoutAssignedTailorInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationCreateOrConnectWithoutAssignedTailorInput = {
    where: AlterationWhereUniqueInput
    create: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput>
  }

  export type AlterationCreateManyAssignedTailorInputEnvelope = {
    data: AlterationCreateManyAssignedTailorInput | AlterationCreateManyAssignedTailorInput[]
  }

  export type SaleAssignmentCreateWithoutAssociateInput = {
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUncheckedCreateWithoutAssociateInput = {
    id?: number
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentCreateOrConnectWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    create: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput>
  }

  export type SaleAssignmentCreateManyAssociateInputEnvelope = {
    data: SaleAssignmentCreateManyAssociateInput | SaleAssignmentCreateManyAssociateInput[]
  }

  export type SkillCreateWithoutUsersInput = {
    name: string
  }

  export type SkillUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type SkillCreateOrConnectWithoutUsersInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutTailorInput, AppointmentUncheckedUpdateWithoutTailorInput>
    create: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutTailorInput, AppointmentUncheckedUpdateWithoutTailorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutTailorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutTailorInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: IntFilter<"Appointment"> | number
    partyId?: IntFilter<"Appointment"> | number
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    status?: StringFilter<"Appointment"> | string
    externalId?: StringNullableFilter<"Appointment"> | string | null
    syncedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    endDatetime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
  }

  export type AlterationUpsertWithWhereUniqueWithoutTailorInput = {
    where: AlterationWhereUniqueInput
    update: XOR<AlterationUpdateWithoutTailorInput, AlterationUncheckedUpdateWithoutTailorInput>
    create: XOR<AlterationCreateWithoutTailorInput, AlterationUncheckedCreateWithoutTailorInput>
  }

  export type AlterationUpdateWithWhereUniqueWithoutTailorInput = {
    where: AlterationWhereUniqueInput
    data: XOR<AlterationUpdateWithoutTailorInput, AlterationUncheckedUpdateWithoutTailorInput>
  }

  export type AlterationUpdateManyWithWhereWithoutTailorInput = {
    where: AlterationScalarWhereInput
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyWithoutTailorInput>
  }

  export type AlterationScalarWhereInput = {
    AND?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
    OR?: AlterationScalarWhereInput[]
    NOT?: AlterationScalarWhereInput | AlterationScalarWhereInput[]
    id?: IntFilter<"Alteration"> | number
    partyId?: IntFilter<"Alteration"> | number
    notes?: StringNullableFilter<"Alteration"> | string | null
    timeSpent?: IntNullableFilter<"Alteration"> | number | null
    scheduledDateTime?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    tailorId?: IntNullableFilter<"Alteration"> | number | null
    status?: StringFilter<"Alteration"> | string
    externalId?: StringNullableFilter<"Alteration"> | string | null
    syncedAt?: DateTimeNullableFilter<"Alteration"> | Date | string | null
    createdAt?: DateTimeFilter<"Alteration"> | Date | string
    updatedAt?: DateTimeFilter<"Alteration"> | Date | string
    memberId?: IntNullableFilter<"Alteration"> | number | null
    lsLineItemId?: StringNullableFilter<"Alteration"> | string | null
    assignedTailorId?: IntNullableFilter<"Alteration"> | number | null
    itemType?: StringNullableFilter<"Alteration"> | string | null
    estimatedTime?: IntNullableFilter<"Alteration"> | number | null
    actualTime?: IntNullableFilter<"Alteration"> | number | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AlterationUpsertWithWhereUniqueWithoutAssignedTailorInput = {
    where: AlterationWhereUniqueInput
    update: XOR<AlterationUpdateWithoutAssignedTailorInput, AlterationUncheckedUpdateWithoutAssignedTailorInput>
    create: XOR<AlterationCreateWithoutAssignedTailorInput, AlterationUncheckedCreateWithoutAssignedTailorInput>
  }

  export type AlterationUpdateWithWhereUniqueWithoutAssignedTailorInput = {
    where: AlterationWhereUniqueInput
    data: XOR<AlterationUpdateWithoutAssignedTailorInput, AlterationUncheckedUpdateWithoutAssignedTailorInput>
  }

  export type AlterationUpdateManyWithWhereWithoutAssignedTailorInput = {
    where: AlterationScalarWhereInput
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyWithoutAssignedTailorInput>
  }

  export type SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    update: XOR<SaleAssignmentUpdateWithoutAssociateInput, SaleAssignmentUncheckedUpdateWithoutAssociateInput>
    create: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput>
  }

  export type SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    data: XOR<SaleAssignmentUpdateWithoutAssociateInput, SaleAssignmentUncheckedUpdateWithoutAssociateInput>
  }

  export type SaleAssignmentUpdateManyWithWhereWithoutAssociateInput = {
    where: SaleAssignmentScalarWhereInput
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyWithoutAssociateInput>
  }

  export type SaleAssignmentScalarWhereInput = {
    AND?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
    OR?: SaleAssignmentScalarWhereInput[]
    NOT?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
    id?: IntFilter<"SaleAssignment"> | number
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
  }

  export type SkillUpsertWithWhereUniqueWithoutUsersInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutUsersInput, SkillUncheckedUpdateWithoutUsersInput>
    create: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutUsersInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutUsersInput, SkillUncheckedUpdateWithoutUsersInput>
  }

  export type SkillUpdateManyWithWhereWithoutUsersInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutUsersInput>
  }

  export type SkillScalarWhereInput = {
    AND?: SkillScalarWhereInput | SkillScalarWhereInput[]
    OR?: SkillScalarWhereInput[]
    NOT?: SkillScalarWhereInput | SkillScalarWhereInput[]
    id?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
  }

  export type CustomerCreateWithoutPartiesInput = {
    name: string
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUncheckedCreateWithoutPartiesInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateOrConnectWithoutPartiesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
  }

  export type AlterationCreateWithoutPartyInput = {
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
    tailor?: UserCreateNestedOneWithoutAlterationsInput
    member?: PartyMemberCreateNestedOneWithoutAlterationsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedAlterationsInput
  }

  export type AlterationUncheckedCreateWithoutPartyInput = {
    id?: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationCreateOrConnectWithoutPartyInput = {
    where: AlterationWhereUniqueInput
    create: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput>
  }

  export type AlterationCreateManyPartyInputEnvelope = {
    data: AlterationCreateManyPartyInput | AlterationCreateManyPartyInput[]
  }

  export type AppointmentCreateWithoutPartyInput = {
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutPartyInput = {
    id?: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AppointmentCreateOrConnectWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput>
  }

  export type AppointmentCreateManyPartyInputEnvelope = {
    data: AppointmentCreateManyPartyInput | AppointmentCreateManyPartyInput[]
  }

  export type PartyMemberCreateWithoutPartyInput = {
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationCreateNestedManyWithoutMemberInput
    appointments?: AppointmentCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateWithoutPartyInput = {
    id?: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationUncheckedCreateNestedManyWithoutMemberInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberCreateOrConnectWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    create: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput>
  }

  export type PartyMemberCreateManyPartyInputEnvelope = {
    data: PartyMemberCreateManyPartyInput | PartyMemberCreateManyPartyInput[]
  }

  export type CustomerUpsertWithoutPartiesInput = {
    update: XOR<CustomerUpdateWithoutPartiesInput, CustomerUncheckedUpdateWithoutPartiesInput>
    create: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPartiesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPartiesInput, CustomerUncheckedUpdateWithoutPartiesInput>
  }

  export type CustomerUpdateWithoutPartiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateWithoutPartiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationUpsertWithWhereUniqueWithoutPartyInput = {
    where: AlterationWhereUniqueInput
    update: XOR<AlterationUpdateWithoutPartyInput, AlterationUncheckedUpdateWithoutPartyInput>
    create: XOR<AlterationCreateWithoutPartyInput, AlterationUncheckedCreateWithoutPartyInput>
  }

  export type AlterationUpdateWithWhereUniqueWithoutPartyInput = {
    where: AlterationWhereUniqueInput
    data: XOR<AlterationUpdateWithoutPartyInput, AlterationUncheckedUpdateWithoutPartyInput>
  }

  export type AlterationUpdateManyWithWhereWithoutPartyInput = {
    where: AlterationScalarWhereInput
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyWithoutPartyInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPartyInput, AppointmentUncheckedUpdateWithoutPartyInput>
    create: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPartyInput, AppointmentUncheckedUpdateWithoutPartyInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPartyInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPartyInput>
  }

  export type PartyMemberUpsertWithWhereUniqueWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    update: XOR<PartyMemberUpdateWithoutPartyInput, PartyMemberUncheckedUpdateWithoutPartyInput>
    create: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput>
  }

  export type PartyMemberUpdateWithWhereUniqueWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    data: XOR<PartyMemberUpdateWithoutPartyInput, PartyMemberUncheckedUpdateWithoutPartyInput>
  }

  export type PartyMemberUpdateManyWithWhereWithoutPartyInput = {
    where: PartyMemberScalarWhereInput
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyWithoutPartyInput>
  }

  export type PartyMemberScalarWhereInput = {
    AND?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
    OR?: PartyMemberScalarWhereInput[]
    NOT?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
    id?: IntFilter<"PartyMember"> | number
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    measurements?: StringNullableFilter<"PartyMember"> | string | null
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
  }

  export type PartyCreateWithoutAlterationsInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutAlterationsInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutAlterationsInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutAlterationsInput, PartyUncheckedCreateWithoutAlterationsInput>
  }

  export type UserCreateWithoutAlterationsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAlterationsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutAlterationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlterationsInput, UserUncheckedCreateWithoutAlterationsInput>
  }

  export type PartyMemberCreateWithoutAlterationsInput = {
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    party: PartyCreateNestedOneWithoutMembersInput
    appointments?: AppointmentCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateWithoutAlterationsInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberCreateOrConnectWithoutAlterationsInput = {
    where: PartyMemberWhereUniqueInput
    create: XOR<PartyMemberCreateWithoutAlterationsInput, PartyMemberUncheckedCreateWithoutAlterationsInput>
  }

  export type UserCreateWithoutAssignedAlterationsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAssignedAlterationsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutAssignedAlterationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedAlterationsInput, UserUncheckedCreateWithoutAssignedAlterationsInput>
  }

  export type PartyUpsertWithoutAlterationsInput = {
    update: XOR<PartyUpdateWithoutAlterationsInput, PartyUncheckedUpdateWithoutAlterationsInput>
    create: XOR<PartyCreateWithoutAlterationsInput, PartyUncheckedCreateWithoutAlterationsInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutAlterationsInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutAlterationsInput, PartyUncheckedUpdateWithoutAlterationsInput>
  }

  export type PartyUpdateWithoutAlterationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutAlterationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type UserUpsertWithoutAlterationsInput = {
    update: XOR<UserUpdateWithoutAlterationsInput, UserUncheckedUpdateWithoutAlterationsInput>
    create: XOR<UserCreateWithoutAlterationsInput, UserUncheckedCreateWithoutAlterationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlterationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlterationsInput, UserUncheckedUpdateWithoutAlterationsInput>
  }

  export type UserUpdateWithoutAlterationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAlterationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type PartyMemberUpsertWithoutAlterationsInput = {
    update: XOR<PartyMemberUpdateWithoutAlterationsInput, PartyMemberUncheckedUpdateWithoutAlterationsInput>
    create: XOR<PartyMemberCreateWithoutAlterationsInput, PartyMemberUncheckedCreateWithoutAlterationsInput>
    where?: PartyMemberWhereInput
  }

  export type PartyMemberUpdateToOneWithWhereWithoutAlterationsInput = {
    where?: PartyMemberWhereInput
    data: XOR<PartyMemberUpdateWithoutAlterationsInput, PartyMemberUncheckedUpdateWithoutAlterationsInput>
  }

  export type PartyMemberUpdateWithoutAlterationsInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneRequiredWithoutMembersNestedInput
    appointments?: AppointmentUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateWithoutAlterationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type UserUpsertWithoutAssignedAlterationsInput = {
    update: XOR<UserUpdateWithoutAssignedAlterationsInput, UserUncheckedUpdateWithoutAssignedAlterationsInput>
    create: XOR<UserCreateWithoutAssignedAlterationsInput, UserUncheckedCreateWithoutAssignedAlterationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedAlterationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedAlterationsInput, UserUncheckedUpdateWithoutAssignedAlterationsInput>
  }

  export type UserUpdateWithoutAssignedAlterationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedAlterationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type PartyCreateWithoutAppointmentsInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterations?: AlterationCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterations?: AlterationUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutAppointmentsInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type PartyMemberCreateWithoutAppointmentsInput = {
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    party: PartyCreateNestedOneWithoutMembersInput
    alterations?: AlterationCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterations?: AlterationUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberCreateOrConnectWithoutAppointmentsInput = {
    where: PartyMemberWhereUniqueInput
    create: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
  }

  export type PartyUpsertWithoutAppointmentsInput = {
    update: XOR<PartyUpdateWithoutAppointmentsInput, PartyUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutAppointmentsInput, PartyUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PartyUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterations?: AlterationUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterations?: AlterationUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type PartyMemberUpsertWithoutAppointmentsInput = {
    update: XOR<PartyMemberUpdateWithoutAppointmentsInput, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    where?: PartyMemberWhereInput
  }

  export type PartyMemberUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PartyMemberWhereInput
    data: XOR<PartyMemberUpdateWithoutAppointmentsInput, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PartyMemberUpdateWithoutAppointmentsInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneRequiredWithoutMembersNestedInput
    alterations?: AlterationUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type PartyCreateWithoutMembersInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterations?: AlterationCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterations?: AlterationUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutMembersInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
  }

  export type AlterationCreateWithoutMemberInput = {
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
    party: PartyCreateNestedOneWithoutAlterationsInput
    tailor?: UserCreateNestedOneWithoutAlterationsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedAlterationsInput
  }

  export type AlterationUncheckedCreateWithoutMemberInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AlterationCreateOrConnectWithoutMemberInput = {
    where: AlterationWhereUniqueInput
    create: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput>
  }

  export type AlterationCreateManyMemberInputEnvelope = {
    data: AlterationCreateManyMemberInput | AlterationCreateManyMemberInput[]
  }

  export type AppointmentCreateWithoutMemberInput = {
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutMemberInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AppointmentCreateOrConnectWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput>
  }

  export type AppointmentCreateManyMemberInputEnvelope = {
    data: AppointmentCreateManyMemberInput | AppointmentCreateManyMemberInput[]
  }

  export type PartyUpsertWithoutMembersInput = {
    update: XOR<PartyUpdateWithoutMembersInput, PartyUncheckedUpdateWithoutMembersInput>
    create: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutMembersInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutMembersInput, PartyUncheckedUpdateWithoutMembersInput>
  }

  export type PartyUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterations?: AlterationUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterations?: AlterationUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type AlterationUpsertWithWhereUniqueWithoutMemberInput = {
    where: AlterationWhereUniqueInput
    update: XOR<AlterationUpdateWithoutMemberInput, AlterationUncheckedUpdateWithoutMemberInput>
    create: XOR<AlterationCreateWithoutMemberInput, AlterationUncheckedCreateWithoutMemberInput>
  }

  export type AlterationUpdateWithWhereUniqueWithoutMemberInput = {
    where: AlterationWhereUniqueInput
    data: XOR<AlterationUpdateWithoutMemberInput, AlterationUncheckedUpdateWithoutMemberInput>
  }

  export type AlterationUpdateManyWithWhereWithoutMemberInput = {
    where: AlterationScalarWhereInput
    data: XOR<AlterationUpdateManyMutationInput, AlterationUncheckedUpdateManyWithoutMemberInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutMemberInput, AppointmentUncheckedUpdateWithoutMemberInput>
    create: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutMemberInput, AppointmentUncheckedUpdateWithoutMemberInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutMemberInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutMemberInput>
  }

  export type UserCreateWithoutSaleAssignmentsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    skills?: SkillCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSaleAssignmentsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutSaleAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
  }

  export type UserUpsertWithoutSaleAssignmentsInput = {
    update: XOR<UserUpdateWithoutSaleAssignmentsInput, UserUncheckedUpdateWithoutSaleAssignmentsInput>
    create: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSaleAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSaleAssignmentsInput, UserUncheckedUpdateWithoutSaleAssignmentsInput>
  }

  export type UserUpdateWithoutSaleAssignmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSaleAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateWithoutSkillsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterations?: AlterationCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
  }

  export type UserUncheckedCreateWithoutSkillsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterations?: AlterationUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    assignedAlterations?: AlterationUncheckedCreateNestedManyWithoutAssignedTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
  }

  export type UserCreateOrConnectWithoutSkillsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutSkillsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSkillsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
  }

  export type UserUpdateManyWithWhereWithoutSkillsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSkillsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type PartyCreateManyCustomerInput = {
    id?: number
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
  }

  export type PartyUpdateWithoutCustomerInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterations?: AlterationUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterations?: AlterationUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentCreateManyTailorInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AlterationCreateManyTailorInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AlterationCreateManyAssignedTailorInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type SaleAssignmentCreateManyAssociateInput = {
    id?: number
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutTailorInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlterationUpdateWithoutTailorInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
    party?: PartyUpdateOneRequiredWithoutAlterationsNestedInput
    member?: PartyMemberUpdateOneWithoutAlterationsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedAlterationsNestedInput
  }

  export type AlterationUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationUpdateWithoutAssignedTailorInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
    party?: PartyUpdateOneRequiredWithoutAlterationsNestedInput
    tailor?: UserUpdateOneWithoutAlterationsNestedInput
    member?: PartyMemberUpdateOneWithoutAlterationsNestedInput
  }

  export type AlterationUncheckedUpdateWithoutAssignedTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationUncheckedUpdateManyWithoutAssignedTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SaleAssignmentUpdateWithoutAssociateInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateWithoutAssociateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateManyWithoutAssociateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AlterationCreateManyPartyInput = {
    id?: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AppointmentCreateManyPartyInput = {
    id?: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type PartyMemberCreateManyPartyInput = {
    id?: number
    lsCustomerId?: string | null
    role: string
    measurements?: string | null
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationUpdateWithoutPartyInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
    tailor?: UserUpdateOneWithoutAlterationsNestedInput
    member?: PartyMemberUpdateOneWithoutAlterationsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedAlterationsNestedInput
  }

  export type AlterationUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppointmentUpdateWithoutPartyInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartyMemberUpdateWithoutPartyInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUpdateManyWithoutMemberNestedInput
    appointments?: AppointmentUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterations?: AlterationUncheckedUpdateManyWithoutMemberNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    measurements?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationCreateManyMemberInput = {
    id?: number
    partyId: number
    notes?: string | null
    timeSpent?: number | null
    scheduledDateTime?: Date | string | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsLineItemId?: string | null
    assignedTailorId?: number | null
    itemType?: string | null
    estimatedTime?: number | null
    actualTime?: number | null
  }

  export type AppointmentCreateManyMemberInput = {
    id?: number
    partyId: number
    dateTime: Date | string
    duration?: number | null
    tailorId?: number | null
    status?: string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDatetime?: Date | string | null
    type?: string | null
    notes?: string | null
    lsEventId?: string | null
  }

  export type AlterationUpdateWithoutMemberInput = {
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
    party?: PartyUpdateOneRequiredWithoutAlterationsNestedInput
    tailor?: UserUpdateOneWithoutAlterationsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedAlterationsNestedInput
  }

  export type AlterationUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlterationUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledDateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsLineItemId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    itemType?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    actualTime?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppointmentUpdateWithoutMemberInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDatetime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutSkillsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterations?: AlterationUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    assignedAlterations?: AlterationUncheckedUpdateManyWithoutAssignedTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}