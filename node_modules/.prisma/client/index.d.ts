
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Party
 * 
 */
export type Party = $Result.DefaultSelection<Prisma.$PartyPayload>
/**
 * Model AlterationJob
 * 
 */
export type AlterationJob = $Result.DefaultSelection<Prisma.$AlterationJobPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model SyncLog
 * 
 */
export type SyncLog = $Result.DefaultSelection<Prisma.$SyncLogPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model PartyMember
 * 
 */
export type PartyMember = $Result.DefaultSelection<Prisma.$PartyMemberPayload>
/**
 * Model SaleAssignment
 * 
 */
export type SaleAssignment = $Result.DefaultSelection<Prisma.$SaleAssignmentPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model Settings
 * 
 */
export type Settings = $Result.DefaultSelection<Prisma.$SettingsPayload>
/**
 * Model AlterationTaskType
 * 
 */
export type AlterationTaskType = $Result.DefaultSelection<Prisma.$AlterationTaskTypePayload>
/**
 * Model TailorAbility
 * 
 */
export type TailorAbility = $Result.DefaultSelection<Prisma.$TailorAbilityPayload>
/**
 * Model TailorSchedule
 * 
 */
export type TailorSchedule = $Result.DefaultSelection<Prisma.$TailorSchedulePayload>
/**
 * Model AlterationJobPart
 * 
 */
export type AlterationJobPart = $Result.DefaultSelection<Prisma.$AlterationJobPartPayload>
/**
 * Model PushSubscription
 * 
 */
export type PushSubscription = $Result.DefaultSelection<Prisma.$PushSubscriptionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AppointmentType: {
  fitting: 'fitting',
  pickup: 'pickup',
  final_try: 'final_try',
  other: 'other'
};

export type AppointmentType = (typeof AppointmentType)[keyof typeof AppointmentType]


export const AppointmentStatus: {
  scheduled: 'scheduled',
  rescheduled: 'rescheduled',
  canceled: 'canceled',
  completed: 'completed'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const SyncDirection: {
  inbound: 'inbound',
  outbound: 'outbound'
};

export type SyncDirection = (typeof SyncDirection)[keyof typeof SyncDirection]


export const SyncStatus: {
  success: 'success',
  failed: 'failed'
};

export type SyncStatus = (typeof SyncStatus)[keyof typeof SyncStatus]

}

export type AppointmentType = $Enums.AppointmentType

export const AppointmentType: typeof $Enums.AppointmentType

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type SyncDirection = $Enums.SyncDirection

export const SyncDirection: typeof $Enums.SyncDirection

export type SyncStatus = $Enums.SyncStatus

export const SyncStatus: typeof $Enums.SyncStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.party`: Exposes CRUD operations for the **Party** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parties
    * const parties = await prisma.party.findMany()
    * ```
    */
  get party(): Prisma.PartyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alterationJob`: Exposes CRUD operations for the **AlterationJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlterationJobs
    * const alterationJobs = await prisma.alterationJob.findMany()
    * ```
    */
  get alterationJob(): Prisma.AlterationJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.syncLog`: Exposes CRUD operations for the **SyncLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncLogs
    * const syncLogs = await prisma.syncLog.findMany()
    * ```
    */
  get syncLog(): Prisma.SyncLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partyMember`: Exposes CRUD operations for the **PartyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartyMembers
    * const partyMembers = await prisma.partyMember.findMany()
    * ```
    */
  get partyMember(): Prisma.PartyMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.saleAssignment`: Exposes CRUD operations for the **SaleAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaleAssignments
    * const saleAssignments = await prisma.saleAssignment.findMany()
    * ```
    */
  get saleAssignment(): Prisma.SaleAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alterationTaskType`: Exposes CRUD operations for the **AlterationTaskType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlterationTaskTypes
    * const alterationTaskTypes = await prisma.alterationTaskType.findMany()
    * ```
    */
  get alterationTaskType(): Prisma.AlterationTaskTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tailorAbility`: Exposes CRUD operations for the **TailorAbility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TailorAbilities
    * const tailorAbilities = await prisma.tailorAbility.findMany()
    * ```
    */
  get tailorAbility(): Prisma.TailorAbilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tailorSchedule`: Exposes CRUD operations for the **TailorSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TailorSchedules
    * const tailorSchedules = await prisma.tailorSchedule.findMany()
    * ```
    */
  get tailorSchedule(): Prisma.TailorScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alterationJobPart`: Exposes CRUD operations for the **AlterationJobPart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlterationJobParts
    * const alterationJobParts = await prisma.alterationJobPart.findMany()
    * ```
    */
  get alterationJobPart(): Prisma.AlterationJobPartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pushSubscription`: Exposes CRUD operations for the **PushSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PushSubscriptions
    * const pushSubscriptions = await prisma.pushSubscription.findMany()
    * ```
    */
  get pushSubscription(): Prisma.PushSubscriptionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Customer: 'Customer',
    User: 'User',
    Party: 'Party',
    AlterationJob: 'AlterationJob',
    Appointment: 'Appointment',
    SyncLog: 'SyncLog',
    AuditLog: 'AuditLog',
    PartyMember: 'PartyMember',
    SaleAssignment: 'SaleAssignment',
    Skill: 'Skill',
    Settings: 'Settings',
    AlterationTaskType: 'AlterationTaskType',
    TailorAbility: 'TailorAbility',
    TailorSchedule: 'TailorSchedule',
    AlterationJobPart: 'AlterationJobPart',
    PushSubscription: 'PushSubscription'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "customer" | "user" | "party" | "alterationJob" | "appointment" | "syncLog" | "auditLog" | "partyMember" | "saleAssignment" | "skill" | "settings" | "alterationTaskType" | "tailorAbility" | "tailorSchedule" | "alterationJobPart" | "pushSubscription"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Party: {
        payload: Prisma.$PartyPayload<ExtArgs>
        fields: Prisma.PartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findFirst: {
            args: Prisma.PartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findMany: {
            args: Prisma.PartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          create: {
            args: Prisma.PartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          createMany: {
            args: Prisma.PartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          delete: {
            args: Prisma.PartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          update: {
            args: Prisma.PartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          deleteMany: {
            args: Prisma.PartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          upsert: {
            args: Prisma.PartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          aggregate: {
            args: Prisma.PartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParty>
          }
          groupBy: {
            args: Prisma.PartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartyCountArgs<ExtArgs>
            result: $Utils.Optional<PartyCountAggregateOutputType> | number
          }
        }
      }
      AlterationJob: {
        payload: Prisma.$AlterationJobPayload<ExtArgs>
        fields: Prisma.AlterationJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlterationJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlterationJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          findFirst: {
            args: Prisma.AlterationJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlterationJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          findMany: {
            args: Prisma.AlterationJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>[]
          }
          create: {
            args: Prisma.AlterationJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          createMany: {
            args: Prisma.AlterationJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlterationJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>[]
          }
          delete: {
            args: Prisma.AlterationJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          update: {
            args: Prisma.AlterationJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          deleteMany: {
            args: Prisma.AlterationJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlterationJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlterationJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>[]
          }
          upsert: {
            args: Prisma.AlterationJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPayload>
          }
          aggregate: {
            args: Prisma.AlterationJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlterationJob>
          }
          groupBy: {
            args: Prisma.AlterationJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlterationJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlterationJobCountArgs<ExtArgs>
            result: $Utils.Optional<AlterationJobCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      SyncLog: {
        payload: Prisma.$SyncLogPayload<ExtArgs>
        fields: Prisma.SyncLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          findFirst: {
            args: Prisma.SyncLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          findMany: {
            args: Prisma.SyncLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>[]
          }
          create: {
            args: Prisma.SyncLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          createMany: {
            args: Prisma.SyncLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>[]
          }
          delete: {
            args: Prisma.SyncLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          update: {
            args: Prisma.SyncLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          deleteMany: {
            args: Prisma.SyncLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SyncLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>[]
          }
          upsert: {
            args: Prisma.SyncLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncLogPayload>
          }
          aggregate: {
            args: Prisma.SyncLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncLog>
          }
          groupBy: {
            args: Prisma.SyncLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncLogCountArgs<ExtArgs>
            result: $Utils.Optional<SyncLogCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      PartyMember: {
        payload: Prisma.$PartyMemberPayload<ExtArgs>
        fields: Prisma.PartyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          findFirst: {
            args: Prisma.PartyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          findMany: {
            args: Prisma.PartyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          create: {
            args: Prisma.PartyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          createMany: {
            args: Prisma.PartyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartyMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          delete: {
            args: Prisma.PartyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          update: {
            args: Prisma.PartyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          deleteMany: {
            args: Prisma.PartyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartyMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>[]
          }
          upsert: {
            args: Prisma.PartyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyMemberPayload>
          }
          aggregate: {
            args: Prisma.PartyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartyMember>
          }
          groupBy: {
            args: Prisma.PartyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<PartyMemberCountAggregateOutputType> | number
          }
        }
      }
      SaleAssignment: {
        payload: Prisma.$SaleAssignmentPayload<ExtArgs>
        fields: Prisma.SaleAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          findFirst: {
            args: Prisma.SaleAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          findMany: {
            args: Prisma.SaleAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          create: {
            args: Prisma.SaleAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          createMany: {
            args: Prisma.SaleAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          delete: {
            args: Prisma.SaleAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          update: {
            args: Prisma.SaleAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.SaleAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaleAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.SaleAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleAssignmentPayload>
          }
          aggregate: {
            args: Prisma.SaleAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaleAssignment>
          }
          groupBy: {
            args: Prisma.SaleAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<SaleAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      Settings: {
        payload: Prisma.$SettingsPayload<ExtArgs>
        fields: Prisma.SettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findFirst: {
            args: Prisma.SettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findMany: {
            args: Prisma.SettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          create: {
            args: Prisma.SettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          createMany: {
            args: Prisma.SettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          delete: {
            args: Prisma.SettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          update: {
            args: Prisma.SettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          deleteMany: {
            args: Prisma.SettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          upsert: {
            args: Prisma.SettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.SettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
      AlterationTaskType: {
        payload: Prisma.$AlterationTaskTypePayload<ExtArgs>
        fields: Prisma.AlterationTaskTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlterationTaskTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlterationTaskTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          findFirst: {
            args: Prisma.AlterationTaskTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlterationTaskTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          findMany: {
            args: Prisma.AlterationTaskTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>[]
          }
          create: {
            args: Prisma.AlterationTaskTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          createMany: {
            args: Prisma.AlterationTaskTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlterationTaskTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>[]
          }
          delete: {
            args: Prisma.AlterationTaskTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          update: {
            args: Prisma.AlterationTaskTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          deleteMany: {
            args: Prisma.AlterationTaskTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlterationTaskTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlterationTaskTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>[]
          }
          upsert: {
            args: Prisma.AlterationTaskTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationTaskTypePayload>
          }
          aggregate: {
            args: Prisma.AlterationTaskTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlterationTaskType>
          }
          groupBy: {
            args: Prisma.AlterationTaskTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlterationTaskTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlterationTaskTypeCountArgs<ExtArgs>
            result: $Utils.Optional<AlterationTaskTypeCountAggregateOutputType> | number
          }
        }
      }
      TailorAbility: {
        payload: Prisma.$TailorAbilityPayload<ExtArgs>
        fields: Prisma.TailorAbilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TailorAbilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TailorAbilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          findFirst: {
            args: Prisma.TailorAbilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TailorAbilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          findMany: {
            args: Prisma.TailorAbilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>[]
          }
          create: {
            args: Prisma.TailorAbilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          createMany: {
            args: Prisma.TailorAbilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TailorAbilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>[]
          }
          delete: {
            args: Prisma.TailorAbilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          update: {
            args: Prisma.TailorAbilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          deleteMany: {
            args: Prisma.TailorAbilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TailorAbilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TailorAbilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>[]
          }
          upsert: {
            args: Prisma.TailorAbilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorAbilityPayload>
          }
          aggregate: {
            args: Prisma.TailorAbilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTailorAbility>
          }
          groupBy: {
            args: Prisma.TailorAbilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<TailorAbilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.TailorAbilityCountArgs<ExtArgs>
            result: $Utils.Optional<TailorAbilityCountAggregateOutputType> | number
          }
        }
      }
      TailorSchedule: {
        payload: Prisma.$TailorSchedulePayload<ExtArgs>
        fields: Prisma.TailorScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TailorScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TailorScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          findFirst: {
            args: Prisma.TailorScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TailorScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          findMany: {
            args: Prisma.TailorScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>[]
          }
          create: {
            args: Prisma.TailorScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          createMany: {
            args: Prisma.TailorScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TailorScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>[]
          }
          delete: {
            args: Prisma.TailorScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          update: {
            args: Prisma.TailorScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          deleteMany: {
            args: Prisma.TailorScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TailorScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TailorScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>[]
          }
          upsert: {
            args: Prisma.TailorScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TailorSchedulePayload>
          }
          aggregate: {
            args: Prisma.TailorScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTailorSchedule>
          }
          groupBy: {
            args: Prisma.TailorScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TailorScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TailorScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<TailorScheduleCountAggregateOutputType> | number
          }
        }
      }
      AlterationJobPart: {
        payload: Prisma.$AlterationJobPartPayload<ExtArgs>
        fields: Prisma.AlterationJobPartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlterationJobPartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlterationJobPartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          findFirst: {
            args: Prisma.AlterationJobPartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlterationJobPartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          findMany: {
            args: Prisma.AlterationJobPartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>[]
          }
          create: {
            args: Prisma.AlterationJobPartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          createMany: {
            args: Prisma.AlterationJobPartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlterationJobPartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>[]
          }
          delete: {
            args: Prisma.AlterationJobPartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          update: {
            args: Prisma.AlterationJobPartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          deleteMany: {
            args: Prisma.AlterationJobPartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlterationJobPartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlterationJobPartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>[]
          }
          upsert: {
            args: Prisma.AlterationJobPartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlterationJobPartPayload>
          }
          aggregate: {
            args: Prisma.AlterationJobPartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlterationJobPart>
          }
          groupBy: {
            args: Prisma.AlterationJobPartGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlterationJobPartGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlterationJobPartCountArgs<ExtArgs>
            result: $Utils.Optional<AlterationJobPartCountAggregateOutputType> | number
          }
        }
      }
      PushSubscription: {
        payload: Prisma.$PushSubscriptionPayload<ExtArgs>
        fields: Prisma.PushSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PushSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PushSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.PushSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PushSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          findMany: {
            args: Prisma.PushSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          create: {
            args: Prisma.PushSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          createMany: {
            args: Prisma.PushSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PushSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.PushSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          update: {
            args: Prisma.PushSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.PushSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PushSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PushSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.PushSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.PushSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePushSubscription>
          }
          groupBy: {
            args: Prisma.PushSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PushSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PushSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<PushSubscriptionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    customer?: CustomerOmit
    user?: UserOmit
    party?: PartyOmit
    alterationJob?: AlterationJobOmit
    appointment?: AppointmentOmit
    syncLog?: SyncLogOmit
    auditLog?: AuditLogOmit
    partyMember?: PartyMemberOmit
    saleAssignment?: SaleAssignmentOmit
    skill?: SkillOmit
    settings?: SettingsOmit
    alterationTaskType?: AlterationTaskTypeOmit
    tailorAbility?: TailorAbilityOmit
    tailorSchedule?: TailorScheduleOmit
    alterationJobPart?: AlterationJobPartOmit
    pushSubscription?: PushSubscriptionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    parties: number
    alterationJobs: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parties?: boolean | CustomerCountOutputTypeCountPartiesArgs
    alterationJobs?: boolean | CustomerCountOutputTypeCountAlterationJobsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountAlterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    appointments: number
    alterationJobs: number
    auditLogs: number
    saleAssignments: number
    skills: number
    tailorAbilities: number
    tailorSchedules: number
    assignedJobParts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    alterationJobs?: boolean | UserCountOutputTypeCountAlterationJobsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    saleAssignments?: boolean | UserCountOutputTypeCountSaleAssignmentsArgs
    skills?: boolean | UserCountOutputTypeCountSkillsArgs
    tailorAbilities?: boolean | UserCountOutputTypeCountTailorAbilitiesArgs
    tailorSchedules?: boolean | UserCountOutputTypeCountTailorSchedulesArgs
    assignedJobParts?: boolean | UserCountOutputTypeCountAssignedJobPartsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSaleAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTailorAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TailorAbilityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTailorSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TailorScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedJobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobPartWhereInput
  }


  /**
   * Count Type PartyCountOutputType
   */

  export type PartyCountOutputType = {
    alterationJobs: number
    appointments: number
    members: number
  }

  export type PartyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alterationJobs?: boolean | PartyCountOutputTypeCountAlterationJobsArgs
    appointments?: boolean | PartyCountOutputTypeCountAppointmentsArgs
    members?: boolean | PartyCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyCountOutputType
     */
    select?: PartyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountAlterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobWhereInput
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyMemberWhereInput
  }


  /**
   * Count Type AlterationJobCountOutputType
   */

  export type AlterationJobCountOutputType = {
    jobParts: number
  }

  export type AlterationJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobParts?: boolean | AlterationJobCountOutputTypeCountJobPartsArgs
  }

  // Custom InputTypes
  /**
   * AlterationJobCountOutputType without action
   */
  export type AlterationJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobCountOutputType
     */
    select?: AlterationJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlterationJobCountOutputType without action
   */
  export type AlterationJobCountOutputTypeCountJobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobPartWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    children: number
    syncLogs: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | AppointmentCountOutputTypeCountChildrenArgs
    syncLogs?: boolean | AppointmentCountOutputTypeCountSyncLogsArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountSyncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncLogWhereInput
  }


  /**
   * Count Type PartyMemberCountOutputType
   */

  export type PartyMemberCountOutputType = {
    appointments: number
  }

  export type PartyMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | PartyMemberCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * PartyMemberCountOutputType without action
   */
  export type PartyMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMemberCountOutputType
     */
    select?: PartyMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartyMemberCountOutputType without action
   */
  export type PartyMemberCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    users: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SkillCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type AlterationTaskTypeCountOutputType
   */

  export type AlterationTaskTypeCountOutputType = {
    abilities: number
    jobParts: number
  }

  export type AlterationTaskTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    abilities?: boolean | AlterationTaskTypeCountOutputTypeCountAbilitiesArgs
    jobParts?: boolean | AlterationTaskTypeCountOutputTypeCountJobPartsArgs
  }

  // Custom InputTypes
  /**
   * AlterationTaskTypeCountOutputType without action
   */
  export type AlterationTaskTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskTypeCountOutputType
     */
    select?: AlterationTaskTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlterationTaskTypeCountOutputType without action
   */
  export type AlterationTaskTypeCountOutputTypeCountAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TailorAbilityWhereInput
  }

  /**
   * AlterationTaskTypeCountOutputType without action
   */
  export type AlterationTaskTypeCountOutputTypeCountJobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobPartWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    measurements: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    measurements?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string | null
    measurements: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parties?: boolean | Customer$partiesArgs<ExtArgs>
    alterationJobs?: boolean | Customer$alterationJobsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "measurements" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parties?: boolean | Customer$partiesArgs<ExtArgs>
    alterationJobs?: boolean | Customer$alterationJobsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      parties: Prisma.$PartyPayload<ExtArgs>[]
      alterationJobs: Prisma.$AlterationJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string | null
      measurements: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parties<T extends Customer$partiesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$partiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alterationJobs<T extends Customer$alterationJobsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$alterationJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly measurements: FieldRef<"Customer", 'Json'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.parties
   */
  export type Customer$partiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    where?: PartyWhereInput
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    cursor?: PartyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Customer.alterationJobs
   */
  export type Customer$alterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    where?: AlterationJobWhereInput
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    cursor?: AlterationJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    alterationJobs?: boolean | User$alterationJobsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    saleAssignments?: boolean | User$saleAssignmentsArgs<ExtArgs>
    skills?: boolean | User$skillsArgs<ExtArgs>
    tailorAbilities?: boolean | User$tailorAbilitiesArgs<ExtArgs>
    tailorSchedules?: boolean | User$tailorSchedulesArgs<ExtArgs>
    assignedJobParts?: boolean | User$assignedJobPartsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "name" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    alterationJobs?: boolean | User$alterationJobsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    saleAssignments?: boolean | User$saleAssignmentsArgs<ExtArgs>
    skills?: boolean | User$skillsArgs<ExtArgs>
    tailorAbilities?: boolean | User$tailorAbilitiesArgs<ExtArgs>
    tailorSchedules?: boolean | User$tailorSchedulesArgs<ExtArgs>
    assignedJobParts?: boolean | User$assignedJobPartsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      alterationJobs: Prisma.$AlterationJobPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      saleAssignments: Prisma.$SaleAssignmentPayload<ExtArgs>[]
      skills: Prisma.$SkillPayload<ExtArgs>[]
      tailorAbilities: Prisma.$TailorAbilityPayload<ExtArgs>[]
      tailorSchedules: Prisma.$TailorSchedulePayload<ExtArgs>[]
      assignedJobParts: Prisma.$AlterationJobPartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      name: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alterationJobs<T extends User$alterationJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$alterationJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saleAssignments<T extends User$saleAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$saleAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skills<T extends User$skillsArgs<ExtArgs> = {}>(args?: Subset<T, User$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tailorAbilities<T extends User$tailorAbilitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$tailorAbilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tailorSchedules<T extends User$tailorSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$tailorSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedJobParts<T extends User$assignedJobPartsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedJobPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.alterationJobs
   */
  export type User$alterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    where?: AlterationJobWhereInput
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    cursor?: AlterationJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.saleAssignments
   */
  export type User$saleAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    where?: SaleAssignmentWhereInput
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    cursor?: SaleAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * User.skills
   */
  export type User$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * User.tailorAbilities
   */
  export type User$tailorAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    where?: TailorAbilityWhereInput
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    cursor?: TailorAbilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TailorAbilityScalarFieldEnum | TailorAbilityScalarFieldEnum[]
  }

  /**
   * User.tailorSchedules
   */
  export type User$tailorSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    where?: TailorScheduleWhereInput
    orderBy?: TailorScheduleOrderByWithRelationInput | TailorScheduleOrderByWithRelationInput[]
    cursor?: TailorScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TailorScheduleScalarFieldEnum | TailorScheduleScalarFieldEnum[]
  }

  /**
   * User.assignedJobParts
   */
  export type User$assignedJobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    where?: AlterationJobPartWhereInput
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    cursor?: AlterationJobPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Party
   */

  export type AggregateParty = {
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  export type PartyAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
  }

  export type PartySumAggregateOutputType = {
    id: number | null
    customerId: number | null
  }

  export type PartyMinAggregateOutputType = {
    id: number | null
    name: string | null
    eventDate: Date | null
    customerId: number | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
    syncedToLs: boolean | null
    lsPartyId: string | null
  }

  export type PartyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    eventDate: Date | null
    customerId: number | null
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
    syncedToLs: boolean | null
    lsPartyId: string | null
  }

  export type PartyCountAggregateOutputType = {
    id: number
    name: number
    eventDate: number
    customerId: number
    externalId: number
    syncedAt: number
    createdAt: number
    updatedAt: number
    notes: number
    syncedToLs: number
    lsPartyId: number
    _all: number
  }


  export type PartyAvgAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type PartySumAggregateInputType = {
    id?: true
    customerId?: true
  }

  export type PartyMinAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
  }

  export type PartyMaxAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
  }

  export type PartyCountAggregateInputType = {
    id?: true
    name?: true
    eventDate?: true
    customerId?: true
    externalId?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    syncedToLs?: true
    lsPartyId?: true
    _all?: true
  }

  export type PartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Party to aggregate.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parties
    **/
    _count?: true | PartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartyMaxAggregateInputType
  }

  export type GetPartyAggregateType<T extends PartyAggregateArgs> = {
        [P in keyof T & keyof AggregateParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParty[P]>
      : GetScalarType<T[P], AggregateParty[P]>
  }




  export type PartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyWhereInput
    orderBy?: PartyOrderByWithAggregationInput | PartyOrderByWithAggregationInput[]
    by: PartyScalarFieldEnum[] | PartyScalarFieldEnum
    having?: PartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartyCountAggregateInputType | true
    _avg?: PartyAvgAggregateInputType
    _sum?: PartySumAggregateInputType
    _min?: PartyMinAggregateInputType
    _max?: PartyMaxAggregateInputType
  }

  export type PartyGroupByOutputType = {
    id: number
    name: string
    eventDate: Date
    customerId: number
    externalId: string | null
    syncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    notes: string | null
    syncedToLs: boolean
    lsPartyId: string | null
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  type GetPartyGroupByPayload<T extends PartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartyGroupByOutputType[P]>
            : GetScalarType<T[P], PartyGroupByOutputType[P]>
        }
      >
    >


  export type PartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    alterationJobs?: boolean | Party$alterationJobsArgs<ExtArgs>
    appointments?: boolean | Party$appointmentsArgs<ExtArgs>
    members?: boolean | Party$membersArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectScalar = {
    id?: boolean
    name?: boolean
    eventDate?: boolean
    customerId?: boolean
    externalId?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    syncedToLs?: boolean
    lsPartyId?: boolean
  }

  export type PartyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "eventDate" | "customerId" | "externalId" | "syncedAt" | "createdAt" | "updatedAt" | "notes" | "syncedToLs" | "lsPartyId", ExtArgs["result"]["party"]>
  export type PartyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    alterationJobs?: boolean | Party$alterationJobsArgs<ExtArgs>
    appointments?: boolean | Party$appointmentsArgs<ExtArgs>
    members?: boolean | Party$membersArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type PartyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $PartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Party"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      alterationJobs: Prisma.$AlterationJobPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      members: Prisma.$PartyMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      eventDate: Date
      customerId: number
      externalId: string | null
      syncedAt: Date | null
      createdAt: Date
      updatedAt: Date
      notes: string | null
      syncedToLs: boolean
      lsPartyId: string | null
    }, ExtArgs["result"]["party"]>
    composites: {}
  }

  type PartyGetPayload<S extends boolean | null | undefined | PartyDefaultArgs> = $Result.GetResult<Prisma.$PartyPayload, S>

  type PartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartyCountAggregateInputType | true
    }

  export interface PartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Party'], meta: { name: 'Party' } }
    /**
     * Find zero or one Party that matches the filter.
     * @param {PartyFindUniqueArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartyFindUniqueArgs>(args: SelectSubset<T, PartyFindUniqueArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Party that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartyFindUniqueOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartyFindUniqueOrThrowArgs>(args: SelectSubset<T, PartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Party that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartyFindFirstArgs>(args?: SelectSubset<T, PartyFindFirstArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Party that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartyFindFirstOrThrowArgs>(args?: SelectSubset<T, PartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Parties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parties
     * const parties = await prisma.party.findMany()
     * 
     * // Get first 10 Parties
     * const parties = await prisma.party.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partyWithIdOnly = await prisma.party.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartyFindManyArgs>(args?: SelectSubset<T, PartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Party.
     * @param {PartyCreateArgs} args - Arguments to create a Party.
     * @example
     * // Create one Party
     * const Party = await prisma.party.create({
     *   data: {
     *     // ... data to create a Party
     *   }
     * })
     * 
     */
    create<T extends PartyCreateArgs>(args: SelectSubset<T, PartyCreateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Parties.
     * @param {PartyCreateManyArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartyCreateManyArgs>(args?: SelectSubset<T, PartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parties and returns the data saved in the database.
     * @param {PartyCreateManyAndReturnArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parties and only return the `id`
     * const partyWithIdOnly = await prisma.party.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartyCreateManyAndReturnArgs>(args?: SelectSubset<T, PartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Party.
     * @param {PartyDeleteArgs} args - Arguments to delete one Party.
     * @example
     * // Delete one Party
     * const Party = await prisma.party.delete({
     *   where: {
     *     // ... filter to delete one Party
     *   }
     * })
     * 
     */
    delete<T extends PartyDeleteArgs>(args: SelectSubset<T, PartyDeleteArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Party.
     * @param {PartyUpdateArgs} args - Arguments to update one Party.
     * @example
     * // Update one Party
     * const party = await prisma.party.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartyUpdateArgs>(args: SelectSubset<T, PartyUpdateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Parties.
     * @param {PartyDeleteManyArgs} args - Arguments to filter Parties to delete.
     * @example
     * // Delete a few Parties
     * const { count } = await prisma.party.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartyDeleteManyArgs>(args?: SelectSubset<T, PartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parties
     * const party = await prisma.party.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartyUpdateManyArgs>(args: SelectSubset<T, PartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parties and returns the data updated in the database.
     * @param {PartyUpdateManyAndReturnArgs} args - Arguments to update many Parties.
     * @example
     * // Update many Parties
     * const party = await prisma.party.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Parties and only return the `id`
     * const partyWithIdOnly = await prisma.party.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartyUpdateManyAndReturnArgs>(args: SelectSubset<T, PartyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Party.
     * @param {PartyUpsertArgs} args - Arguments to update or create a Party.
     * @example
     * // Update or create a Party
     * const party = await prisma.party.upsert({
     *   create: {
     *     // ... data to create a Party
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Party we want to update
     *   }
     * })
     */
    upsert<T extends PartyUpsertArgs>(args: SelectSubset<T, PartyUpsertArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyCountArgs} args - Arguments to filter Parties to count.
     * @example
     * // Count the number of Parties
     * const count = await prisma.party.count({
     *   where: {
     *     // ... the filter for the Parties we want to count
     *   }
     * })
    **/
    count<T extends PartyCountArgs>(
      args?: Subset<T, PartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartyAggregateArgs>(args: Subset<T, PartyAggregateArgs>): Prisma.PrismaPromise<GetPartyAggregateType<T>>

    /**
     * Group by Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartyGroupByArgs['orderBy'] }
        : { orderBy?: PartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Party model
   */
  readonly fields: PartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Party.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alterationJobs<T extends Party$alterationJobsArgs<ExtArgs> = {}>(args?: Subset<T, Party$alterationJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Party$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Party$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends Party$membersArgs<ExtArgs> = {}>(args?: Subset<T, Party$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Party model
   */
  interface PartyFieldRefs {
    readonly id: FieldRef<"Party", 'Int'>
    readonly name: FieldRef<"Party", 'String'>
    readonly eventDate: FieldRef<"Party", 'DateTime'>
    readonly customerId: FieldRef<"Party", 'Int'>
    readonly externalId: FieldRef<"Party", 'String'>
    readonly syncedAt: FieldRef<"Party", 'DateTime'>
    readonly createdAt: FieldRef<"Party", 'DateTime'>
    readonly updatedAt: FieldRef<"Party", 'DateTime'>
    readonly notes: FieldRef<"Party", 'String'>
    readonly syncedToLs: FieldRef<"Party", 'Boolean'>
    readonly lsPartyId: FieldRef<"Party", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Party findUnique
   */
  export type PartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findUniqueOrThrow
   */
  export type PartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findFirst
   */
  export type PartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findFirstOrThrow
   */
  export type PartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findMany
   */
  export type PartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Parties to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party create
   */
  export type PartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to create a Party.
     */
    data: XOR<PartyCreateInput, PartyUncheckedCreateInput>
  }

  /**
   * Party createMany
   */
  export type PartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
  }

  /**
   * Party createManyAndReturn
   */
  export type PartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Party update
   */
  export type PartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to update a Party.
     */
    data: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
    /**
     * Choose, which Party to update.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party updateMany
   */
  export type PartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parties.
     */
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyInput>
    /**
     * Filter which Parties to update
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to update.
     */
    limit?: number
  }

  /**
   * Party updateManyAndReturn
   */
  export type PartyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * The data used to update Parties.
     */
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyInput>
    /**
     * Filter which Parties to update
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Party upsert
   */
  export type PartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The filter to search for the Party to update in case it exists.
     */
    where: PartyWhereUniqueInput
    /**
     * In case the Party found by the `where` argument doesn't exist, create a new Party with this data.
     */
    create: XOR<PartyCreateInput, PartyUncheckedCreateInput>
    /**
     * In case the Party was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
  }

  /**
   * Party delete
   */
  export type PartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter which Party to delete.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party deleteMany
   */
  export type PartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parties to delete
     */
    where?: PartyWhereInput
    /**
     * Limit how many Parties to delete.
     */
    limit?: number
  }

  /**
   * Party.alterationJobs
   */
  export type Party$alterationJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    where?: AlterationJobWhereInput
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    cursor?: AlterationJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * Party.appointments
   */
  export type Party$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Party.members
   */
  export type Party$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    where?: PartyMemberWhereInput
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    cursor?: PartyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * Party without action
   */
  export type PartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
  }


  /**
   * Model AlterationJob
   */

  export type AggregateAlterationJob = {
    _count: AlterationJobCountAggregateOutputType | null
    _avg: AlterationJobAvgAggregateOutputType | null
    _sum: AlterationJobSumAggregateOutputType | null
    _min: AlterationJobMinAggregateOutputType | null
    _max: AlterationJobMaxAggregateOutputType | null
  }

  export type AlterationJobAvgAggregateOutputType = {
    id: number | null
    saleLineItemId: number | null
    partyId: number | null
    customerId: number | null
    timeSpentMinutes: number | null
    tailorId: number | null
  }

  export type AlterationJobSumAggregateOutputType = {
    id: number | null
    saleLineItemId: number | null
    partyId: number | null
    customerId: number | null
    timeSpentMinutes: number | null
    tailorId: number | null
  }

  export type AlterationJobMinAggregateOutputType = {
    id: number | null
    saleLineItemId: number | null
    partyId: number | null
    customerId: number | null
    notes: string | null
    status: string | null
    timeSpentMinutes: number | null
    tailorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlterationJobMaxAggregateOutputType = {
    id: number | null
    saleLineItemId: number | null
    partyId: number | null
    customerId: number | null
    notes: string | null
    status: string | null
    timeSpentMinutes: number | null
    tailorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlterationJobCountAggregateOutputType = {
    id: number
    saleLineItemId: number
    partyId: number
    customerId: number
    notes: number
    status: number
    timeSpentMinutes: number
    tailorId: number
    measurements: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlterationJobAvgAggregateInputType = {
    id?: true
    saleLineItemId?: true
    partyId?: true
    customerId?: true
    timeSpentMinutes?: true
    tailorId?: true
  }

  export type AlterationJobSumAggregateInputType = {
    id?: true
    saleLineItemId?: true
    partyId?: true
    customerId?: true
    timeSpentMinutes?: true
    tailorId?: true
  }

  export type AlterationJobMinAggregateInputType = {
    id?: true
    saleLineItemId?: true
    partyId?: true
    customerId?: true
    notes?: true
    status?: true
    timeSpentMinutes?: true
    tailorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlterationJobMaxAggregateInputType = {
    id?: true
    saleLineItemId?: true
    partyId?: true
    customerId?: true
    notes?: true
    status?: true
    timeSpentMinutes?: true
    tailorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlterationJobCountAggregateInputType = {
    id?: true
    saleLineItemId?: true
    partyId?: true
    customerId?: true
    notes?: true
    status?: true
    timeSpentMinutes?: true
    tailorId?: true
    measurements?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlterationJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationJob to aggregate.
     */
    where?: AlterationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobs to fetch.
     */
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlterationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlterationJobs
    **/
    _count?: true | AlterationJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlterationJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlterationJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlterationJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlterationJobMaxAggregateInputType
  }

  export type GetAlterationJobAggregateType<T extends AlterationJobAggregateArgs> = {
        [P in keyof T & keyof AggregateAlterationJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlterationJob[P]>
      : GetScalarType<T[P], AggregateAlterationJob[P]>
  }




  export type AlterationJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobWhereInput
    orderBy?: AlterationJobOrderByWithAggregationInput | AlterationJobOrderByWithAggregationInput[]
    by: AlterationJobScalarFieldEnum[] | AlterationJobScalarFieldEnum
    having?: AlterationJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlterationJobCountAggregateInputType | true
    _avg?: AlterationJobAvgAggregateInputType
    _sum?: AlterationJobSumAggregateInputType
    _min?: AlterationJobMinAggregateInputType
    _max?: AlterationJobMaxAggregateInputType
  }

  export type AlterationJobGroupByOutputType = {
    id: number
    saleLineItemId: number
    partyId: number | null
    customerId: number | null
    notes: string | null
    status: string
    timeSpentMinutes: number | null
    tailorId: number | null
    measurements: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AlterationJobCountAggregateOutputType | null
    _avg: AlterationJobAvgAggregateOutputType | null
    _sum: AlterationJobSumAggregateOutputType | null
    _min: AlterationJobMinAggregateOutputType | null
    _max: AlterationJobMaxAggregateOutputType | null
  }

  type GetAlterationJobGroupByPayload<T extends AlterationJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlterationJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlterationJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlterationJobGroupByOutputType[P]>
            : GetScalarType<T[P], AlterationJobGroupByOutputType[P]>
        }
      >
    >


  export type AlterationJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleLineItemId?: boolean
    partyId?: boolean
    customerId?: boolean
    notes?: boolean
    status?: boolean
    timeSpentMinutes?: boolean
    tailorId?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
    jobParts?: boolean | AlterationJob$jobPartsArgs<ExtArgs>
    _count?: boolean | AlterationJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJob"]>

  export type AlterationJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleLineItemId?: boolean
    partyId?: boolean
    customerId?: boolean
    notes?: boolean
    status?: boolean
    timeSpentMinutes?: boolean
    tailorId?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJob"]>

  export type AlterationJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleLineItemId?: boolean
    partyId?: boolean
    customerId?: boolean
    notes?: boolean
    status?: boolean
    timeSpentMinutes?: boolean
    tailorId?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJob"]>

  export type AlterationJobSelectScalar = {
    id?: boolean
    saleLineItemId?: boolean
    partyId?: boolean
    customerId?: boolean
    notes?: boolean
    status?: boolean
    timeSpentMinutes?: boolean
    tailorId?: boolean
    measurements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlterationJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "saleLineItemId" | "partyId" | "customerId" | "notes" | "status" | "timeSpentMinutes" | "tailorId" | "measurements" | "createdAt" | "updatedAt", ExtArgs["result"]["alterationJob"]>
  export type AlterationJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
    jobParts?: boolean | AlterationJob$jobPartsArgs<ExtArgs>
    _count?: boolean | AlterationJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlterationJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
  }
  export type AlterationJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | AlterationJob$partyArgs<ExtArgs>
    customer?: boolean | AlterationJob$customerArgs<ExtArgs>
    tailor?: boolean | AlterationJob$tailorArgs<ExtArgs>
  }

  export type $AlterationJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlterationJob"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs> | null
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      tailor: Prisma.$UserPayload<ExtArgs> | null
      jobParts: Prisma.$AlterationJobPartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saleLineItemId: number
      partyId: number | null
      customerId: number | null
      notes: string | null
      status: string
      timeSpentMinutes: number | null
      tailorId: number | null
      measurements: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alterationJob"]>
    composites: {}
  }

  type AlterationJobGetPayload<S extends boolean | null | undefined | AlterationJobDefaultArgs> = $Result.GetResult<Prisma.$AlterationJobPayload, S>

  type AlterationJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlterationJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlterationJobCountAggregateInputType | true
    }

  export interface AlterationJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlterationJob'], meta: { name: 'AlterationJob' } }
    /**
     * Find zero or one AlterationJob that matches the filter.
     * @param {AlterationJobFindUniqueArgs} args - Arguments to find a AlterationJob
     * @example
     * // Get one AlterationJob
     * const alterationJob = await prisma.alterationJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlterationJobFindUniqueArgs>(args: SelectSubset<T, AlterationJobFindUniqueArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlterationJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlterationJobFindUniqueOrThrowArgs} args - Arguments to find a AlterationJob
     * @example
     * // Get one AlterationJob
     * const alterationJob = await prisma.alterationJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlterationJobFindUniqueOrThrowArgs>(args: SelectSubset<T, AlterationJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobFindFirstArgs} args - Arguments to find a AlterationJob
     * @example
     * // Get one AlterationJob
     * const alterationJob = await prisma.alterationJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlterationJobFindFirstArgs>(args?: SelectSubset<T, AlterationJobFindFirstArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobFindFirstOrThrowArgs} args - Arguments to find a AlterationJob
     * @example
     * // Get one AlterationJob
     * const alterationJob = await prisma.alterationJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlterationJobFindFirstOrThrowArgs>(args?: SelectSubset<T, AlterationJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlterationJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlterationJobs
     * const alterationJobs = await prisma.alterationJob.findMany()
     * 
     * // Get first 10 AlterationJobs
     * const alterationJobs = await prisma.alterationJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alterationJobWithIdOnly = await prisma.alterationJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlterationJobFindManyArgs>(args?: SelectSubset<T, AlterationJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlterationJob.
     * @param {AlterationJobCreateArgs} args - Arguments to create a AlterationJob.
     * @example
     * // Create one AlterationJob
     * const AlterationJob = await prisma.alterationJob.create({
     *   data: {
     *     // ... data to create a AlterationJob
     *   }
     * })
     * 
     */
    create<T extends AlterationJobCreateArgs>(args: SelectSubset<T, AlterationJobCreateArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlterationJobs.
     * @param {AlterationJobCreateManyArgs} args - Arguments to create many AlterationJobs.
     * @example
     * // Create many AlterationJobs
     * const alterationJob = await prisma.alterationJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlterationJobCreateManyArgs>(args?: SelectSubset<T, AlterationJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlterationJobs and returns the data saved in the database.
     * @param {AlterationJobCreateManyAndReturnArgs} args - Arguments to create many AlterationJobs.
     * @example
     * // Create many AlterationJobs
     * const alterationJob = await prisma.alterationJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlterationJobs and only return the `id`
     * const alterationJobWithIdOnly = await prisma.alterationJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlterationJobCreateManyAndReturnArgs>(args?: SelectSubset<T, AlterationJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlterationJob.
     * @param {AlterationJobDeleteArgs} args - Arguments to delete one AlterationJob.
     * @example
     * // Delete one AlterationJob
     * const AlterationJob = await prisma.alterationJob.delete({
     *   where: {
     *     // ... filter to delete one AlterationJob
     *   }
     * })
     * 
     */
    delete<T extends AlterationJobDeleteArgs>(args: SelectSubset<T, AlterationJobDeleteArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlterationJob.
     * @param {AlterationJobUpdateArgs} args - Arguments to update one AlterationJob.
     * @example
     * // Update one AlterationJob
     * const alterationJob = await prisma.alterationJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlterationJobUpdateArgs>(args: SelectSubset<T, AlterationJobUpdateArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlterationJobs.
     * @param {AlterationJobDeleteManyArgs} args - Arguments to filter AlterationJobs to delete.
     * @example
     * // Delete a few AlterationJobs
     * const { count } = await prisma.alterationJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlterationJobDeleteManyArgs>(args?: SelectSubset<T, AlterationJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlterationJobs
     * const alterationJob = await prisma.alterationJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlterationJobUpdateManyArgs>(args: SelectSubset<T, AlterationJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationJobs and returns the data updated in the database.
     * @param {AlterationJobUpdateManyAndReturnArgs} args - Arguments to update many AlterationJobs.
     * @example
     * // Update many AlterationJobs
     * const alterationJob = await prisma.alterationJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlterationJobs and only return the `id`
     * const alterationJobWithIdOnly = await prisma.alterationJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlterationJobUpdateManyAndReturnArgs>(args: SelectSubset<T, AlterationJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlterationJob.
     * @param {AlterationJobUpsertArgs} args - Arguments to update or create a AlterationJob.
     * @example
     * // Update or create a AlterationJob
     * const alterationJob = await prisma.alterationJob.upsert({
     *   create: {
     *     // ... data to create a AlterationJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlterationJob we want to update
     *   }
     * })
     */
    upsert<T extends AlterationJobUpsertArgs>(args: SelectSubset<T, AlterationJobUpsertArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlterationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobCountArgs} args - Arguments to filter AlterationJobs to count.
     * @example
     * // Count the number of AlterationJobs
     * const count = await prisma.alterationJob.count({
     *   where: {
     *     // ... the filter for the AlterationJobs we want to count
     *   }
     * })
    **/
    count<T extends AlterationJobCountArgs>(
      args?: Subset<T, AlterationJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlterationJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlterationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlterationJobAggregateArgs>(args: Subset<T, AlterationJobAggregateArgs>): Prisma.PrismaPromise<GetAlterationJobAggregateType<T>>

    /**
     * Group by AlterationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlterationJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlterationJobGroupByArgs['orderBy'] }
        : { orderBy?: AlterationJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlterationJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlterationJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlterationJob model
   */
  readonly fields: AlterationJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlterationJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlterationJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends AlterationJob$partyArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJob$partyArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    customer<T extends AlterationJob$customerArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJob$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tailor<T extends AlterationJob$tailorArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJob$tailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    jobParts<T extends AlterationJob$jobPartsArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJob$jobPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlterationJob model
   */
  interface AlterationJobFieldRefs {
    readonly id: FieldRef<"AlterationJob", 'Int'>
    readonly saleLineItemId: FieldRef<"AlterationJob", 'Int'>
    readonly partyId: FieldRef<"AlterationJob", 'Int'>
    readonly customerId: FieldRef<"AlterationJob", 'Int'>
    readonly notes: FieldRef<"AlterationJob", 'String'>
    readonly status: FieldRef<"AlterationJob", 'String'>
    readonly timeSpentMinutes: FieldRef<"AlterationJob", 'Int'>
    readonly tailorId: FieldRef<"AlterationJob", 'Int'>
    readonly measurements: FieldRef<"AlterationJob", 'Json'>
    readonly createdAt: FieldRef<"AlterationJob", 'DateTime'>
    readonly updatedAt: FieldRef<"AlterationJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlterationJob findUnique
   */
  export type AlterationJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJob to fetch.
     */
    where: AlterationJobWhereUniqueInput
  }

  /**
   * AlterationJob findUniqueOrThrow
   */
  export type AlterationJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJob to fetch.
     */
    where: AlterationJobWhereUniqueInput
  }

  /**
   * AlterationJob findFirst
   */
  export type AlterationJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJob to fetch.
     */
    where?: AlterationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobs to fetch.
     */
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationJobs.
     */
    cursor?: AlterationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationJobs.
     */
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * AlterationJob findFirstOrThrow
   */
  export type AlterationJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJob to fetch.
     */
    where?: AlterationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobs to fetch.
     */
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationJobs.
     */
    cursor?: AlterationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationJobs.
     */
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * AlterationJob findMany
   */
  export type AlterationJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobs to fetch.
     */
    where?: AlterationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobs to fetch.
     */
    orderBy?: AlterationJobOrderByWithRelationInput | AlterationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlterationJobs.
     */
    cursor?: AlterationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobs.
     */
    skip?: number
    distinct?: AlterationJobScalarFieldEnum | AlterationJobScalarFieldEnum[]
  }

  /**
   * AlterationJob create
   */
  export type AlterationJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * The data needed to create a AlterationJob.
     */
    data: XOR<AlterationJobCreateInput, AlterationJobUncheckedCreateInput>
  }

  /**
   * AlterationJob createMany
   */
  export type AlterationJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlterationJobs.
     */
    data: AlterationJobCreateManyInput | AlterationJobCreateManyInput[]
  }

  /**
   * AlterationJob createManyAndReturn
   */
  export type AlterationJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * The data used to create many AlterationJobs.
     */
    data: AlterationJobCreateManyInput | AlterationJobCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlterationJob update
   */
  export type AlterationJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * The data needed to update a AlterationJob.
     */
    data: XOR<AlterationJobUpdateInput, AlterationJobUncheckedUpdateInput>
    /**
     * Choose, which AlterationJob to update.
     */
    where: AlterationJobWhereUniqueInput
  }

  /**
   * AlterationJob updateMany
   */
  export type AlterationJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlterationJobs.
     */
    data: XOR<AlterationJobUpdateManyMutationInput, AlterationJobUncheckedUpdateManyInput>
    /**
     * Filter which AlterationJobs to update
     */
    where?: AlterationJobWhereInput
    /**
     * Limit how many AlterationJobs to update.
     */
    limit?: number
  }

  /**
   * AlterationJob updateManyAndReturn
   */
  export type AlterationJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * The data used to update AlterationJobs.
     */
    data: XOR<AlterationJobUpdateManyMutationInput, AlterationJobUncheckedUpdateManyInput>
    /**
     * Filter which AlterationJobs to update
     */
    where?: AlterationJobWhereInput
    /**
     * Limit how many AlterationJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlterationJob upsert
   */
  export type AlterationJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * The filter to search for the AlterationJob to update in case it exists.
     */
    where: AlterationJobWhereUniqueInput
    /**
     * In case the AlterationJob found by the `where` argument doesn't exist, create a new AlterationJob with this data.
     */
    create: XOR<AlterationJobCreateInput, AlterationJobUncheckedCreateInput>
    /**
     * In case the AlterationJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlterationJobUpdateInput, AlterationJobUncheckedUpdateInput>
  }

  /**
   * AlterationJob delete
   */
  export type AlterationJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
    /**
     * Filter which AlterationJob to delete.
     */
    where: AlterationJobWhereUniqueInput
  }

  /**
   * AlterationJob deleteMany
   */
  export type AlterationJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationJobs to delete
     */
    where?: AlterationJobWhereInput
    /**
     * Limit how many AlterationJobs to delete.
     */
    limit?: number
  }

  /**
   * AlterationJob.party
   */
  export type AlterationJob$partyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Party
     */
    omit?: PartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    where?: PartyWhereInput
  }

  /**
   * AlterationJob.customer
   */
  export type AlterationJob$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * AlterationJob.tailor
   */
  export type AlterationJob$tailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AlterationJob.jobParts
   */
  export type AlterationJob$jobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    where?: AlterationJobPartWhereInput
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    cursor?: AlterationJobPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * AlterationJob without action
   */
  export type AlterationJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJob
     */
    select?: AlterationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJob
     */
    omit?: AlterationJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    partyId: number | null
    durationMinutes: number | null
    parentId: number | null
    memberId: number | null
    tailorId: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    partyId: number | null
    durationMinutes: number | null
    parentId: number | null
    memberId: number | null
    tailorId: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    partyId: number | null
    customerId: string | null
    saleId: string | null
    dateTime: Date | null
    durationMinutes: number | null
    type: $Enums.AppointmentType | null
    notes: string | null
    status: $Enums.AppointmentStatus | null
    syncedToLightspeed: boolean | null
    recurrenceRule: string | null
    parentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    tailorId: number | null
    lsEventId: string | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    partyId: number | null
    customerId: string | null
    saleId: string | null
    dateTime: Date | null
    durationMinutes: number | null
    type: $Enums.AppointmentType | null
    notes: string | null
    status: $Enums.AppointmentStatus | null
    syncedToLightspeed: boolean | null
    recurrenceRule: string | null
    parentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    memberId: number | null
    tailorId: number | null
    lsEventId: string | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    partyId: number
    customerId: number
    saleId: number
    dateTime: number
    durationMinutes: number
    type: number
    notes: number
    status: number
    syncedToLightspeed: number
    recurrenceRule: number
    parentId: number
    createdAt: number
    updatedAt: number
    memberId: number
    tailorId: number
    lsEventId: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    partyId?: true
    durationMinutes?: true
    parentId?: true
    memberId?: true
    tailorId?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    partyId?: true
    durationMinutes?: true
    parentId?: true
    memberId?: true
    tailorId?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    partyId?: true
    customerId?: true
    saleId?: true
    dateTime?: true
    durationMinutes?: true
    type?: true
    notes?: true
    status?: true
    syncedToLightspeed?: true
    recurrenceRule?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    tailorId?: true
    lsEventId?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    partyId?: true
    customerId?: true
    saleId?: true
    dateTime?: true
    durationMinutes?: true
    type?: true
    notes?: true
    status?: true
    syncedToLightspeed?: true
    recurrenceRule?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    tailorId?: true
    lsEventId?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    partyId?: true
    customerId?: true
    saleId?: true
    dateTime?: true
    durationMinutes?: true
    type?: true
    notes?: true
    status?: true
    syncedToLightspeed?: true
    recurrenceRule?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    memberId?: true
    tailorId?: true
    lsEventId?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: number
    partyId: number
    customerId: string | null
    saleId: string | null
    dateTime: Date
    durationMinutes: number | null
    type: $Enums.AppointmentType | null
    notes: string | null
    status: $Enums.AppointmentStatus
    syncedToLightspeed: boolean
    recurrenceRule: string | null
    parentId: number | null
    createdAt: Date
    updatedAt: Date
    memberId: number | null
    tailorId: number | null
    lsEventId: string | null
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    customerId?: boolean
    saleId?: boolean
    dateTime?: boolean
    durationMinutes?: boolean
    type?: boolean
    notes?: boolean
    status?: boolean
    syncedToLightspeed?: boolean
    recurrenceRule?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    tailorId?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    children?: boolean | Appointment$childrenArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    syncLogs?: boolean | Appointment$syncLogsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    customerId?: boolean
    saleId?: boolean
    dateTime?: boolean
    durationMinutes?: boolean
    type?: boolean
    notes?: boolean
    status?: boolean
    syncedToLightspeed?: boolean
    recurrenceRule?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    tailorId?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    customerId?: boolean
    saleId?: boolean
    dateTime?: boolean
    durationMinutes?: boolean
    type?: boolean
    notes?: boolean
    status?: boolean
    syncedToLightspeed?: boolean
    recurrenceRule?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    tailorId?: boolean
    lsEventId?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    partyId?: boolean
    customerId?: boolean
    saleId?: boolean
    dateTime?: boolean
    durationMinutes?: boolean
    type?: boolean
    notes?: boolean
    status?: boolean
    syncedToLightspeed?: boolean
    recurrenceRule?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    memberId?: boolean
    tailorId?: boolean
    lsEventId?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "partyId" | "customerId" | "saleId" | "dateTime" | "durationMinutes" | "type" | "notes" | "status" | "syncedToLightspeed" | "recurrenceRule" | "parentId" | "createdAt" | "updatedAt" | "memberId" | "tailorId" | "lsEventId", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    children?: boolean | Appointment$childrenArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
    syncLogs?: boolean | Appointment$syncLogsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    parent?: boolean | Appointment$parentArgs<ExtArgs>
    member?: boolean | Appointment$memberArgs<ExtArgs>
    tailor?: boolean | Appointment$tailorArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs>
      parent: Prisma.$AppointmentPayload<ExtArgs> | null
      children: Prisma.$AppointmentPayload<ExtArgs>[]
      member: Prisma.$PartyMemberPayload<ExtArgs> | null
      tailor: Prisma.$UserPayload<ExtArgs> | null
      syncLogs: Prisma.$SyncLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partyId: number
      customerId: string | null
      saleId: string | null
      dateTime: Date
      durationMinutes: number | null
      type: $Enums.AppointmentType | null
      notes: string | null
      status: $Enums.AppointmentStatus
      syncedToLightspeed: boolean
      recurrenceRule: string | null
      parentId: number | null
      createdAt: Date
      updatedAt: Date
      memberId: number | null
      tailorId: number | null
      lsEventId: string | null
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends Appointment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$parentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Appointment$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    member<T extends Appointment$memberArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$memberArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tailor<T extends Appointment$tailorArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$tailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    syncLogs<T extends Appointment$syncLogsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$syncLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'Int'>
    readonly partyId: FieldRef<"Appointment", 'Int'>
    readonly customerId: FieldRef<"Appointment", 'String'>
    readonly saleId: FieldRef<"Appointment", 'String'>
    readonly dateTime: FieldRef<"Appointment", 'DateTime'>
    readonly durationMinutes: FieldRef<"Appointment", 'Int'>
    readonly type: FieldRef<"Appointment", 'AppointmentType'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly syncedToLightspeed: FieldRef<"Appointment", 'Boolean'>
    readonly recurrenceRule: FieldRef<"Appointment", 'String'>
    readonly parentId: FieldRef<"Appointment", 'Int'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
    readonly memberId: FieldRef<"Appointment", 'Int'>
    readonly tailorId: FieldRef<"Appointment", 'Int'>
    readonly lsEventId: FieldRef<"Appointment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.parent
   */
  export type Appointment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * Appointment.children
   */
  export type Appointment$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment.member
   */
  export type Appointment$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    where?: PartyMemberWhereInput
  }

  /**
   * Appointment.tailor
   */
  export type Appointment$tailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.syncLogs
   */
  export type Appointment$syncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    where?: SyncLogWhereInput
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    cursor?: SyncLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model SyncLog
   */

  export type AggregateSyncLog = {
    _count: SyncLogCountAggregateOutputType | null
    _avg: SyncLogAvgAggregateOutputType | null
    _sum: SyncLogSumAggregateOutputType | null
    _min: SyncLogMinAggregateOutputType | null
    _max: SyncLogMaxAggregateOutputType | null
  }

  export type SyncLogAvgAggregateOutputType = {
    id: number | null
    appointmentId: number | null
  }

  export type SyncLogSumAggregateOutputType = {
    id: number | null
    appointmentId: number | null
  }

  export type SyncLogMinAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    direction: $Enums.SyncDirection | null
    status: $Enums.SyncStatus | null
    message: string | null
    createdAt: Date | null
  }

  export type SyncLogMaxAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    direction: $Enums.SyncDirection | null
    status: $Enums.SyncStatus | null
    message: string | null
    createdAt: Date | null
  }

  export type SyncLogCountAggregateOutputType = {
    id: number
    appointmentId: number
    direction: number
    status: number
    message: number
    payload: number
    createdAt: number
    _all: number
  }


  export type SyncLogAvgAggregateInputType = {
    id?: true
    appointmentId?: true
  }

  export type SyncLogSumAggregateInputType = {
    id?: true
    appointmentId?: true
  }

  export type SyncLogMinAggregateInputType = {
    id?: true
    appointmentId?: true
    direction?: true
    status?: true
    message?: true
    createdAt?: true
  }

  export type SyncLogMaxAggregateInputType = {
    id?: true
    appointmentId?: true
    direction?: true
    status?: true
    message?: true
    createdAt?: true
  }

  export type SyncLogCountAggregateInputType = {
    id?: true
    appointmentId?: true
    direction?: true
    status?: true
    message?: true
    payload?: true
    createdAt?: true
    _all?: true
  }

  export type SyncLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncLog to aggregate.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncLogs
    **/
    _count?: true | SyncLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SyncLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SyncLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncLogMaxAggregateInputType
  }

  export type GetSyncLogAggregateType<T extends SyncLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncLog[P]>
      : GetScalarType<T[P], AggregateSyncLog[P]>
  }




  export type SyncLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncLogWhereInput
    orderBy?: SyncLogOrderByWithAggregationInput | SyncLogOrderByWithAggregationInput[]
    by: SyncLogScalarFieldEnum[] | SyncLogScalarFieldEnum
    having?: SyncLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncLogCountAggregateInputType | true
    _avg?: SyncLogAvgAggregateInputType
    _sum?: SyncLogSumAggregateInputType
    _min?: SyncLogMinAggregateInputType
    _max?: SyncLogMaxAggregateInputType
  }

  export type SyncLogGroupByOutputType = {
    id: number
    appointmentId: number
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message: string | null
    payload: JsonValue | null
    createdAt: Date
    _count: SyncLogCountAggregateOutputType | null
    _avg: SyncLogAvgAggregateOutputType | null
    _sum: SyncLogSumAggregateOutputType | null
    _min: SyncLogMinAggregateOutputType | null
    _max: SyncLogMaxAggregateOutputType | null
  }

  type GetSyncLogGroupByPayload<T extends SyncLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncLogGroupByOutputType[P]>
            : GetScalarType<T[P], SyncLogGroupByOutputType[P]>
        }
      >
    >


  export type SyncLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    direction?: boolean
    status?: boolean
    message?: boolean
    payload?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncLog"]>

  export type SyncLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    direction?: boolean
    status?: boolean
    message?: boolean
    payload?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncLog"]>

  export type SyncLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    direction?: boolean
    status?: boolean
    message?: boolean
    payload?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncLog"]>

  export type SyncLogSelectScalar = {
    id?: boolean
    appointmentId?: boolean
    direction?: boolean
    status?: boolean
    message?: boolean
    payload?: boolean
    createdAt?: boolean
  }

  export type SyncLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "appointmentId" | "direction" | "status" | "message" | "payload" | "createdAt", ExtArgs["result"]["syncLog"]>
  export type SyncLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }
  export type SyncLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }
  export type SyncLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }

  export type $SyncLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncLog"
    objects: {
      appointment: Prisma.$AppointmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      appointmentId: number
      direction: $Enums.SyncDirection
      status: $Enums.SyncStatus
      message: string | null
      payload: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["syncLog"]>
    composites: {}
  }

  type SyncLogGetPayload<S extends boolean | null | undefined | SyncLogDefaultArgs> = $Result.GetResult<Prisma.$SyncLogPayload, S>

  type SyncLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SyncLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SyncLogCountAggregateInputType | true
    }

  export interface SyncLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncLog'], meta: { name: 'SyncLog' } }
    /**
     * Find zero or one SyncLog that matches the filter.
     * @param {SyncLogFindUniqueArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncLogFindUniqueArgs>(args: SelectSubset<T, SyncLogFindUniqueArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SyncLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SyncLogFindUniqueOrThrowArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindFirstArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncLogFindFirstArgs>(args?: SelectSubset<T, SyncLogFindFirstArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindFirstOrThrowArgs} args - Arguments to find a SyncLog
     * @example
     * // Get one SyncLog
     * const syncLog = await prisma.syncLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SyncLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncLogs
     * const syncLogs = await prisma.syncLog.findMany()
     * 
     * // Get first 10 SyncLogs
     * const syncLogs = await prisma.syncLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncLogWithIdOnly = await prisma.syncLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncLogFindManyArgs>(args?: SelectSubset<T, SyncLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SyncLog.
     * @param {SyncLogCreateArgs} args - Arguments to create a SyncLog.
     * @example
     * // Create one SyncLog
     * const SyncLog = await prisma.syncLog.create({
     *   data: {
     *     // ... data to create a SyncLog
     *   }
     * })
     * 
     */
    create<T extends SyncLogCreateArgs>(args: SelectSubset<T, SyncLogCreateArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SyncLogs.
     * @param {SyncLogCreateManyArgs} args - Arguments to create many SyncLogs.
     * @example
     * // Create many SyncLogs
     * const syncLog = await prisma.syncLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncLogCreateManyArgs>(args?: SelectSubset<T, SyncLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncLogs and returns the data saved in the database.
     * @param {SyncLogCreateManyAndReturnArgs} args - Arguments to create many SyncLogs.
     * @example
     * // Create many SyncLogs
     * const syncLog = await prisma.syncLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncLogs and only return the `id`
     * const syncLogWithIdOnly = await prisma.syncLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SyncLog.
     * @param {SyncLogDeleteArgs} args - Arguments to delete one SyncLog.
     * @example
     * // Delete one SyncLog
     * const SyncLog = await prisma.syncLog.delete({
     *   where: {
     *     // ... filter to delete one SyncLog
     *   }
     * })
     * 
     */
    delete<T extends SyncLogDeleteArgs>(args: SelectSubset<T, SyncLogDeleteArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SyncLog.
     * @param {SyncLogUpdateArgs} args - Arguments to update one SyncLog.
     * @example
     * // Update one SyncLog
     * const syncLog = await prisma.syncLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncLogUpdateArgs>(args: SelectSubset<T, SyncLogUpdateArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SyncLogs.
     * @param {SyncLogDeleteManyArgs} args - Arguments to filter SyncLogs to delete.
     * @example
     * // Delete a few SyncLogs
     * const { count } = await prisma.syncLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncLogDeleteManyArgs>(args?: SelectSubset<T, SyncLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncLogs
     * const syncLog = await prisma.syncLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncLogUpdateManyArgs>(args: SelectSubset<T, SyncLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncLogs and returns the data updated in the database.
     * @param {SyncLogUpdateManyAndReturnArgs} args - Arguments to update many SyncLogs.
     * @example
     * // Update many SyncLogs
     * const syncLog = await prisma.syncLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SyncLogs and only return the `id`
     * const syncLogWithIdOnly = await prisma.syncLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SyncLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SyncLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SyncLog.
     * @param {SyncLogUpsertArgs} args - Arguments to update or create a SyncLog.
     * @example
     * // Update or create a SyncLog
     * const syncLog = await prisma.syncLog.upsert({
     *   create: {
     *     // ... data to create a SyncLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncLog we want to update
     *   }
     * })
     */
    upsert<T extends SyncLogUpsertArgs>(args: SelectSubset<T, SyncLogUpsertArgs<ExtArgs>>): Prisma__SyncLogClient<$Result.GetResult<Prisma.$SyncLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogCountArgs} args - Arguments to filter SyncLogs to count.
     * @example
     * // Count the number of SyncLogs
     * const count = await prisma.syncLog.count({
     *   where: {
     *     // ... the filter for the SyncLogs we want to count
     *   }
     * })
    **/
    count<T extends SyncLogCountArgs>(
      args?: Subset<T, SyncLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncLogAggregateArgs>(args: Subset<T, SyncLogAggregateArgs>): Prisma.PrismaPromise<GetSyncLogAggregateType<T>>

    /**
     * Group by SyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncLogGroupByArgs['orderBy'] }
        : { orderBy?: SyncLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncLog model
   */
  readonly fields: SyncLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncLog model
   */
  interface SyncLogFieldRefs {
    readonly id: FieldRef<"SyncLog", 'Int'>
    readonly appointmentId: FieldRef<"SyncLog", 'Int'>
    readonly direction: FieldRef<"SyncLog", 'SyncDirection'>
    readonly status: FieldRef<"SyncLog", 'SyncStatus'>
    readonly message: FieldRef<"SyncLog", 'String'>
    readonly payload: FieldRef<"SyncLog", 'Json'>
    readonly createdAt: FieldRef<"SyncLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SyncLog findUnique
   */
  export type SyncLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog findUniqueOrThrow
   */
  export type SyncLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog findFirst
   */
  export type SyncLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncLogs.
     */
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog findFirstOrThrow
   */
  export type SyncLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLog to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncLogs.
     */
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog findMany
   */
  export type SyncLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter, which SyncLogs to fetch.
     */
    where?: SyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncLogs to fetch.
     */
    orderBy?: SyncLogOrderByWithRelationInput | SyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncLogs.
     */
    cursor?: SyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncLogs.
     */
    skip?: number
    distinct?: SyncLogScalarFieldEnum | SyncLogScalarFieldEnum[]
  }

  /**
   * SyncLog create
   */
  export type SyncLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SyncLog.
     */
    data: XOR<SyncLogCreateInput, SyncLogUncheckedCreateInput>
  }

  /**
   * SyncLog createMany
   */
  export type SyncLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncLogs.
     */
    data: SyncLogCreateManyInput | SyncLogCreateManyInput[]
  }

  /**
   * SyncLog createManyAndReturn
   */
  export type SyncLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * The data used to create many SyncLogs.
     */
    data: SyncLogCreateManyInput | SyncLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SyncLog update
   */
  export type SyncLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SyncLog.
     */
    data: XOR<SyncLogUpdateInput, SyncLogUncheckedUpdateInput>
    /**
     * Choose, which SyncLog to update.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog updateMany
   */
  export type SyncLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncLogs.
     */
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyInput>
    /**
     * Filter which SyncLogs to update
     */
    where?: SyncLogWhereInput
    /**
     * Limit how many SyncLogs to update.
     */
    limit?: number
  }

  /**
   * SyncLog updateManyAndReturn
   */
  export type SyncLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * The data used to update SyncLogs.
     */
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyInput>
    /**
     * Filter which SyncLogs to update
     */
    where?: SyncLogWhereInput
    /**
     * Limit how many SyncLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SyncLog upsert
   */
  export type SyncLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SyncLog to update in case it exists.
     */
    where: SyncLogWhereUniqueInput
    /**
     * In case the SyncLog found by the `where` argument doesn't exist, create a new SyncLog with this data.
     */
    create: XOR<SyncLogCreateInput, SyncLogUncheckedCreateInput>
    /**
     * In case the SyncLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncLogUpdateInput, SyncLogUncheckedUpdateInput>
  }

  /**
   * SyncLog delete
   */
  export type SyncLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
    /**
     * Filter which SyncLog to delete.
     */
    where: SyncLogWhereUniqueInput
  }

  /**
   * SyncLog deleteMany
   */
  export type SyncLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncLogs to delete
     */
    where?: SyncLogWhereInput
    /**
     * Limit how many SyncLogs to delete.
     */
    limit?: number
  }

  /**
   * SyncLog without action
   */
  export type SyncLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncLog
     */
    select?: SyncLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncLog
     */
    omit?: SyncLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncLogInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    details: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    userId: number | null
    action: string
    entity: string
    entityId: number
    details: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entity" | "entityId" | "details" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      action: string
      entity: string
      entityId: number
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'Int'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model PartyMember
   */

  export type AggregatePartyMember = {
    _count: PartyMemberCountAggregateOutputType | null
    _avg: PartyMemberAvgAggregateOutputType | null
    _sum: PartyMemberSumAggregateOutputType | null
    _min: PartyMemberMinAggregateOutputType | null
    _max: PartyMemberMaxAggregateOutputType | null
  }

  export type PartyMemberAvgAggregateOutputType = {
    id: number | null
    partyId: number | null
  }

  export type PartyMemberSumAggregateOutputType = {
    id: number | null
    partyId: number | null
  }

  export type PartyMemberMinAggregateOutputType = {
    id: number | null
    partyId: number | null
    lsCustomerId: string | null
    role: string | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyMemberMaxAggregateOutputType = {
    id: number | null
    partyId: number | null
    lsCustomerId: string | null
    role: string | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyMemberCountAggregateOutputType = {
    id: number
    partyId: number
    lsCustomerId: number
    role: number
    notes: number
    status: number
    createdAt: number
    updatedAt: number
    measurements: number
    _all: number
  }


  export type PartyMemberAvgAggregateInputType = {
    id?: true
    partyId?: true
  }

  export type PartyMemberSumAggregateInputType = {
    id?: true
    partyId?: true
  }

  export type PartyMemberMinAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyMemberMaxAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyMemberCountAggregateInputType = {
    id?: true
    partyId?: true
    lsCustomerId?: true
    role?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    measurements?: true
    _all?: true
  }

  export type PartyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartyMember to aggregate.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartyMembers
    **/
    _count?: true | PartyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartyMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartyMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartyMemberMaxAggregateInputType
  }

  export type GetPartyMemberAggregateType<T extends PartyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregatePartyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartyMember[P]>
      : GetScalarType<T[P], AggregatePartyMember[P]>
  }




  export type PartyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyMemberWhereInput
    orderBy?: PartyMemberOrderByWithAggregationInput | PartyMemberOrderByWithAggregationInput[]
    by: PartyMemberScalarFieldEnum[] | PartyMemberScalarFieldEnum
    having?: PartyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartyMemberCountAggregateInputType | true
    _avg?: PartyMemberAvgAggregateInputType
    _sum?: PartyMemberSumAggregateInputType
    _min?: PartyMemberMinAggregateInputType
    _max?: PartyMemberMaxAggregateInputType
  }

  export type PartyMemberGroupByOutputType = {
    id: number
    partyId: number
    lsCustomerId: string | null
    role: string
    notes: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    measurements: JsonValue | null
    _count: PartyMemberCountAggregateOutputType | null
    _avg: PartyMemberAvgAggregateOutputType | null
    _sum: PartyMemberSumAggregateOutputType | null
    _min: PartyMemberMinAggregateOutputType | null
    _max: PartyMemberMaxAggregateOutputType | null
  }

  type GetPartyMemberGroupByPayload<T extends PartyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], PartyMemberGroupByOutputType[P]>
        }
      >
    >


  export type PartyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    measurements?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
    appointments?: boolean | PartyMember$appointmentsArgs<ExtArgs>
    _count?: boolean | PartyMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    measurements?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    measurements?: boolean
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partyMember"]>

  export type PartyMemberSelectScalar = {
    id?: boolean
    partyId?: boolean
    lsCustomerId?: boolean
    role?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    measurements?: boolean
  }

  export type PartyMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "partyId" | "lsCustomerId" | "role" | "notes" | "status" | "createdAt" | "updatedAt" | "measurements", ExtArgs["result"]["partyMember"]>
  export type PartyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
    appointments?: boolean | PartyMember$appointmentsArgs<ExtArgs>
    _count?: boolean | PartyMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartyMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }
  export type PartyMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }

  export type $PartyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartyMember"
    objects: {
      party: Prisma.$PartyPayload<ExtArgs>
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partyId: number
      lsCustomerId: string | null
      role: string
      notes: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      measurements: Prisma.JsonValue | null
    }, ExtArgs["result"]["partyMember"]>
    composites: {}
  }

  type PartyMemberGetPayload<S extends boolean | null | undefined | PartyMemberDefaultArgs> = $Result.GetResult<Prisma.$PartyMemberPayload, S>

  type PartyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartyMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartyMemberCountAggregateInputType | true
    }

  export interface PartyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartyMember'], meta: { name: 'PartyMember' } }
    /**
     * Find zero or one PartyMember that matches the filter.
     * @param {PartyMemberFindUniqueArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartyMemberFindUniqueArgs>(args: SelectSubset<T, PartyMemberFindUniqueArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PartyMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartyMemberFindUniqueOrThrowArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, PartyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindFirstArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartyMemberFindFirstArgs>(args?: SelectSubset<T, PartyMemberFindFirstArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindFirstOrThrowArgs} args - Arguments to find a PartyMember
     * @example
     * // Get one PartyMember
     * const partyMember = await prisma.partyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, PartyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PartyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartyMembers
     * const partyMembers = await prisma.partyMember.findMany()
     * 
     * // Get first 10 PartyMembers
     * const partyMembers = await prisma.partyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartyMemberFindManyArgs>(args?: SelectSubset<T, PartyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PartyMember.
     * @param {PartyMemberCreateArgs} args - Arguments to create a PartyMember.
     * @example
     * // Create one PartyMember
     * const PartyMember = await prisma.partyMember.create({
     *   data: {
     *     // ... data to create a PartyMember
     *   }
     * })
     * 
     */
    create<T extends PartyMemberCreateArgs>(args: SelectSubset<T, PartyMemberCreateArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PartyMembers.
     * @param {PartyMemberCreateManyArgs} args - Arguments to create many PartyMembers.
     * @example
     * // Create many PartyMembers
     * const partyMember = await prisma.partyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartyMemberCreateManyArgs>(args?: SelectSubset<T, PartyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartyMembers and returns the data saved in the database.
     * @param {PartyMemberCreateManyAndReturnArgs} args - Arguments to create many PartyMembers.
     * @example
     * // Create many PartyMembers
     * const partyMember = await prisma.partyMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartyMembers and only return the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartyMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, PartyMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PartyMember.
     * @param {PartyMemberDeleteArgs} args - Arguments to delete one PartyMember.
     * @example
     * // Delete one PartyMember
     * const PartyMember = await prisma.partyMember.delete({
     *   where: {
     *     // ... filter to delete one PartyMember
     *   }
     * })
     * 
     */
    delete<T extends PartyMemberDeleteArgs>(args: SelectSubset<T, PartyMemberDeleteArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PartyMember.
     * @param {PartyMemberUpdateArgs} args - Arguments to update one PartyMember.
     * @example
     * // Update one PartyMember
     * const partyMember = await prisma.partyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartyMemberUpdateArgs>(args: SelectSubset<T, PartyMemberUpdateArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PartyMembers.
     * @param {PartyMemberDeleteManyArgs} args - Arguments to filter PartyMembers to delete.
     * @example
     * // Delete a few PartyMembers
     * const { count } = await prisma.partyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartyMemberDeleteManyArgs>(args?: SelectSubset<T, PartyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartyMembers
     * const partyMember = await prisma.partyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartyMemberUpdateManyArgs>(args: SelectSubset<T, PartyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartyMembers and returns the data updated in the database.
     * @param {PartyMemberUpdateManyAndReturnArgs} args - Arguments to update many PartyMembers.
     * @example
     * // Update many PartyMembers
     * const partyMember = await prisma.partyMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PartyMembers and only return the `id`
     * const partyMemberWithIdOnly = await prisma.partyMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartyMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, PartyMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PartyMember.
     * @param {PartyMemberUpsertArgs} args - Arguments to update or create a PartyMember.
     * @example
     * // Update or create a PartyMember
     * const partyMember = await prisma.partyMember.upsert({
     *   create: {
     *     // ... data to create a PartyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartyMember we want to update
     *   }
     * })
     */
    upsert<T extends PartyMemberUpsertArgs>(args: SelectSubset<T, PartyMemberUpsertArgs<ExtArgs>>): Prisma__PartyMemberClient<$Result.GetResult<Prisma.$PartyMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PartyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberCountArgs} args - Arguments to filter PartyMembers to count.
     * @example
     * // Count the number of PartyMembers
     * const count = await prisma.partyMember.count({
     *   where: {
     *     // ... the filter for the PartyMembers we want to count
     *   }
     * })
    **/
    count<T extends PartyMemberCountArgs>(
      args?: Subset<T, PartyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartyMemberAggregateArgs>(args: Subset<T, PartyMemberAggregateArgs>): Prisma.PrismaPromise<GetPartyMemberAggregateType<T>>

    /**
     * Group by PartyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartyMemberGroupByArgs['orderBy'] }
        : { orderBy?: PartyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartyMember model
   */
  readonly fields: PartyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends PartyMember$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, PartyMember$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartyMember model
   */
  interface PartyMemberFieldRefs {
    readonly id: FieldRef<"PartyMember", 'Int'>
    readonly partyId: FieldRef<"PartyMember", 'Int'>
    readonly lsCustomerId: FieldRef<"PartyMember", 'String'>
    readonly role: FieldRef<"PartyMember", 'String'>
    readonly notes: FieldRef<"PartyMember", 'String'>
    readonly status: FieldRef<"PartyMember", 'String'>
    readonly createdAt: FieldRef<"PartyMember", 'DateTime'>
    readonly updatedAt: FieldRef<"PartyMember", 'DateTime'>
    readonly measurements: FieldRef<"PartyMember", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * PartyMember findUnique
   */
  export type PartyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember findUniqueOrThrow
   */
  export type PartyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember findFirst
   */
  export type PartyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartyMembers.
     */
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember findFirstOrThrow
   */
  export type PartyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMember to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartyMembers.
     */
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember findMany
   */
  export type PartyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter, which PartyMembers to fetch.
     */
    where?: PartyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartyMembers to fetch.
     */
    orderBy?: PartyMemberOrderByWithRelationInput | PartyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartyMembers.
     */
    cursor?: PartyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartyMembers.
     */
    skip?: number
    distinct?: PartyMemberScalarFieldEnum | PartyMemberScalarFieldEnum[]
  }

  /**
   * PartyMember create
   */
  export type PartyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a PartyMember.
     */
    data: XOR<PartyMemberCreateInput, PartyMemberUncheckedCreateInput>
  }

  /**
   * PartyMember createMany
   */
  export type PartyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartyMembers.
     */
    data: PartyMemberCreateManyInput | PartyMemberCreateManyInput[]
  }

  /**
   * PartyMember createManyAndReturn
   */
  export type PartyMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * The data used to create many PartyMembers.
     */
    data: PartyMemberCreateManyInput | PartyMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartyMember update
   */
  export type PartyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a PartyMember.
     */
    data: XOR<PartyMemberUpdateInput, PartyMemberUncheckedUpdateInput>
    /**
     * Choose, which PartyMember to update.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember updateMany
   */
  export type PartyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartyMembers.
     */
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyInput>
    /**
     * Filter which PartyMembers to update
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to update.
     */
    limit?: number
  }

  /**
   * PartyMember updateManyAndReturn
   */
  export type PartyMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * The data used to update PartyMembers.
     */
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyInput>
    /**
     * Filter which PartyMembers to update
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartyMember upsert
   */
  export type PartyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the PartyMember to update in case it exists.
     */
    where: PartyMemberWhereUniqueInput
    /**
     * In case the PartyMember found by the `where` argument doesn't exist, create a new PartyMember with this data.
     */
    create: XOR<PartyMemberCreateInput, PartyMemberUncheckedCreateInput>
    /**
     * In case the PartyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartyMemberUpdateInput, PartyMemberUncheckedUpdateInput>
  }

  /**
   * PartyMember delete
   */
  export type PartyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
    /**
     * Filter which PartyMember to delete.
     */
    where: PartyMemberWhereUniqueInput
  }

  /**
   * PartyMember deleteMany
   */
  export type PartyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartyMembers to delete
     */
    where?: PartyMemberWhereInput
    /**
     * Limit how many PartyMembers to delete.
     */
    limit?: number
  }

  /**
   * PartyMember.appointments
   */
  export type PartyMember$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * PartyMember without action
   */
  export type PartyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyMember
     */
    select?: PartyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartyMember
     */
    omit?: PartyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyMemberInclude<ExtArgs> | null
  }


  /**
   * Model SaleAssignment
   */

  export type AggregateSaleAssignment = {
    _count: SaleAssignmentCountAggregateOutputType | null
    _avg: SaleAssignmentAvgAggregateOutputType | null
    _sum: SaleAssignmentSumAggregateOutputType | null
    _min: SaleAssignmentMinAggregateOutputType | null
    _max: SaleAssignmentMaxAggregateOutputType | null
  }

  export type SaleAssignmentAvgAggregateOutputType = {
    id: number | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
  }

  export type SaleAssignmentSumAggregateOutputType = {
    id: number | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
  }

  export type SaleAssignmentMinAggregateOutputType = {
    id: number | null
    saleId: string | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SaleAssignmentMaxAggregateOutputType = {
    id: number | null
    saleId: string | null
    associateId: number | null
    commissionRate: number | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SaleAssignmentCountAggregateOutputType = {
    id: number
    saleId: number
    associateId: number
    commissionRate: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SaleAssignmentAvgAggregateInputType = {
    id?: true
    associateId?: true
    commissionRate?: true
    amount?: true
  }

  export type SaleAssignmentSumAggregateInputType = {
    id?: true
    associateId?: true
    commissionRate?: true
    amount?: true
  }

  export type SaleAssignmentMinAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SaleAssignmentMaxAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SaleAssignmentCountAggregateInputType = {
    id?: true
    saleId?: true
    associateId?: true
    commissionRate?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SaleAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleAssignment to aggregate.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaleAssignments
    **/
    _count?: true | SaleAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleAssignmentMaxAggregateInputType
  }

  export type GetSaleAssignmentAggregateType<T extends SaleAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateSaleAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleAssignment[P]>
      : GetScalarType<T[P], AggregateSaleAssignment[P]>
  }




  export type SaleAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleAssignmentWhereInput
    orderBy?: SaleAssignmentOrderByWithAggregationInput | SaleAssignmentOrderByWithAggregationInput[]
    by: SaleAssignmentScalarFieldEnum[] | SaleAssignmentScalarFieldEnum
    having?: SaleAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleAssignmentCountAggregateInputType | true
    _avg?: SaleAssignmentAvgAggregateInputType
    _sum?: SaleAssignmentSumAggregateInputType
    _min?: SaleAssignmentMinAggregateInputType
    _max?: SaleAssignmentMaxAggregateInputType
  }

  export type SaleAssignmentGroupByOutputType = {
    id: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: SaleAssignmentCountAggregateOutputType | null
    _avg: SaleAssignmentAvgAggregateOutputType | null
    _sum: SaleAssignmentSumAggregateOutputType | null
    _min: SaleAssignmentMinAggregateOutputType | null
    _max: SaleAssignmentMaxAggregateOutputType | null
  }

  type GetSaleAssignmentGroupByPayload<T extends SaleAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], SaleAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type SaleAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saleAssignment"]>

  export type SaleAssignmentSelectScalar = {
    id?: boolean
    saleId?: boolean
    associateId?: boolean
    commissionRate?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SaleAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "saleId" | "associateId" | "commissionRate" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["saleAssignment"]>
  export type SaleAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SaleAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SaleAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    associate?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SaleAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaleAssignment"
    objects: {
      associate: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saleId: string
      associateId: number
      commissionRate: number
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["saleAssignment"]>
    composites: {}
  }

  type SaleAssignmentGetPayload<S extends boolean | null | undefined | SaleAssignmentDefaultArgs> = $Result.GetResult<Prisma.$SaleAssignmentPayload, S>

  type SaleAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaleAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaleAssignmentCountAggregateInputType | true
    }

  export interface SaleAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleAssignment'], meta: { name: 'SaleAssignment' } }
    /**
     * Find zero or one SaleAssignment that matches the filter.
     * @param {SaleAssignmentFindUniqueArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleAssignmentFindUniqueArgs>(args: SelectSubset<T, SaleAssignmentFindUniqueArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SaleAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaleAssignmentFindUniqueOrThrowArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindFirstArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleAssignmentFindFirstArgs>(args?: SelectSubset<T, SaleAssignmentFindFirstArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindFirstOrThrowArgs} args - Arguments to find a SaleAssignment
     * @example
     * // Get one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SaleAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleAssignments
     * const saleAssignments = await prisma.saleAssignment.findMany()
     * 
     * // Get first 10 SaleAssignments
     * const saleAssignments = await prisma.saleAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleAssignmentFindManyArgs>(args?: SelectSubset<T, SaleAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SaleAssignment.
     * @param {SaleAssignmentCreateArgs} args - Arguments to create a SaleAssignment.
     * @example
     * // Create one SaleAssignment
     * const SaleAssignment = await prisma.saleAssignment.create({
     *   data: {
     *     // ... data to create a SaleAssignment
     *   }
     * })
     * 
     */
    create<T extends SaleAssignmentCreateArgs>(args: SelectSubset<T, SaleAssignmentCreateArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SaleAssignments.
     * @param {SaleAssignmentCreateManyArgs} args - Arguments to create many SaleAssignments.
     * @example
     * // Create many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleAssignmentCreateManyArgs>(args?: SelectSubset<T, SaleAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaleAssignments and returns the data saved in the database.
     * @param {SaleAssignmentCreateManyAndReturnArgs} args - Arguments to create many SaleAssignments.
     * @example
     * // Create many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaleAssignments and only return the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaleAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, SaleAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SaleAssignment.
     * @param {SaleAssignmentDeleteArgs} args - Arguments to delete one SaleAssignment.
     * @example
     * // Delete one SaleAssignment
     * const SaleAssignment = await prisma.saleAssignment.delete({
     *   where: {
     *     // ... filter to delete one SaleAssignment
     *   }
     * })
     * 
     */
    delete<T extends SaleAssignmentDeleteArgs>(args: SelectSubset<T, SaleAssignmentDeleteArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SaleAssignment.
     * @param {SaleAssignmentUpdateArgs} args - Arguments to update one SaleAssignment.
     * @example
     * // Update one SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleAssignmentUpdateArgs>(args: SelectSubset<T, SaleAssignmentUpdateArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SaleAssignments.
     * @param {SaleAssignmentDeleteManyArgs} args - Arguments to filter SaleAssignments to delete.
     * @example
     * // Delete a few SaleAssignments
     * const { count } = await prisma.saleAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleAssignmentDeleteManyArgs>(args?: SelectSubset<T, SaleAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleAssignmentUpdateManyArgs>(args: SelectSubset<T, SaleAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleAssignments and returns the data updated in the database.
     * @param {SaleAssignmentUpdateManyAndReturnArgs} args - Arguments to update many SaleAssignments.
     * @example
     * // Update many SaleAssignments
     * const saleAssignment = await prisma.saleAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SaleAssignments and only return the `id`
     * const saleAssignmentWithIdOnly = await prisma.saleAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaleAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, SaleAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SaleAssignment.
     * @param {SaleAssignmentUpsertArgs} args - Arguments to update or create a SaleAssignment.
     * @example
     * // Update or create a SaleAssignment
     * const saleAssignment = await prisma.saleAssignment.upsert({
     *   create: {
     *     // ... data to create a SaleAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleAssignment we want to update
     *   }
     * })
     */
    upsert<T extends SaleAssignmentUpsertArgs>(args: SelectSubset<T, SaleAssignmentUpsertArgs<ExtArgs>>): Prisma__SaleAssignmentClient<$Result.GetResult<Prisma.$SaleAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SaleAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentCountArgs} args - Arguments to filter SaleAssignments to count.
     * @example
     * // Count the number of SaleAssignments
     * const count = await prisma.saleAssignment.count({
     *   where: {
     *     // ... the filter for the SaleAssignments we want to count
     *   }
     * })
    **/
    count<T extends SaleAssignmentCountArgs>(
      args?: Subset<T, SaleAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaleAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAssignmentAggregateArgs>(args: Subset<T, SaleAssignmentAggregateArgs>): Prisma.PrismaPromise<GetSaleAssignmentAggregateType<T>>

    /**
     * Group by SaleAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: SaleAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaleAssignment model
   */
  readonly fields: SaleAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    associate<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaleAssignment model
   */
  interface SaleAssignmentFieldRefs {
    readonly id: FieldRef<"SaleAssignment", 'Int'>
    readonly saleId: FieldRef<"SaleAssignment", 'String'>
    readonly associateId: FieldRef<"SaleAssignment", 'Int'>
    readonly commissionRate: FieldRef<"SaleAssignment", 'Float'>
    readonly amount: FieldRef<"SaleAssignment", 'Float'>
    readonly createdAt: FieldRef<"SaleAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"SaleAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SaleAssignment findUnique
   */
  export type SaleAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment findUniqueOrThrow
   */
  export type SaleAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment findFirst
   */
  export type SaleAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleAssignments.
     */
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment findFirstOrThrow
   */
  export type SaleAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignment to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleAssignments.
     */
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment findMany
   */
  export type SaleAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which SaleAssignments to fetch.
     */
    where?: SaleAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleAssignments to fetch.
     */
    orderBy?: SaleAssignmentOrderByWithRelationInput | SaleAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaleAssignments.
     */
    cursor?: SaleAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleAssignments.
     */
    skip?: number
    distinct?: SaleAssignmentScalarFieldEnum | SaleAssignmentScalarFieldEnum[]
  }

  /**
   * SaleAssignment create
   */
  export type SaleAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a SaleAssignment.
     */
    data: XOR<SaleAssignmentCreateInput, SaleAssignmentUncheckedCreateInput>
  }

  /**
   * SaleAssignment createMany
   */
  export type SaleAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaleAssignments.
     */
    data: SaleAssignmentCreateManyInput | SaleAssignmentCreateManyInput[]
  }

  /**
   * SaleAssignment createManyAndReturn
   */
  export type SaleAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many SaleAssignments.
     */
    data: SaleAssignmentCreateManyInput | SaleAssignmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleAssignment update
   */
  export type SaleAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a SaleAssignment.
     */
    data: XOR<SaleAssignmentUpdateInput, SaleAssignmentUncheckedUpdateInput>
    /**
     * Choose, which SaleAssignment to update.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment updateMany
   */
  export type SaleAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaleAssignments.
     */
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which SaleAssignments to update
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to update.
     */
    limit?: number
  }

  /**
   * SaleAssignment updateManyAndReturn
   */
  export type SaleAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update SaleAssignments.
     */
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which SaleAssignments to update
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleAssignment upsert
   */
  export type SaleAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the SaleAssignment to update in case it exists.
     */
    where: SaleAssignmentWhereUniqueInput
    /**
     * In case the SaleAssignment found by the `where` argument doesn't exist, create a new SaleAssignment with this data.
     */
    create: XOR<SaleAssignmentCreateInput, SaleAssignmentUncheckedCreateInput>
    /**
     * In case the SaleAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleAssignmentUpdateInput, SaleAssignmentUncheckedUpdateInput>
  }

  /**
   * SaleAssignment delete
   */
  export type SaleAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
    /**
     * Filter which SaleAssignment to delete.
     */
    where: SaleAssignmentWhereUniqueInput
  }

  /**
   * SaleAssignment deleteMany
   */
  export type SaleAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleAssignments to delete
     */
    where?: SaleAssignmentWhereInput
    /**
     * Limit how many SaleAssignments to delete.
     */
    limit?: number
  }

  /**
   * SaleAssignment without action
   */
  export type SaleAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleAssignment
     */
    select?: SaleAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleAssignment
     */
    omit?: SaleAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: number
    name: string
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Skill$usersArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["skill"]>
  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Skill$usersArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills and returns the data updated in the database.
     * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Skill$usersArgs<ExtArgs> = {}>(args?: Subset<T, Skill$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'Int'>
    readonly name: FieldRef<"Skill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill updateManyAndReturn
   */
  export type SkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to delete.
     */
    limit?: number
  }

  /**
   * Skill.users
   */
  export type Skill$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model Settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsAvgAggregateOutputType = {
    id: number | null
  }

  export type SettingsSumAggregateOutputType = {
    id: number | null
  }

  export type SettingsMinAggregateOutputType = {
    id: number | null
    reminderIntervals: string | null
    emailSubject: string | null
    emailBody: string | null
    smsBody: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: number | null
    reminderIntervals: string | null
    emailSubject: string | null
    emailBody: string | null
    smsBody: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    reminderIntervals: number
    emailSubject: number
    emailBody: number
    smsBody: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingsAvgAggregateInputType = {
    id?: true
  }

  export type SettingsSumAggregateInputType = {
    id?: true
  }

  export type SettingsMinAggregateInputType = {
    id?: true
    reminderIntervals?: true
    emailSubject?: true
    emailBody?: true
    smsBody?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    reminderIntervals?: true
    emailSubject?: true
    emailBody?: true
    smsBody?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    reminderIntervals?: true
    emailSubject?: true
    emailBody?: true
    smsBody?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingsWhereInput
    orderBy?: SettingsOrderByWithAggregationInput | SettingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _avg?: SettingsAvgAggregateInputType
    _sum?: SettingsSumAggregateInputType
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    id: number
    reminderIntervals: string
    emailSubject: string
    emailBody: string
    smsBody: string
    createdAt: Date
    updatedAt: Date
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reminderIntervals?: boolean
    emailSubject?: boolean
    emailBody?: boolean
    smsBody?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reminderIntervals?: boolean
    emailSubject?: boolean
    emailBody?: boolean
    smsBody?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reminderIntervals?: boolean
    emailSubject?: boolean
    emailBody?: boolean
    smsBody?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectScalar = {
    id?: boolean
    reminderIntervals?: boolean
    emailSubject?: boolean
    emailBody?: boolean
    smsBody?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reminderIntervals" | "emailSubject" | "emailBody" | "smsBody" | "createdAt" | "updatedAt", ExtArgs["result"]["settings"]>

  export type $SettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Settings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reminderIntervals: string
      emailSubject: string
      emailBody: string
      smsBody: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }

  type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = $Result.GetResult<Prisma.$SettingsPayload, S>

  type SettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingsFindUniqueArgs>(args: SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingsFindFirstArgs>(args?: SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingsFindManyArgs>(args?: SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
     */
    create<T extends SettingsCreateArgs>(args: SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingsCreateManyArgs>(args?: SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingsCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
     */
    delete<T extends SettingsDeleteArgs>(args: SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingsUpdateArgs>(args: SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingsDeleteManyArgs>(args?: SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingsUpdateManyArgs>(args: SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingsUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
     */
    upsert<T extends SettingsUpsertArgs>(args: SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Settings model
   */
  readonly fields: SettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Settings model
   */
  interface SettingsFieldRefs {
    readonly id: FieldRef<"Settings", 'Int'>
    readonly reminderIntervals: FieldRef<"Settings", 'String'>
    readonly emailSubject: FieldRef<"Settings", 'String'>
    readonly emailBody: FieldRef<"Settings", 'String'>
    readonly smsBody: FieldRef<"Settings", 'String'>
    readonly createdAt: FieldRef<"Settings", 'DateTime'>
    readonly updatedAt: FieldRef<"Settings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Settings findUnique
   */
  export type SettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findFirst
   */
  export type SettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings create
   */
  export type SettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }

  /**
   * Settings createMany
   */
  export type SettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
  }

  /**
   * Settings createManyAndReturn
   */
  export type SettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
  }

  /**
   * Settings update
   */
  export type SettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings updateManyAndReturn
   */
  export type SettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }

  /**
   * Settings delete
   */
  export type SettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Settings without action
   */
  export type SettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
  }


  /**
   * Model AlterationTaskType
   */

  export type AggregateAlterationTaskType = {
    _count: AlterationTaskTypeCountAggregateOutputType | null
    _avg: AlterationTaskTypeAvgAggregateOutputType | null
    _sum: AlterationTaskTypeSumAggregateOutputType | null
    _min: AlterationTaskTypeMinAggregateOutputType | null
    _max: AlterationTaskTypeMaxAggregateOutputType | null
  }

  export type AlterationTaskTypeAvgAggregateOutputType = {
    id: number | null
    defaultDuration: number | null
  }

  export type AlterationTaskTypeSumAggregateOutputType = {
    id: number | null
    defaultDuration: number | null
  }

  export type AlterationTaskTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    defaultDuration: number | null
    parts: string | null
  }

  export type AlterationTaskTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    defaultDuration: number | null
    parts: string | null
  }

  export type AlterationTaskTypeCountAggregateOutputType = {
    id: number
    name: number
    defaultDuration: number
    parts: number
    _all: number
  }


  export type AlterationTaskTypeAvgAggregateInputType = {
    id?: true
    defaultDuration?: true
  }

  export type AlterationTaskTypeSumAggregateInputType = {
    id?: true
    defaultDuration?: true
  }

  export type AlterationTaskTypeMinAggregateInputType = {
    id?: true
    name?: true
    defaultDuration?: true
    parts?: true
  }

  export type AlterationTaskTypeMaxAggregateInputType = {
    id?: true
    name?: true
    defaultDuration?: true
    parts?: true
  }

  export type AlterationTaskTypeCountAggregateInputType = {
    id?: true
    name?: true
    defaultDuration?: true
    parts?: true
    _all?: true
  }

  export type AlterationTaskTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationTaskType to aggregate.
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationTaskTypes to fetch.
     */
    orderBy?: AlterationTaskTypeOrderByWithRelationInput | AlterationTaskTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlterationTaskTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationTaskTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationTaskTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlterationTaskTypes
    **/
    _count?: true | AlterationTaskTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlterationTaskTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlterationTaskTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlterationTaskTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlterationTaskTypeMaxAggregateInputType
  }

  export type GetAlterationTaskTypeAggregateType<T extends AlterationTaskTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateAlterationTaskType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlterationTaskType[P]>
      : GetScalarType<T[P], AggregateAlterationTaskType[P]>
  }




  export type AlterationTaskTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationTaskTypeWhereInput
    orderBy?: AlterationTaskTypeOrderByWithAggregationInput | AlterationTaskTypeOrderByWithAggregationInput[]
    by: AlterationTaskTypeScalarFieldEnum[] | AlterationTaskTypeScalarFieldEnum
    having?: AlterationTaskTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlterationTaskTypeCountAggregateInputType | true
    _avg?: AlterationTaskTypeAvgAggregateInputType
    _sum?: AlterationTaskTypeSumAggregateInputType
    _min?: AlterationTaskTypeMinAggregateInputType
    _max?: AlterationTaskTypeMaxAggregateInputType
  }

  export type AlterationTaskTypeGroupByOutputType = {
    id: number
    name: string
    defaultDuration: number
    parts: string
    _count: AlterationTaskTypeCountAggregateOutputType | null
    _avg: AlterationTaskTypeAvgAggregateOutputType | null
    _sum: AlterationTaskTypeSumAggregateOutputType | null
    _min: AlterationTaskTypeMinAggregateOutputType | null
    _max: AlterationTaskTypeMaxAggregateOutputType | null
  }

  type GetAlterationTaskTypeGroupByPayload<T extends AlterationTaskTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlterationTaskTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlterationTaskTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlterationTaskTypeGroupByOutputType[P]>
            : GetScalarType<T[P], AlterationTaskTypeGroupByOutputType[P]>
        }
      >
    >


  export type AlterationTaskTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    defaultDuration?: boolean
    parts?: boolean
    abilities?: boolean | AlterationTaskType$abilitiesArgs<ExtArgs>
    jobParts?: boolean | AlterationTaskType$jobPartsArgs<ExtArgs>
    _count?: boolean | AlterationTaskTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alterationTaskType"]>

  export type AlterationTaskTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    defaultDuration?: boolean
    parts?: boolean
  }, ExtArgs["result"]["alterationTaskType"]>

  export type AlterationTaskTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    defaultDuration?: boolean
    parts?: boolean
  }, ExtArgs["result"]["alterationTaskType"]>

  export type AlterationTaskTypeSelectScalar = {
    id?: boolean
    name?: boolean
    defaultDuration?: boolean
    parts?: boolean
  }

  export type AlterationTaskTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "defaultDuration" | "parts", ExtArgs["result"]["alterationTaskType"]>
  export type AlterationTaskTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    abilities?: boolean | AlterationTaskType$abilitiesArgs<ExtArgs>
    jobParts?: boolean | AlterationTaskType$jobPartsArgs<ExtArgs>
    _count?: boolean | AlterationTaskTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlterationTaskTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AlterationTaskTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AlterationTaskTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlterationTaskType"
    objects: {
      abilities: Prisma.$TailorAbilityPayload<ExtArgs>[]
      jobParts: Prisma.$AlterationJobPartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      defaultDuration: number
      parts: string
    }, ExtArgs["result"]["alterationTaskType"]>
    composites: {}
  }

  type AlterationTaskTypeGetPayload<S extends boolean | null | undefined | AlterationTaskTypeDefaultArgs> = $Result.GetResult<Prisma.$AlterationTaskTypePayload, S>

  type AlterationTaskTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlterationTaskTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlterationTaskTypeCountAggregateInputType | true
    }

  export interface AlterationTaskTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlterationTaskType'], meta: { name: 'AlterationTaskType' } }
    /**
     * Find zero or one AlterationTaskType that matches the filter.
     * @param {AlterationTaskTypeFindUniqueArgs} args - Arguments to find a AlterationTaskType
     * @example
     * // Get one AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlterationTaskTypeFindUniqueArgs>(args: SelectSubset<T, AlterationTaskTypeFindUniqueArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlterationTaskType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlterationTaskTypeFindUniqueOrThrowArgs} args - Arguments to find a AlterationTaskType
     * @example
     * // Get one AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlterationTaskTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, AlterationTaskTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationTaskType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeFindFirstArgs} args - Arguments to find a AlterationTaskType
     * @example
     * // Get one AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlterationTaskTypeFindFirstArgs>(args?: SelectSubset<T, AlterationTaskTypeFindFirstArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationTaskType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeFindFirstOrThrowArgs} args - Arguments to find a AlterationTaskType
     * @example
     * // Get one AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlterationTaskTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, AlterationTaskTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlterationTaskTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlterationTaskTypes
     * const alterationTaskTypes = await prisma.alterationTaskType.findMany()
     * 
     * // Get first 10 AlterationTaskTypes
     * const alterationTaskTypes = await prisma.alterationTaskType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alterationTaskTypeWithIdOnly = await prisma.alterationTaskType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlterationTaskTypeFindManyArgs>(args?: SelectSubset<T, AlterationTaskTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlterationTaskType.
     * @param {AlterationTaskTypeCreateArgs} args - Arguments to create a AlterationTaskType.
     * @example
     * // Create one AlterationTaskType
     * const AlterationTaskType = await prisma.alterationTaskType.create({
     *   data: {
     *     // ... data to create a AlterationTaskType
     *   }
     * })
     * 
     */
    create<T extends AlterationTaskTypeCreateArgs>(args: SelectSubset<T, AlterationTaskTypeCreateArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlterationTaskTypes.
     * @param {AlterationTaskTypeCreateManyArgs} args - Arguments to create many AlterationTaskTypes.
     * @example
     * // Create many AlterationTaskTypes
     * const alterationTaskType = await prisma.alterationTaskType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlterationTaskTypeCreateManyArgs>(args?: SelectSubset<T, AlterationTaskTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlterationTaskTypes and returns the data saved in the database.
     * @param {AlterationTaskTypeCreateManyAndReturnArgs} args - Arguments to create many AlterationTaskTypes.
     * @example
     * // Create many AlterationTaskTypes
     * const alterationTaskType = await prisma.alterationTaskType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlterationTaskTypes and only return the `id`
     * const alterationTaskTypeWithIdOnly = await prisma.alterationTaskType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlterationTaskTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, AlterationTaskTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlterationTaskType.
     * @param {AlterationTaskTypeDeleteArgs} args - Arguments to delete one AlterationTaskType.
     * @example
     * // Delete one AlterationTaskType
     * const AlterationTaskType = await prisma.alterationTaskType.delete({
     *   where: {
     *     // ... filter to delete one AlterationTaskType
     *   }
     * })
     * 
     */
    delete<T extends AlterationTaskTypeDeleteArgs>(args: SelectSubset<T, AlterationTaskTypeDeleteArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlterationTaskType.
     * @param {AlterationTaskTypeUpdateArgs} args - Arguments to update one AlterationTaskType.
     * @example
     * // Update one AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlterationTaskTypeUpdateArgs>(args: SelectSubset<T, AlterationTaskTypeUpdateArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlterationTaskTypes.
     * @param {AlterationTaskTypeDeleteManyArgs} args - Arguments to filter AlterationTaskTypes to delete.
     * @example
     * // Delete a few AlterationTaskTypes
     * const { count } = await prisma.alterationTaskType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlterationTaskTypeDeleteManyArgs>(args?: SelectSubset<T, AlterationTaskTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationTaskTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlterationTaskTypes
     * const alterationTaskType = await prisma.alterationTaskType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlterationTaskTypeUpdateManyArgs>(args: SelectSubset<T, AlterationTaskTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationTaskTypes and returns the data updated in the database.
     * @param {AlterationTaskTypeUpdateManyAndReturnArgs} args - Arguments to update many AlterationTaskTypes.
     * @example
     * // Update many AlterationTaskTypes
     * const alterationTaskType = await prisma.alterationTaskType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlterationTaskTypes and only return the `id`
     * const alterationTaskTypeWithIdOnly = await prisma.alterationTaskType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlterationTaskTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, AlterationTaskTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlterationTaskType.
     * @param {AlterationTaskTypeUpsertArgs} args - Arguments to update or create a AlterationTaskType.
     * @example
     * // Update or create a AlterationTaskType
     * const alterationTaskType = await prisma.alterationTaskType.upsert({
     *   create: {
     *     // ... data to create a AlterationTaskType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlterationTaskType we want to update
     *   }
     * })
     */
    upsert<T extends AlterationTaskTypeUpsertArgs>(args: SelectSubset<T, AlterationTaskTypeUpsertArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlterationTaskTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeCountArgs} args - Arguments to filter AlterationTaskTypes to count.
     * @example
     * // Count the number of AlterationTaskTypes
     * const count = await prisma.alterationTaskType.count({
     *   where: {
     *     // ... the filter for the AlterationTaskTypes we want to count
     *   }
     * })
    **/
    count<T extends AlterationTaskTypeCountArgs>(
      args?: Subset<T, AlterationTaskTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlterationTaskTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlterationTaskType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlterationTaskTypeAggregateArgs>(args: Subset<T, AlterationTaskTypeAggregateArgs>): Prisma.PrismaPromise<GetAlterationTaskTypeAggregateType<T>>

    /**
     * Group by AlterationTaskType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationTaskTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlterationTaskTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlterationTaskTypeGroupByArgs['orderBy'] }
        : { orderBy?: AlterationTaskTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlterationTaskTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlterationTaskTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlterationTaskType model
   */
  readonly fields: AlterationTaskTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlterationTaskType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlterationTaskTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    abilities<T extends AlterationTaskType$abilitiesArgs<ExtArgs> = {}>(args?: Subset<T, AlterationTaskType$abilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobParts<T extends AlterationTaskType$jobPartsArgs<ExtArgs> = {}>(args?: Subset<T, AlterationTaskType$jobPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlterationTaskType model
   */
  interface AlterationTaskTypeFieldRefs {
    readonly id: FieldRef<"AlterationTaskType", 'Int'>
    readonly name: FieldRef<"AlterationTaskType", 'String'>
    readonly defaultDuration: FieldRef<"AlterationTaskType", 'Int'>
    readonly parts: FieldRef<"AlterationTaskType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AlterationTaskType findUnique
   */
  export type AlterationTaskTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter, which AlterationTaskType to fetch.
     */
    where: AlterationTaskTypeWhereUniqueInput
  }

  /**
   * AlterationTaskType findUniqueOrThrow
   */
  export type AlterationTaskTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter, which AlterationTaskType to fetch.
     */
    where: AlterationTaskTypeWhereUniqueInput
  }

  /**
   * AlterationTaskType findFirst
   */
  export type AlterationTaskTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter, which AlterationTaskType to fetch.
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationTaskTypes to fetch.
     */
    orderBy?: AlterationTaskTypeOrderByWithRelationInput | AlterationTaskTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationTaskTypes.
     */
    cursor?: AlterationTaskTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationTaskTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationTaskTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationTaskTypes.
     */
    distinct?: AlterationTaskTypeScalarFieldEnum | AlterationTaskTypeScalarFieldEnum[]
  }

  /**
   * AlterationTaskType findFirstOrThrow
   */
  export type AlterationTaskTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter, which AlterationTaskType to fetch.
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationTaskTypes to fetch.
     */
    orderBy?: AlterationTaskTypeOrderByWithRelationInput | AlterationTaskTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationTaskTypes.
     */
    cursor?: AlterationTaskTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationTaskTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationTaskTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationTaskTypes.
     */
    distinct?: AlterationTaskTypeScalarFieldEnum | AlterationTaskTypeScalarFieldEnum[]
  }

  /**
   * AlterationTaskType findMany
   */
  export type AlterationTaskTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter, which AlterationTaskTypes to fetch.
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationTaskTypes to fetch.
     */
    orderBy?: AlterationTaskTypeOrderByWithRelationInput | AlterationTaskTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlterationTaskTypes.
     */
    cursor?: AlterationTaskTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationTaskTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationTaskTypes.
     */
    skip?: number
    distinct?: AlterationTaskTypeScalarFieldEnum | AlterationTaskTypeScalarFieldEnum[]
  }

  /**
   * AlterationTaskType create
   */
  export type AlterationTaskTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a AlterationTaskType.
     */
    data: XOR<AlterationTaskTypeCreateInput, AlterationTaskTypeUncheckedCreateInput>
  }

  /**
   * AlterationTaskType createMany
   */
  export type AlterationTaskTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlterationTaskTypes.
     */
    data: AlterationTaskTypeCreateManyInput | AlterationTaskTypeCreateManyInput[]
  }

  /**
   * AlterationTaskType createManyAndReturn
   */
  export type AlterationTaskTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * The data used to create many AlterationTaskTypes.
     */
    data: AlterationTaskTypeCreateManyInput | AlterationTaskTypeCreateManyInput[]
  }

  /**
   * AlterationTaskType update
   */
  export type AlterationTaskTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a AlterationTaskType.
     */
    data: XOR<AlterationTaskTypeUpdateInput, AlterationTaskTypeUncheckedUpdateInput>
    /**
     * Choose, which AlterationTaskType to update.
     */
    where: AlterationTaskTypeWhereUniqueInput
  }

  /**
   * AlterationTaskType updateMany
   */
  export type AlterationTaskTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlterationTaskTypes.
     */
    data: XOR<AlterationTaskTypeUpdateManyMutationInput, AlterationTaskTypeUncheckedUpdateManyInput>
    /**
     * Filter which AlterationTaskTypes to update
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * Limit how many AlterationTaskTypes to update.
     */
    limit?: number
  }

  /**
   * AlterationTaskType updateManyAndReturn
   */
  export type AlterationTaskTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * The data used to update AlterationTaskTypes.
     */
    data: XOR<AlterationTaskTypeUpdateManyMutationInput, AlterationTaskTypeUncheckedUpdateManyInput>
    /**
     * Filter which AlterationTaskTypes to update
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * Limit how many AlterationTaskTypes to update.
     */
    limit?: number
  }

  /**
   * AlterationTaskType upsert
   */
  export type AlterationTaskTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the AlterationTaskType to update in case it exists.
     */
    where: AlterationTaskTypeWhereUniqueInput
    /**
     * In case the AlterationTaskType found by the `where` argument doesn't exist, create a new AlterationTaskType with this data.
     */
    create: XOR<AlterationTaskTypeCreateInput, AlterationTaskTypeUncheckedCreateInput>
    /**
     * In case the AlterationTaskType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlterationTaskTypeUpdateInput, AlterationTaskTypeUncheckedUpdateInput>
  }

  /**
   * AlterationTaskType delete
   */
  export type AlterationTaskTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
    /**
     * Filter which AlterationTaskType to delete.
     */
    where: AlterationTaskTypeWhereUniqueInput
  }

  /**
   * AlterationTaskType deleteMany
   */
  export type AlterationTaskTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationTaskTypes to delete
     */
    where?: AlterationTaskTypeWhereInput
    /**
     * Limit how many AlterationTaskTypes to delete.
     */
    limit?: number
  }

  /**
   * AlterationTaskType.abilities
   */
  export type AlterationTaskType$abilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    where?: TailorAbilityWhereInput
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    cursor?: TailorAbilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TailorAbilityScalarFieldEnum | TailorAbilityScalarFieldEnum[]
  }

  /**
   * AlterationTaskType.jobParts
   */
  export type AlterationTaskType$jobPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    where?: AlterationJobPartWhereInput
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    cursor?: AlterationJobPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * AlterationTaskType without action
   */
  export type AlterationTaskTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationTaskType
     */
    select?: AlterationTaskTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationTaskType
     */
    omit?: AlterationTaskTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationTaskTypeInclude<ExtArgs> | null
  }


  /**
   * Model TailorAbility
   */

  export type AggregateTailorAbility = {
    _count: TailorAbilityCountAggregateOutputType | null
    _avg: TailorAbilityAvgAggregateOutputType | null
    _sum: TailorAbilitySumAggregateOutputType | null
    _min: TailorAbilityMinAggregateOutputType | null
    _max: TailorAbilityMaxAggregateOutputType | null
  }

  export type TailorAbilityAvgAggregateOutputType = {
    id: number | null
    tailorId: number | null
    taskTypeId: number | null
    proficiency: number | null
  }

  export type TailorAbilitySumAggregateOutputType = {
    id: number | null
    tailorId: number | null
    taskTypeId: number | null
    proficiency: number | null
  }

  export type TailorAbilityMinAggregateOutputType = {
    id: number | null
    tailorId: number | null
    taskTypeId: number | null
    proficiency: number | null
  }

  export type TailorAbilityMaxAggregateOutputType = {
    id: number | null
    tailorId: number | null
    taskTypeId: number | null
    proficiency: number | null
  }

  export type TailorAbilityCountAggregateOutputType = {
    id: number
    tailorId: number
    taskTypeId: number
    proficiency: number
    _all: number
  }


  export type TailorAbilityAvgAggregateInputType = {
    id?: true
    tailorId?: true
    taskTypeId?: true
    proficiency?: true
  }

  export type TailorAbilitySumAggregateInputType = {
    id?: true
    tailorId?: true
    taskTypeId?: true
    proficiency?: true
  }

  export type TailorAbilityMinAggregateInputType = {
    id?: true
    tailorId?: true
    taskTypeId?: true
    proficiency?: true
  }

  export type TailorAbilityMaxAggregateInputType = {
    id?: true
    tailorId?: true
    taskTypeId?: true
    proficiency?: true
  }

  export type TailorAbilityCountAggregateInputType = {
    id?: true
    tailorId?: true
    taskTypeId?: true
    proficiency?: true
    _all?: true
  }

  export type TailorAbilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TailorAbility to aggregate.
     */
    where?: TailorAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorAbilities to fetch.
     */
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TailorAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TailorAbilities
    **/
    _count?: true | TailorAbilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TailorAbilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TailorAbilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TailorAbilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TailorAbilityMaxAggregateInputType
  }

  export type GetTailorAbilityAggregateType<T extends TailorAbilityAggregateArgs> = {
        [P in keyof T & keyof AggregateTailorAbility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTailorAbility[P]>
      : GetScalarType<T[P], AggregateTailorAbility[P]>
  }




  export type TailorAbilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TailorAbilityWhereInput
    orderBy?: TailorAbilityOrderByWithAggregationInput | TailorAbilityOrderByWithAggregationInput[]
    by: TailorAbilityScalarFieldEnum[] | TailorAbilityScalarFieldEnum
    having?: TailorAbilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TailorAbilityCountAggregateInputType | true
    _avg?: TailorAbilityAvgAggregateInputType
    _sum?: TailorAbilitySumAggregateInputType
    _min?: TailorAbilityMinAggregateInputType
    _max?: TailorAbilityMaxAggregateInputType
  }

  export type TailorAbilityGroupByOutputType = {
    id: number
    tailorId: number
    taskTypeId: number
    proficiency: number
    _count: TailorAbilityCountAggregateOutputType | null
    _avg: TailorAbilityAvgAggregateOutputType | null
    _sum: TailorAbilitySumAggregateOutputType | null
    _min: TailorAbilityMinAggregateOutputType | null
    _max: TailorAbilityMaxAggregateOutputType | null
  }

  type GetTailorAbilityGroupByPayload<T extends TailorAbilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TailorAbilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TailorAbilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TailorAbilityGroupByOutputType[P]>
            : GetScalarType<T[P], TailorAbilityGroupByOutputType[P]>
        }
      >
    >


  export type TailorAbilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    taskTypeId?: boolean
    proficiency?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorAbility"]>

  export type TailorAbilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    taskTypeId?: boolean
    proficiency?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorAbility"]>

  export type TailorAbilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    taskTypeId?: boolean
    proficiency?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorAbility"]>

  export type TailorAbilitySelectScalar = {
    id?: boolean
    tailorId?: boolean
    taskTypeId?: boolean
    proficiency?: boolean
  }

  export type TailorAbilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tailorId" | "taskTypeId" | "proficiency", ExtArgs["result"]["tailorAbility"]>
  export type TailorAbilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }
  export type TailorAbilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }
  export type TailorAbilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
  }

  export type $TailorAbilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TailorAbility"
    objects: {
      tailor: Prisma.$UserPayload<ExtArgs>
      taskType: Prisma.$AlterationTaskTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tailorId: number
      taskTypeId: number
      proficiency: number
    }, ExtArgs["result"]["tailorAbility"]>
    composites: {}
  }

  type TailorAbilityGetPayload<S extends boolean | null | undefined | TailorAbilityDefaultArgs> = $Result.GetResult<Prisma.$TailorAbilityPayload, S>

  type TailorAbilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TailorAbilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TailorAbilityCountAggregateInputType | true
    }

  export interface TailorAbilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TailorAbility'], meta: { name: 'TailorAbility' } }
    /**
     * Find zero or one TailorAbility that matches the filter.
     * @param {TailorAbilityFindUniqueArgs} args - Arguments to find a TailorAbility
     * @example
     * // Get one TailorAbility
     * const tailorAbility = await prisma.tailorAbility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TailorAbilityFindUniqueArgs>(args: SelectSubset<T, TailorAbilityFindUniqueArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TailorAbility that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TailorAbilityFindUniqueOrThrowArgs} args - Arguments to find a TailorAbility
     * @example
     * // Get one TailorAbility
     * const tailorAbility = await prisma.tailorAbility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TailorAbilityFindUniqueOrThrowArgs>(args: SelectSubset<T, TailorAbilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TailorAbility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityFindFirstArgs} args - Arguments to find a TailorAbility
     * @example
     * // Get one TailorAbility
     * const tailorAbility = await prisma.tailorAbility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TailorAbilityFindFirstArgs>(args?: SelectSubset<T, TailorAbilityFindFirstArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TailorAbility that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityFindFirstOrThrowArgs} args - Arguments to find a TailorAbility
     * @example
     * // Get one TailorAbility
     * const tailorAbility = await prisma.tailorAbility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TailorAbilityFindFirstOrThrowArgs>(args?: SelectSubset<T, TailorAbilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TailorAbilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TailorAbilities
     * const tailorAbilities = await prisma.tailorAbility.findMany()
     * 
     * // Get first 10 TailorAbilities
     * const tailorAbilities = await prisma.tailorAbility.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tailorAbilityWithIdOnly = await prisma.tailorAbility.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TailorAbilityFindManyArgs>(args?: SelectSubset<T, TailorAbilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TailorAbility.
     * @param {TailorAbilityCreateArgs} args - Arguments to create a TailorAbility.
     * @example
     * // Create one TailorAbility
     * const TailorAbility = await prisma.tailorAbility.create({
     *   data: {
     *     // ... data to create a TailorAbility
     *   }
     * })
     * 
     */
    create<T extends TailorAbilityCreateArgs>(args: SelectSubset<T, TailorAbilityCreateArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TailorAbilities.
     * @param {TailorAbilityCreateManyArgs} args - Arguments to create many TailorAbilities.
     * @example
     * // Create many TailorAbilities
     * const tailorAbility = await prisma.tailorAbility.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TailorAbilityCreateManyArgs>(args?: SelectSubset<T, TailorAbilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TailorAbilities and returns the data saved in the database.
     * @param {TailorAbilityCreateManyAndReturnArgs} args - Arguments to create many TailorAbilities.
     * @example
     * // Create many TailorAbilities
     * const tailorAbility = await prisma.tailorAbility.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TailorAbilities and only return the `id`
     * const tailorAbilityWithIdOnly = await prisma.tailorAbility.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TailorAbilityCreateManyAndReturnArgs>(args?: SelectSubset<T, TailorAbilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TailorAbility.
     * @param {TailorAbilityDeleteArgs} args - Arguments to delete one TailorAbility.
     * @example
     * // Delete one TailorAbility
     * const TailorAbility = await prisma.tailorAbility.delete({
     *   where: {
     *     // ... filter to delete one TailorAbility
     *   }
     * })
     * 
     */
    delete<T extends TailorAbilityDeleteArgs>(args: SelectSubset<T, TailorAbilityDeleteArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TailorAbility.
     * @param {TailorAbilityUpdateArgs} args - Arguments to update one TailorAbility.
     * @example
     * // Update one TailorAbility
     * const tailorAbility = await prisma.tailorAbility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TailorAbilityUpdateArgs>(args: SelectSubset<T, TailorAbilityUpdateArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TailorAbilities.
     * @param {TailorAbilityDeleteManyArgs} args - Arguments to filter TailorAbilities to delete.
     * @example
     * // Delete a few TailorAbilities
     * const { count } = await prisma.tailorAbility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TailorAbilityDeleteManyArgs>(args?: SelectSubset<T, TailorAbilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TailorAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TailorAbilities
     * const tailorAbility = await prisma.tailorAbility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TailorAbilityUpdateManyArgs>(args: SelectSubset<T, TailorAbilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TailorAbilities and returns the data updated in the database.
     * @param {TailorAbilityUpdateManyAndReturnArgs} args - Arguments to update many TailorAbilities.
     * @example
     * // Update many TailorAbilities
     * const tailorAbility = await prisma.tailorAbility.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TailorAbilities and only return the `id`
     * const tailorAbilityWithIdOnly = await prisma.tailorAbility.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TailorAbilityUpdateManyAndReturnArgs>(args: SelectSubset<T, TailorAbilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TailorAbility.
     * @param {TailorAbilityUpsertArgs} args - Arguments to update or create a TailorAbility.
     * @example
     * // Update or create a TailorAbility
     * const tailorAbility = await prisma.tailorAbility.upsert({
     *   create: {
     *     // ... data to create a TailorAbility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TailorAbility we want to update
     *   }
     * })
     */
    upsert<T extends TailorAbilityUpsertArgs>(args: SelectSubset<T, TailorAbilityUpsertArgs<ExtArgs>>): Prisma__TailorAbilityClient<$Result.GetResult<Prisma.$TailorAbilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TailorAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityCountArgs} args - Arguments to filter TailorAbilities to count.
     * @example
     * // Count the number of TailorAbilities
     * const count = await prisma.tailorAbility.count({
     *   where: {
     *     // ... the filter for the TailorAbilities we want to count
     *   }
     * })
    **/
    count<T extends TailorAbilityCountArgs>(
      args?: Subset<T, TailorAbilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TailorAbilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TailorAbility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TailorAbilityAggregateArgs>(args: Subset<T, TailorAbilityAggregateArgs>): Prisma.PrismaPromise<GetTailorAbilityAggregateType<T>>

    /**
     * Group by TailorAbility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorAbilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TailorAbilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TailorAbilityGroupByArgs['orderBy'] }
        : { orderBy?: TailorAbilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TailorAbilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTailorAbilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TailorAbility model
   */
  readonly fields: TailorAbilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TailorAbility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TailorAbilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tailor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    taskType<T extends AlterationTaskTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlterationTaskTypeDefaultArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TailorAbility model
   */
  interface TailorAbilityFieldRefs {
    readonly id: FieldRef<"TailorAbility", 'Int'>
    readonly tailorId: FieldRef<"TailorAbility", 'Int'>
    readonly taskTypeId: FieldRef<"TailorAbility", 'Int'>
    readonly proficiency: FieldRef<"TailorAbility", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TailorAbility findUnique
   */
  export type TailorAbilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter, which TailorAbility to fetch.
     */
    where: TailorAbilityWhereUniqueInput
  }

  /**
   * TailorAbility findUniqueOrThrow
   */
  export type TailorAbilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter, which TailorAbility to fetch.
     */
    where: TailorAbilityWhereUniqueInput
  }

  /**
   * TailorAbility findFirst
   */
  export type TailorAbilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter, which TailorAbility to fetch.
     */
    where?: TailorAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorAbilities to fetch.
     */
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TailorAbilities.
     */
    cursor?: TailorAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TailorAbilities.
     */
    distinct?: TailorAbilityScalarFieldEnum | TailorAbilityScalarFieldEnum[]
  }

  /**
   * TailorAbility findFirstOrThrow
   */
  export type TailorAbilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter, which TailorAbility to fetch.
     */
    where?: TailorAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorAbilities to fetch.
     */
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TailorAbilities.
     */
    cursor?: TailorAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TailorAbilities.
     */
    distinct?: TailorAbilityScalarFieldEnum | TailorAbilityScalarFieldEnum[]
  }

  /**
   * TailorAbility findMany
   */
  export type TailorAbilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter, which TailorAbilities to fetch.
     */
    where?: TailorAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorAbilities to fetch.
     */
    orderBy?: TailorAbilityOrderByWithRelationInput | TailorAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TailorAbilities.
     */
    cursor?: TailorAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorAbilities.
     */
    skip?: number
    distinct?: TailorAbilityScalarFieldEnum | TailorAbilityScalarFieldEnum[]
  }

  /**
   * TailorAbility create
   */
  export type TailorAbilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * The data needed to create a TailorAbility.
     */
    data: XOR<TailorAbilityCreateInput, TailorAbilityUncheckedCreateInput>
  }

  /**
   * TailorAbility createMany
   */
  export type TailorAbilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TailorAbilities.
     */
    data: TailorAbilityCreateManyInput | TailorAbilityCreateManyInput[]
  }

  /**
   * TailorAbility createManyAndReturn
   */
  export type TailorAbilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * The data used to create many TailorAbilities.
     */
    data: TailorAbilityCreateManyInput | TailorAbilityCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TailorAbility update
   */
  export type TailorAbilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * The data needed to update a TailorAbility.
     */
    data: XOR<TailorAbilityUpdateInput, TailorAbilityUncheckedUpdateInput>
    /**
     * Choose, which TailorAbility to update.
     */
    where: TailorAbilityWhereUniqueInput
  }

  /**
   * TailorAbility updateMany
   */
  export type TailorAbilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TailorAbilities.
     */
    data: XOR<TailorAbilityUpdateManyMutationInput, TailorAbilityUncheckedUpdateManyInput>
    /**
     * Filter which TailorAbilities to update
     */
    where?: TailorAbilityWhereInput
    /**
     * Limit how many TailorAbilities to update.
     */
    limit?: number
  }

  /**
   * TailorAbility updateManyAndReturn
   */
  export type TailorAbilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * The data used to update TailorAbilities.
     */
    data: XOR<TailorAbilityUpdateManyMutationInput, TailorAbilityUncheckedUpdateManyInput>
    /**
     * Filter which TailorAbilities to update
     */
    where?: TailorAbilityWhereInput
    /**
     * Limit how many TailorAbilities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TailorAbility upsert
   */
  export type TailorAbilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * The filter to search for the TailorAbility to update in case it exists.
     */
    where: TailorAbilityWhereUniqueInput
    /**
     * In case the TailorAbility found by the `where` argument doesn't exist, create a new TailorAbility with this data.
     */
    create: XOR<TailorAbilityCreateInput, TailorAbilityUncheckedCreateInput>
    /**
     * In case the TailorAbility was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TailorAbilityUpdateInput, TailorAbilityUncheckedUpdateInput>
  }

  /**
   * TailorAbility delete
   */
  export type TailorAbilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
    /**
     * Filter which TailorAbility to delete.
     */
    where: TailorAbilityWhereUniqueInput
  }

  /**
   * TailorAbility deleteMany
   */
  export type TailorAbilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TailorAbilities to delete
     */
    where?: TailorAbilityWhereInput
    /**
     * Limit how many TailorAbilities to delete.
     */
    limit?: number
  }

  /**
   * TailorAbility without action
   */
  export type TailorAbilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorAbility
     */
    select?: TailorAbilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorAbility
     */
    omit?: TailorAbilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorAbilityInclude<ExtArgs> | null
  }


  /**
   * Model TailorSchedule
   */

  export type AggregateTailorSchedule = {
    _count: TailorScheduleCountAggregateOutputType | null
    _avg: TailorScheduleAvgAggregateOutputType | null
    _sum: TailorScheduleSumAggregateOutputType | null
    _min: TailorScheduleMinAggregateOutputType | null
    _max: TailorScheduleMaxAggregateOutputType | null
  }

  export type TailorScheduleAvgAggregateOutputType = {
    id: number | null
    tailorId: number | null
    dayOfWeek: number | null
  }

  export type TailorScheduleSumAggregateOutputType = {
    id: number | null
    tailorId: number | null
    dayOfWeek: number | null
  }

  export type TailorScheduleMinAggregateOutputType = {
    id: number | null
    tailorId: number | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
  }

  export type TailorScheduleMaxAggregateOutputType = {
    id: number | null
    tailorId: number | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
  }

  export type TailorScheduleCountAggregateOutputType = {
    id: number
    tailorId: number
    dayOfWeek: number
    startTime: number
    endTime: number
    _all: number
  }


  export type TailorScheduleAvgAggregateInputType = {
    id?: true
    tailorId?: true
    dayOfWeek?: true
  }

  export type TailorScheduleSumAggregateInputType = {
    id?: true
    tailorId?: true
    dayOfWeek?: true
  }

  export type TailorScheduleMinAggregateInputType = {
    id?: true
    tailorId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
  }

  export type TailorScheduleMaxAggregateInputType = {
    id?: true
    tailorId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
  }

  export type TailorScheduleCountAggregateInputType = {
    id?: true
    tailorId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    _all?: true
  }

  export type TailorScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TailorSchedule to aggregate.
     */
    where?: TailorScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorSchedules to fetch.
     */
    orderBy?: TailorScheduleOrderByWithRelationInput | TailorScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TailorScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TailorSchedules
    **/
    _count?: true | TailorScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TailorScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TailorScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TailorScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TailorScheduleMaxAggregateInputType
  }

  export type GetTailorScheduleAggregateType<T extends TailorScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateTailorSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTailorSchedule[P]>
      : GetScalarType<T[P], AggregateTailorSchedule[P]>
  }




  export type TailorScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TailorScheduleWhereInput
    orderBy?: TailorScheduleOrderByWithAggregationInput | TailorScheduleOrderByWithAggregationInput[]
    by: TailorScheduleScalarFieldEnum[] | TailorScheduleScalarFieldEnum
    having?: TailorScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TailorScheduleCountAggregateInputType | true
    _avg?: TailorScheduleAvgAggregateInputType
    _sum?: TailorScheduleSumAggregateInputType
    _min?: TailorScheduleMinAggregateInputType
    _max?: TailorScheduleMaxAggregateInputType
  }

  export type TailorScheduleGroupByOutputType = {
    id: number
    tailorId: number
    dayOfWeek: number
    startTime: string
    endTime: string
    _count: TailorScheduleCountAggregateOutputType | null
    _avg: TailorScheduleAvgAggregateOutputType | null
    _sum: TailorScheduleSumAggregateOutputType | null
    _min: TailorScheduleMinAggregateOutputType | null
    _max: TailorScheduleMaxAggregateOutputType | null
  }

  type GetTailorScheduleGroupByPayload<T extends TailorScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TailorScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TailorScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TailorScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], TailorScheduleGroupByOutputType[P]>
        }
      >
    >


  export type TailorScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorSchedule"]>

  export type TailorScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorSchedule"]>

  export type TailorScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tailorId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tailorSchedule"]>

  export type TailorScheduleSelectScalar = {
    id?: boolean
    tailorId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
  }

  export type TailorScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tailorId" | "dayOfWeek" | "startTime" | "endTime", ExtArgs["result"]["tailorSchedule"]>
  export type TailorScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TailorScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TailorScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tailor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TailorSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TailorSchedule"
    objects: {
      tailor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tailorId: number
      dayOfWeek: number
      startTime: string
      endTime: string
    }, ExtArgs["result"]["tailorSchedule"]>
    composites: {}
  }

  type TailorScheduleGetPayload<S extends boolean | null | undefined | TailorScheduleDefaultArgs> = $Result.GetResult<Prisma.$TailorSchedulePayload, S>

  type TailorScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TailorScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TailorScheduleCountAggregateInputType | true
    }

  export interface TailorScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TailorSchedule'], meta: { name: 'TailorSchedule' } }
    /**
     * Find zero or one TailorSchedule that matches the filter.
     * @param {TailorScheduleFindUniqueArgs} args - Arguments to find a TailorSchedule
     * @example
     * // Get one TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TailorScheduleFindUniqueArgs>(args: SelectSubset<T, TailorScheduleFindUniqueArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TailorSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TailorScheduleFindUniqueOrThrowArgs} args - Arguments to find a TailorSchedule
     * @example
     * // Get one TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TailorScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, TailorScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TailorSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleFindFirstArgs} args - Arguments to find a TailorSchedule
     * @example
     * // Get one TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TailorScheduleFindFirstArgs>(args?: SelectSubset<T, TailorScheduleFindFirstArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TailorSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleFindFirstOrThrowArgs} args - Arguments to find a TailorSchedule
     * @example
     * // Get one TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TailorScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, TailorScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TailorSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TailorSchedules
     * const tailorSchedules = await prisma.tailorSchedule.findMany()
     * 
     * // Get first 10 TailorSchedules
     * const tailorSchedules = await prisma.tailorSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tailorScheduleWithIdOnly = await prisma.tailorSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TailorScheduleFindManyArgs>(args?: SelectSubset<T, TailorScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TailorSchedule.
     * @param {TailorScheduleCreateArgs} args - Arguments to create a TailorSchedule.
     * @example
     * // Create one TailorSchedule
     * const TailorSchedule = await prisma.tailorSchedule.create({
     *   data: {
     *     // ... data to create a TailorSchedule
     *   }
     * })
     * 
     */
    create<T extends TailorScheduleCreateArgs>(args: SelectSubset<T, TailorScheduleCreateArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TailorSchedules.
     * @param {TailorScheduleCreateManyArgs} args - Arguments to create many TailorSchedules.
     * @example
     * // Create many TailorSchedules
     * const tailorSchedule = await prisma.tailorSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TailorScheduleCreateManyArgs>(args?: SelectSubset<T, TailorScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TailorSchedules and returns the data saved in the database.
     * @param {TailorScheduleCreateManyAndReturnArgs} args - Arguments to create many TailorSchedules.
     * @example
     * // Create many TailorSchedules
     * const tailorSchedule = await prisma.tailorSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TailorSchedules and only return the `id`
     * const tailorScheduleWithIdOnly = await prisma.tailorSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TailorScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, TailorScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TailorSchedule.
     * @param {TailorScheduleDeleteArgs} args - Arguments to delete one TailorSchedule.
     * @example
     * // Delete one TailorSchedule
     * const TailorSchedule = await prisma.tailorSchedule.delete({
     *   where: {
     *     // ... filter to delete one TailorSchedule
     *   }
     * })
     * 
     */
    delete<T extends TailorScheduleDeleteArgs>(args: SelectSubset<T, TailorScheduleDeleteArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TailorSchedule.
     * @param {TailorScheduleUpdateArgs} args - Arguments to update one TailorSchedule.
     * @example
     * // Update one TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TailorScheduleUpdateArgs>(args: SelectSubset<T, TailorScheduleUpdateArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TailorSchedules.
     * @param {TailorScheduleDeleteManyArgs} args - Arguments to filter TailorSchedules to delete.
     * @example
     * // Delete a few TailorSchedules
     * const { count } = await prisma.tailorSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TailorScheduleDeleteManyArgs>(args?: SelectSubset<T, TailorScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TailorSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TailorSchedules
     * const tailorSchedule = await prisma.tailorSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TailorScheduleUpdateManyArgs>(args: SelectSubset<T, TailorScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TailorSchedules and returns the data updated in the database.
     * @param {TailorScheduleUpdateManyAndReturnArgs} args - Arguments to update many TailorSchedules.
     * @example
     * // Update many TailorSchedules
     * const tailorSchedule = await prisma.tailorSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TailorSchedules and only return the `id`
     * const tailorScheduleWithIdOnly = await prisma.tailorSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TailorScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, TailorScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TailorSchedule.
     * @param {TailorScheduleUpsertArgs} args - Arguments to update or create a TailorSchedule.
     * @example
     * // Update or create a TailorSchedule
     * const tailorSchedule = await prisma.tailorSchedule.upsert({
     *   create: {
     *     // ... data to create a TailorSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TailorSchedule we want to update
     *   }
     * })
     */
    upsert<T extends TailorScheduleUpsertArgs>(args: SelectSubset<T, TailorScheduleUpsertArgs<ExtArgs>>): Prisma__TailorScheduleClient<$Result.GetResult<Prisma.$TailorSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TailorSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleCountArgs} args - Arguments to filter TailorSchedules to count.
     * @example
     * // Count the number of TailorSchedules
     * const count = await prisma.tailorSchedule.count({
     *   where: {
     *     // ... the filter for the TailorSchedules we want to count
     *   }
     * })
    **/
    count<T extends TailorScheduleCountArgs>(
      args?: Subset<T, TailorScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TailorScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TailorSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TailorScheduleAggregateArgs>(args: Subset<T, TailorScheduleAggregateArgs>): Prisma.PrismaPromise<GetTailorScheduleAggregateType<T>>

    /**
     * Group by TailorSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TailorScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TailorScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TailorScheduleGroupByArgs['orderBy'] }
        : { orderBy?: TailorScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TailorScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTailorScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TailorSchedule model
   */
  readonly fields: TailorScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TailorSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TailorScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tailor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TailorSchedule model
   */
  interface TailorScheduleFieldRefs {
    readonly id: FieldRef<"TailorSchedule", 'Int'>
    readonly tailorId: FieldRef<"TailorSchedule", 'Int'>
    readonly dayOfWeek: FieldRef<"TailorSchedule", 'Int'>
    readonly startTime: FieldRef<"TailorSchedule", 'String'>
    readonly endTime: FieldRef<"TailorSchedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TailorSchedule findUnique
   */
  export type TailorScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TailorSchedule to fetch.
     */
    where: TailorScheduleWhereUniqueInput
  }

  /**
   * TailorSchedule findUniqueOrThrow
   */
  export type TailorScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TailorSchedule to fetch.
     */
    where: TailorScheduleWhereUniqueInput
  }

  /**
   * TailorSchedule findFirst
   */
  export type TailorScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TailorSchedule to fetch.
     */
    where?: TailorScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorSchedules to fetch.
     */
    orderBy?: TailorScheduleOrderByWithRelationInput | TailorScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TailorSchedules.
     */
    cursor?: TailorScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TailorSchedules.
     */
    distinct?: TailorScheduleScalarFieldEnum | TailorScheduleScalarFieldEnum[]
  }

  /**
   * TailorSchedule findFirstOrThrow
   */
  export type TailorScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TailorSchedule to fetch.
     */
    where?: TailorScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorSchedules to fetch.
     */
    orderBy?: TailorScheduleOrderByWithRelationInput | TailorScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TailorSchedules.
     */
    cursor?: TailorScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TailorSchedules.
     */
    distinct?: TailorScheduleScalarFieldEnum | TailorScheduleScalarFieldEnum[]
  }

  /**
   * TailorSchedule findMany
   */
  export type TailorScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter, which TailorSchedules to fetch.
     */
    where?: TailorScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TailorSchedules to fetch.
     */
    orderBy?: TailorScheduleOrderByWithRelationInput | TailorScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TailorSchedules.
     */
    cursor?: TailorScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TailorSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TailorSchedules.
     */
    skip?: number
    distinct?: TailorScheduleScalarFieldEnum | TailorScheduleScalarFieldEnum[]
  }

  /**
   * TailorSchedule create
   */
  export type TailorScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a TailorSchedule.
     */
    data: XOR<TailorScheduleCreateInput, TailorScheduleUncheckedCreateInput>
  }

  /**
   * TailorSchedule createMany
   */
  export type TailorScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TailorSchedules.
     */
    data: TailorScheduleCreateManyInput | TailorScheduleCreateManyInput[]
  }

  /**
   * TailorSchedule createManyAndReturn
   */
  export type TailorScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many TailorSchedules.
     */
    data: TailorScheduleCreateManyInput | TailorScheduleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TailorSchedule update
   */
  export type TailorScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a TailorSchedule.
     */
    data: XOR<TailorScheduleUpdateInput, TailorScheduleUncheckedUpdateInput>
    /**
     * Choose, which TailorSchedule to update.
     */
    where: TailorScheduleWhereUniqueInput
  }

  /**
   * TailorSchedule updateMany
   */
  export type TailorScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TailorSchedules.
     */
    data: XOR<TailorScheduleUpdateManyMutationInput, TailorScheduleUncheckedUpdateManyInput>
    /**
     * Filter which TailorSchedules to update
     */
    where?: TailorScheduleWhereInput
    /**
     * Limit how many TailorSchedules to update.
     */
    limit?: number
  }

  /**
   * TailorSchedule updateManyAndReturn
   */
  export type TailorScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * The data used to update TailorSchedules.
     */
    data: XOR<TailorScheduleUpdateManyMutationInput, TailorScheduleUncheckedUpdateManyInput>
    /**
     * Filter which TailorSchedules to update
     */
    where?: TailorScheduleWhereInput
    /**
     * Limit how many TailorSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TailorSchedule upsert
   */
  export type TailorScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the TailorSchedule to update in case it exists.
     */
    where: TailorScheduleWhereUniqueInput
    /**
     * In case the TailorSchedule found by the `where` argument doesn't exist, create a new TailorSchedule with this data.
     */
    create: XOR<TailorScheduleCreateInput, TailorScheduleUncheckedCreateInput>
    /**
     * In case the TailorSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TailorScheduleUpdateInput, TailorScheduleUncheckedUpdateInput>
  }

  /**
   * TailorSchedule delete
   */
  export type TailorScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
    /**
     * Filter which TailorSchedule to delete.
     */
    where: TailorScheduleWhereUniqueInput
  }

  /**
   * TailorSchedule deleteMany
   */
  export type TailorScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TailorSchedules to delete
     */
    where?: TailorScheduleWhereInput
    /**
     * Limit how many TailorSchedules to delete.
     */
    limit?: number
  }

  /**
   * TailorSchedule without action
   */
  export type TailorScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TailorSchedule
     */
    select?: TailorScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TailorSchedule
     */
    omit?: TailorScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TailorScheduleInclude<ExtArgs> | null
  }


  /**
   * Model AlterationJobPart
   */

  export type AggregateAlterationJobPart = {
    _count: AlterationJobPartCountAggregateOutputType | null
    _avg: AlterationJobPartAvgAggregateOutputType | null
    _sum: AlterationJobPartSumAggregateOutputType | null
    _min: AlterationJobPartMinAggregateOutputType | null
    _max: AlterationJobPartMaxAggregateOutputType | null
  }

  export type AlterationJobPartAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    taskTypeId: number | null
    assignedTailorId: number | null
    duration: number | null
  }

  export type AlterationJobPartSumAggregateOutputType = {
    id: number | null
    jobId: number | null
    taskTypeId: number | null
    assignedTailorId: number | null
    duration: number | null
  }

  export type AlterationJobPartMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    part: string | null
    taskTypeId: number | null
    assignedTailorId: number | null
    scheduledTime: Date | null
    duration: number | null
    status: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlterationJobPartMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    part: string | null
    taskTypeId: number | null
    assignedTailorId: number | null
    scheduledTime: Date | null
    duration: number | null
    status: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlterationJobPartCountAggregateOutputType = {
    id: number
    jobId: number
    part: number
    taskTypeId: number
    assignedTailorId: number
    scheduledTime: number
    duration: number
    status: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlterationJobPartAvgAggregateInputType = {
    id?: true
    jobId?: true
    taskTypeId?: true
    assignedTailorId?: true
    duration?: true
  }

  export type AlterationJobPartSumAggregateInputType = {
    id?: true
    jobId?: true
    taskTypeId?: true
    assignedTailorId?: true
    duration?: true
  }

  export type AlterationJobPartMinAggregateInputType = {
    id?: true
    jobId?: true
    part?: true
    taskTypeId?: true
    assignedTailorId?: true
    scheduledTime?: true
    duration?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlterationJobPartMaxAggregateInputType = {
    id?: true
    jobId?: true
    part?: true
    taskTypeId?: true
    assignedTailorId?: true
    scheduledTime?: true
    duration?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlterationJobPartCountAggregateInputType = {
    id?: true
    jobId?: true
    part?: true
    taskTypeId?: true
    assignedTailorId?: true
    scheduledTime?: true
    duration?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlterationJobPartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationJobPart to aggregate.
     */
    where?: AlterationJobPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobParts to fetch.
     */
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlterationJobPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlterationJobParts
    **/
    _count?: true | AlterationJobPartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlterationJobPartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlterationJobPartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlterationJobPartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlterationJobPartMaxAggregateInputType
  }

  export type GetAlterationJobPartAggregateType<T extends AlterationJobPartAggregateArgs> = {
        [P in keyof T & keyof AggregateAlterationJobPart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlterationJobPart[P]>
      : GetScalarType<T[P], AggregateAlterationJobPart[P]>
  }




  export type AlterationJobPartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlterationJobPartWhereInput
    orderBy?: AlterationJobPartOrderByWithAggregationInput | AlterationJobPartOrderByWithAggregationInput[]
    by: AlterationJobPartScalarFieldEnum[] | AlterationJobPartScalarFieldEnum
    having?: AlterationJobPartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlterationJobPartCountAggregateInputType | true
    _avg?: AlterationJobPartAvgAggregateInputType
    _sum?: AlterationJobPartSumAggregateInputType
    _min?: AlterationJobPartMinAggregateInputType
    _max?: AlterationJobPartMaxAggregateInputType
  }

  export type AlterationJobPartGroupByOutputType = {
    id: number
    jobId: number
    part: string
    taskTypeId: number
    assignedTailorId: number | null
    scheduledTime: Date | null
    duration: number | null
    status: string
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AlterationJobPartCountAggregateOutputType | null
    _avg: AlterationJobPartAvgAggregateOutputType | null
    _sum: AlterationJobPartSumAggregateOutputType | null
    _min: AlterationJobPartMinAggregateOutputType | null
    _max: AlterationJobPartMaxAggregateOutputType | null
  }

  type GetAlterationJobPartGroupByPayload<T extends AlterationJobPartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlterationJobPartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlterationJobPartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlterationJobPartGroupByOutputType[P]>
            : GetScalarType<T[P], AlterationJobPartGroupByOutputType[P]>
        }
      >
    >


  export type AlterationJobPartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    part?: boolean
    taskTypeId?: boolean
    assignedTailorId?: boolean
    scheduledTime?: boolean
    duration?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJobPart"]>

  export type AlterationJobPartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    part?: boolean
    taskTypeId?: boolean
    assignedTailorId?: boolean
    scheduledTime?: boolean
    duration?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJobPart"]>

  export type AlterationJobPartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    part?: boolean
    taskTypeId?: boolean
    assignedTailorId?: boolean
    scheduledTime?: boolean
    duration?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }, ExtArgs["result"]["alterationJobPart"]>

  export type AlterationJobPartSelectScalar = {
    id?: boolean
    jobId?: boolean
    part?: boolean
    taskTypeId?: boolean
    assignedTailorId?: boolean
    scheduledTime?: boolean
    duration?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlterationJobPartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "part" | "taskTypeId" | "assignedTailorId" | "scheduledTime" | "duration" | "status" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["alterationJobPart"]>
  export type AlterationJobPartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }
  export type AlterationJobPartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }
  export type AlterationJobPartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | AlterationJobDefaultArgs<ExtArgs>
    taskType?: boolean | AlterationTaskTypeDefaultArgs<ExtArgs>
    assignedTailor?: boolean | AlterationJobPart$assignedTailorArgs<ExtArgs>
  }

  export type $AlterationJobPartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlterationJobPart"
    objects: {
      job: Prisma.$AlterationJobPayload<ExtArgs>
      taskType: Prisma.$AlterationTaskTypePayload<ExtArgs>
      assignedTailor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      part: string
      taskTypeId: number
      assignedTailorId: number | null
      scheduledTime: Date | null
      duration: number | null
      status: string
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alterationJobPart"]>
    composites: {}
  }

  type AlterationJobPartGetPayload<S extends boolean | null | undefined | AlterationJobPartDefaultArgs> = $Result.GetResult<Prisma.$AlterationJobPartPayload, S>

  type AlterationJobPartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlterationJobPartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlterationJobPartCountAggregateInputType | true
    }

  export interface AlterationJobPartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlterationJobPart'], meta: { name: 'AlterationJobPart' } }
    /**
     * Find zero or one AlterationJobPart that matches the filter.
     * @param {AlterationJobPartFindUniqueArgs} args - Arguments to find a AlterationJobPart
     * @example
     * // Get one AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlterationJobPartFindUniqueArgs>(args: SelectSubset<T, AlterationJobPartFindUniqueArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlterationJobPart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlterationJobPartFindUniqueOrThrowArgs} args - Arguments to find a AlterationJobPart
     * @example
     * // Get one AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlterationJobPartFindUniqueOrThrowArgs>(args: SelectSubset<T, AlterationJobPartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationJobPart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartFindFirstArgs} args - Arguments to find a AlterationJobPart
     * @example
     * // Get one AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlterationJobPartFindFirstArgs>(args?: SelectSubset<T, AlterationJobPartFindFirstArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlterationJobPart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartFindFirstOrThrowArgs} args - Arguments to find a AlterationJobPart
     * @example
     * // Get one AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlterationJobPartFindFirstOrThrowArgs>(args?: SelectSubset<T, AlterationJobPartFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlterationJobParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlterationJobParts
     * const alterationJobParts = await prisma.alterationJobPart.findMany()
     * 
     * // Get first 10 AlterationJobParts
     * const alterationJobParts = await prisma.alterationJobPart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alterationJobPartWithIdOnly = await prisma.alterationJobPart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlterationJobPartFindManyArgs>(args?: SelectSubset<T, AlterationJobPartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlterationJobPart.
     * @param {AlterationJobPartCreateArgs} args - Arguments to create a AlterationJobPart.
     * @example
     * // Create one AlterationJobPart
     * const AlterationJobPart = await prisma.alterationJobPart.create({
     *   data: {
     *     // ... data to create a AlterationJobPart
     *   }
     * })
     * 
     */
    create<T extends AlterationJobPartCreateArgs>(args: SelectSubset<T, AlterationJobPartCreateArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlterationJobParts.
     * @param {AlterationJobPartCreateManyArgs} args - Arguments to create many AlterationJobParts.
     * @example
     * // Create many AlterationJobParts
     * const alterationJobPart = await prisma.alterationJobPart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlterationJobPartCreateManyArgs>(args?: SelectSubset<T, AlterationJobPartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlterationJobParts and returns the data saved in the database.
     * @param {AlterationJobPartCreateManyAndReturnArgs} args - Arguments to create many AlterationJobParts.
     * @example
     * // Create many AlterationJobParts
     * const alterationJobPart = await prisma.alterationJobPart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlterationJobParts and only return the `id`
     * const alterationJobPartWithIdOnly = await prisma.alterationJobPart.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlterationJobPartCreateManyAndReturnArgs>(args?: SelectSubset<T, AlterationJobPartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlterationJobPart.
     * @param {AlterationJobPartDeleteArgs} args - Arguments to delete one AlterationJobPart.
     * @example
     * // Delete one AlterationJobPart
     * const AlterationJobPart = await prisma.alterationJobPart.delete({
     *   where: {
     *     // ... filter to delete one AlterationJobPart
     *   }
     * })
     * 
     */
    delete<T extends AlterationJobPartDeleteArgs>(args: SelectSubset<T, AlterationJobPartDeleteArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlterationJobPart.
     * @param {AlterationJobPartUpdateArgs} args - Arguments to update one AlterationJobPart.
     * @example
     * // Update one AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlterationJobPartUpdateArgs>(args: SelectSubset<T, AlterationJobPartUpdateArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlterationJobParts.
     * @param {AlterationJobPartDeleteManyArgs} args - Arguments to filter AlterationJobParts to delete.
     * @example
     * // Delete a few AlterationJobParts
     * const { count } = await prisma.alterationJobPart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlterationJobPartDeleteManyArgs>(args?: SelectSubset<T, AlterationJobPartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationJobParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlterationJobParts
     * const alterationJobPart = await prisma.alterationJobPart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlterationJobPartUpdateManyArgs>(args: SelectSubset<T, AlterationJobPartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlterationJobParts and returns the data updated in the database.
     * @param {AlterationJobPartUpdateManyAndReturnArgs} args - Arguments to update many AlterationJobParts.
     * @example
     * // Update many AlterationJobParts
     * const alterationJobPart = await prisma.alterationJobPart.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlterationJobParts and only return the `id`
     * const alterationJobPartWithIdOnly = await prisma.alterationJobPart.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlterationJobPartUpdateManyAndReturnArgs>(args: SelectSubset<T, AlterationJobPartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlterationJobPart.
     * @param {AlterationJobPartUpsertArgs} args - Arguments to update or create a AlterationJobPart.
     * @example
     * // Update or create a AlterationJobPart
     * const alterationJobPart = await prisma.alterationJobPart.upsert({
     *   create: {
     *     // ... data to create a AlterationJobPart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlterationJobPart we want to update
     *   }
     * })
     */
    upsert<T extends AlterationJobPartUpsertArgs>(args: SelectSubset<T, AlterationJobPartUpsertArgs<ExtArgs>>): Prisma__AlterationJobPartClient<$Result.GetResult<Prisma.$AlterationJobPartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlterationJobParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartCountArgs} args - Arguments to filter AlterationJobParts to count.
     * @example
     * // Count the number of AlterationJobParts
     * const count = await prisma.alterationJobPart.count({
     *   where: {
     *     // ... the filter for the AlterationJobParts we want to count
     *   }
     * })
    **/
    count<T extends AlterationJobPartCountArgs>(
      args?: Subset<T, AlterationJobPartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlterationJobPartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlterationJobPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlterationJobPartAggregateArgs>(args: Subset<T, AlterationJobPartAggregateArgs>): Prisma.PrismaPromise<GetAlterationJobPartAggregateType<T>>

    /**
     * Group by AlterationJobPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlterationJobPartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlterationJobPartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlterationJobPartGroupByArgs['orderBy'] }
        : { orderBy?: AlterationJobPartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlterationJobPartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlterationJobPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlterationJobPart model
   */
  readonly fields: AlterationJobPartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlterationJobPart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlterationJobPartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends AlterationJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJobDefaultArgs<ExtArgs>>): Prisma__AlterationJobClient<$Result.GetResult<Prisma.$AlterationJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    taskType<T extends AlterationTaskTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlterationTaskTypeDefaultArgs<ExtArgs>>): Prisma__AlterationTaskTypeClient<$Result.GetResult<Prisma.$AlterationTaskTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTailor<T extends AlterationJobPart$assignedTailorArgs<ExtArgs> = {}>(args?: Subset<T, AlterationJobPart$assignedTailorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlterationJobPart model
   */
  interface AlterationJobPartFieldRefs {
    readonly id: FieldRef<"AlterationJobPart", 'Int'>
    readonly jobId: FieldRef<"AlterationJobPart", 'Int'>
    readonly part: FieldRef<"AlterationJobPart", 'String'>
    readonly taskTypeId: FieldRef<"AlterationJobPart", 'Int'>
    readonly assignedTailorId: FieldRef<"AlterationJobPart", 'Int'>
    readonly scheduledTime: FieldRef<"AlterationJobPart", 'DateTime'>
    readonly duration: FieldRef<"AlterationJobPart", 'Int'>
    readonly status: FieldRef<"AlterationJobPart", 'String'>
    readonly notes: FieldRef<"AlterationJobPart", 'String'>
    readonly createdAt: FieldRef<"AlterationJobPart", 'DateTime'>
    readonly updatedAt: FieldRef<"AlterationJobPart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlterationJobPart findUnique
   */
  export type AlterationJobPartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobPart to fetch.
     */
    where: AlterationJobPartWhereUniqueInput
  }

  /**
   * AlterationJobPart findUniqueOrThrow
   */
  export type AlterationJobPartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobPart to fetch.
     */
    where: AlterationJobPartWhereUniqueInput
  }

  /**
   * AlterationJobPart findFirst
   */
  export type AlterationJobPartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobPart to fetch.
     */
    where?: AlterationJobPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobParts to fetch.
     */
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationJobParts.
     */
    cursor?: AlterationJobPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationJobParts.
     */
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * AlterationJobPart findFirstOrThrow
   */
  export type AlterationJobPartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobPart to fetch.
     */
    where?: AlterationJobPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobParts to fetch.
     */
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlterationJobParts.
     */
    cursor?: AlterationJobPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlterationJobParts.
     */
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * AlterationJobPart findMany
   */
  export type AlterationJobPartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter, which AlterationJobParts to fetch.
     */
    where?: AlterationJobPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlterationJobParts to fetch.
     */
    orderBy?: AlterationJobPartOrderByWithRelationInput | AlterationJobPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlterationJobParts.
     */
    cursor?: AlterationJobPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlterationJobParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlterationJobParts.
     */
    skip?: number
    distinct?: AlterationJobPartScalarFieldEnum | AlterationJobPartScalarFieldEnum[]
  }

  /**
   * AlterationJobPart create
   */
  export type AlterationJobPartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * The data needed to create a AlterationJobPart.
     */
    data: XOR<AlterationJobPartCreateInput, AlterationJobPartUncheckedCreateInput>
  }

  /**
   * AlterationJobPart createMany
   */
  export type AlterationJobPartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlterationJobParts.
     */
    data: AlterationJobPartCreateManyInput | AlterationJobPartCreateManyInput[]
  }

  /**
   * AlterationJobPart createManyAndReturn
   */
  export type AlterationJobPartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * The data used to create many AlterationJobParts.
     */
    data: AlterationJobPartCreateManyInput | AlterationJobPartCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlterationJobPart update
   */
  export type AlterationJobPartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * The data needed to update a AlterationJobPart.
     */
    data: XOR<AlterationJobPartUpdateInput, AlterationJobPartUncheckedUpdateInput>
    /**
     * Choose, which AlterationJobPart to update.
     */
    where: AlterationJobPartWhereUniqueInput
  }

  /**
   * AlterationJobPart updateMany
   */
  export type AlterationJobPartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlterationJobParts.
     */
    data: XOR<AlterationJobPartUpdateManyMutationInput, AlterationJobPartUncheckedUpdateManyInput>
    /**
     * Filter which AlterationJobParts to update
     */
    where?: AlterationJobPartWhereInput
    /**
     * Limit how many AlterationJobParts to update.
     */
    limit?: number
  }

  /**
   * AlterationJobPart updateManyAndReturn
   */
  export type AlterationJobPartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * The data used to update AlterationJobParts.
     */
    data: XOR<AlterationJobPartUpdateManyMutationInput, AlterationJobPartUncheckedUpdateManyInput>
    /**
     * Filter which AlterationJobParts to update
     */
    where?: AlterationJobPartWhereInput
    /**
     * Limit how many AlterationJobParts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlterationJobPart upsert
   */
  export type AlterationJobPartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * The filter to search for the AlterationJobPart to update in case it exists.
     */
    where: AlterationJobPartWhereUniqueInput
    /**
     * In case the AlterationJobPart found by the `where` argument doesn't exist, create a new AlterationJobPart with this data.
     */
    create: XOR<AlterationJobPartCreateInput, AlterationJobPartUncheckedCreateInput>
    /**
     * In case the AlterationJobPart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlterationJobPartUpdateInput, AlterationJobPartUncheckedUpdateInput>
  }

  /**
   * AlterationJobPart delete
   */
  export type AlterationJobPartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
    /**
     * Filter which AlterationJobPart to delete.
     */
    where: AlterationJobPartWhereUniqueInput
  }

  /**
   * AlterationJobPart deleteMany
   */
  export type AlterationJobPartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlterationJobParts to delete
     */
    where?: AlterationJobPartWhereInput
    /**
     * Limit how many AlterationJobParts to delete.
     */
    limit?: number
  }

  /**
   * AlterationJobPart.assignedTailor
   */
  export type AlterationJobPart$assignedTailorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AlterationJobPart without action
   */
  export type AlterationJobPartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlterationJobPart
     */
    select?: AlterationJobPartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlterationJobPart
     */
    omit?: AlterationJobPartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlterationJobPartInclude<ExtArgs> | null
  }


  /**
   * Model PushSubscription
   */

  export type AggregatePushSubscription = {
    _count: PushSubscriptionCountAggregateOutputType | null
    _avg: PushSubscriptionAvgAggregateOutputType | null
    _sum: PushSubscriptionSumAggregateOutputType | null
    _min: PushSubscriptionMinAggregateOutputType | null
    _max: PushSubscriptionMaxAggregateOutputType | null
  }

  export type PushSubscriptionAvgAggregateOutputType = {
    id: number | null
  }

  export type PushSubscriptionSumAggregateOutputType = {
    id: number | null
  }

  export type PushSubscriptionMinAggregateOutputType = {
    id: number | null
    endpoint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushSubscriptionMaxAggregateOutputType = {
    id: number | null
    endpoint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PushSubscriptionCountAggregateOutputType = {
    id: number
    endpoint: number
    keys: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PushSubscriptionAvgAggregateInputType = {
    id?: true
  }

  export type PushSubscriptionSumAggregateInputType = {
    id?: true
  }

  export type PushSubscriptionMinAggregateInputType = {
    id?: true
    endpoint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushSubscriptionMaxAggregateInputType = {
    id?: true
    endpoint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PushSubscriptionCountAggregateInputType = {
    id?: true
    endpoint?: true
    keys?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PushSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushSubscription to aggregate.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PushSubscriptions
    **/
    _count?: true | PushSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PushSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PushSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PushSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PushSubscriptionMaxAggregateInputType
  }

  export type GetPushSubscriptionAggregateType<T extends PushSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePushSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePushSubscription[P]>
      : GetScalarType<T[P], AggregatePushSubscription[P]>
  }




  export type PushSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PushSubscriptionWhereInput
    orderBy?: PushSubscriptionOrderByWithAggregationInput | PushSubscriptionOrderByWithAggregationInput[]
    by: PushSubscriptionScalarFieldEnum[] | PushSubscriptionScalarFieldEnum
    having?: PushSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PushSubscriptionCountAggregateInputType | true
    _avg?: PushSubscriptionAvgAggregateInputType
    _sum?: PushSubscriptionSumAggregateInputType
    _min?: PushSubscriptionMinAggregateInputType
    _max?: PushSubscriptionMaxAggregateInputType
  }

  export type PushSubscriptionGroupByOutputType = {
    id: number
    endpoint: string
    keys: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: PushSubscriptionCountAggregateOutputType | null
    _avg: PushSubscriptionAvgAggregateOutputType | null
    _sum: PushSubscriptionSumAggregateOutputType | null
    _min: PushSubscriptionMinAggregateOutputType | null
    _max: PushSubscriptionMaxAggregateOutputType | null
  }

  type GetPushSubscriptionGroupByPayload<T extends PushSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PushSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PushSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PushSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PushSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type PushSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endpoint?: boolean
    keys?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endpoint?: boolean
    keys?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endpoint?: boolean
    keys?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pushSubscription"]>

  export type PushSubscriptionSelectScalar = {
    id?: boolean
    endpoint?: boolean
    keys?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PushSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "endpoint" | "keys" | "createdAt" | "updatedAt", ExtArgs["result"]["pushSubscription"]>

  export type $PushSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PushSubscription"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      endpoint: string
      keys: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pushSubscription"]>
    composites: {}
  }

  type PushSubscriptionGetPayload<S extends boolean | null | undefined | PushSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$PushSubscriptionPayload, S>

  type PushSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PushSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PushSubscriptionCountAggregateInputType | true
    }

  export interface PushSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PushSubscription'], meta: { name: 'PushSubscription' } }
    /**
     * Find zero or one PushSubscription that matches the filter.
     * @param {PushSubscriptionFindUniqueArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PushSubscriptionFindUniqueArgs>(args: SelectSubset<T, PushSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PushSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PushSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PushSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, PushSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PushSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindFirstArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PushSubscriptionFindFirstArgs>(args?: SelectSubset<T, PushSubscriptionFindFirstArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PushSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindFirstOrThrowArgs} args - Arguments to find a PushSubscription
     * @example
     * // Get one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PushSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, PushSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PushSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PushSubscriptions
     * const pushSubscriptions = await prisma.pushSubscription.findMany()
     * 
     * // Get first 10 PushSubscriptions
     * const pushSubscriptions = await prisma.pushSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PushSubscriptionFindManyArgs>(args?: SelectSubset<T, PushSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PushSubscription.
     * @param {PushSubscriptionCreateArgs} args - Arguments to create a PushSubscription.
     * @example
     * // Create one PushSubscription
     * const PushSubscription = await prisma.pushSubscription.create({
     *   data: {
     *     // ... data to create a PushSubscription
     *   }
     * })
     * 
     */
    create<T extends PushSubscriptionCreateArgs>(args: SelectSubset<T, PushSubscriptionCreateArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PushSubscriptions.
     * @param {PushSubscriptionCreateManyArgs} args - Arguments to create many PushSubscriptions.
     * @example
     * // Create many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PushSubscriptionCreateManyArgs>(args?: SelectSubset<T, PushSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PushSubscriptions and returns the data saved in the database.
     * @param {PushSubscriptionCreateManyAndReturnArgs} args - Arguments to create many PushSubscriptions.
     * @example
     * // Create many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PushSubscriptions and only return the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PushSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, PushSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PushSubscription.
     * @param {PushSubscriptionDeleteArgs} args - Arguments to delete one PushSubscription.
     * @example
     * // Delete one PushSubscription
     * const PushSubscription = await prisma.pushSubscription.delete({
     *   where: {
     *     // ... filter to delete one PushSubscription
     *   }
     * })
     * 
     */
    delete<T extends PushSubscriptionDeleteArgs>(args: SelectSubset<T, PushSubscriptionDeleteArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PushSubscription.
     * @param {PushSubscriptionUpdateArgs} args - Arguments to update one PushSubscription.
     * @example
     * // Update one PushSubscription
     * const pushSubscription = await prisma.pushSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PushSubscriptionUpdateArgs>(args: SelectSubset<T, PushSubscriptionUpdateArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PushSubscriptions.
     * @param {PushSubscriptionDeleteManyArgs} args - Arguments to filter PushSubscriptions to delete.
     * @example
     * // Delete a few PushSubscriptions
     * const { count } = await prisma.pushSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PushSubscriptionDeleteManyArgs>(args?: SelectSubset<T, PushSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PushSubscriptionUpdateManyArgs>(args: SelectSubset<T, PushSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushSubscriptions and returns the data updated in the database.
     * @param {PushSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many PushSubscriptions.
     * @example
     * // Update many PushSubscriptions
     * const pushSubscription = await prisma.pushSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PushSubscriptions and only return the `id`
     * const pushSubscriptionWithIdOnly = await prisma.pushSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PushSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, PushSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PushSubscription.
     * @param {PushSubscriptionUpsertArgs} args - Arguments to update or create a PushSubscription.
     * @example
     * // Update or create a PushSubscription
     * const pushSubscription = await prisma.pushSubscription.upsert({
     *   create: {
     *     // ... data to create a PushSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PushSubscription we want to update
     *   }
     * })
     */
    upsert<T extends PushSubscriptionUpsertArgs>(args: SelectSubset<T, PushSubscriptionUpsertArgs<ExtArgs>>): Prisma__PushSubscriptionClient<$Result.GetResult<Prisma.$PushSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PushSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionCountArgs} args - Arguments to filter PushSubscriptions to count.
     * @example
     * // Count the number of PushSubscriptions
     * const count = await prisma.pushSubscription.count({
     *   where: {
     *     // ... the filter for the PushSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends PushSubscriptionCountArgs>(
      args?: Subset<T, PushSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PushSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PushSubscriptionAggregateArgs>(args: Subset<T, PushSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetPushSubscriptionAggregateType<T>>

    /**
     * Group by PushSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PushSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PushSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: PushSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PushSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PushSubscription model
   */
  readonly fields: PushSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PushSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PushSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PushSubscription model
   */
  interface PushSubscriptionFieldRefs {
    readonly id: FieldRef<"PushSubscription", 'Int'>
    readonly endpoint: FieldRef<"PushSubscription", 'String'>
    readonly keys: FieldRef<"PushSubscription", 'Json'>
    readonly createdAt: FieldRef<"PushSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"PushSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PushSubscription findUnique
   */
  export type PushSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription findUniqueOrThrow
   */
  export type PushSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription findFirst
   */
  export type PushSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushSubscriptions.
     */
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription findFirstOrThrow
   */
  export type PushSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter, which PushSubscription to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushSubscriptions.
     */
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription findMany
   */
  export type PushSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter, which PushSubscriptions to fetch.
     */
    where?: PushSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushSubscriptions to fetch.
     */
    orderBy?: PushSubscriptionOrderByWithRelationInput | PushSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PushSubscriptions.
     */
    cursor?: PushSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushSubscriptions.
     */
    skip?: number
    distinct?: PushSubscriptionScalarFieldEnum | PushSubscriptionScalarFieldEnum[]
  }

  /**
   * PushSubscription create
   */
  export type PushSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data needed to create a PushSubscription.
     */
    data: XOR<PushSubscriptionCreateInput, PushSubscriptionUncheckedCreateInput>
  }

  /**
   * PushSubscription createMany
   */
  export type PushSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PushSubscriptions.
     */
    data: PushSubscriptionCreateManyInput | PushSubscriptionCreateManyInput[]
  }

  /**
   * PushSubscription createManyAndReturn
   */
  export type PushSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many PushSubscriptions.
     */
    data: PushSubscriptionCreateManyInput | PushSubscriptionCreateManyInput[]
  }

  /**
   * PushSubscription update
   */
  export type PushSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data needed to update a PushSubscription.
     */
    data: XOR<PushSubscriptionUpdateInput, PushSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which PushSubscription to update.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription updateMany
   */
  export type PushSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PushSubscriptions.
     */
    data: XOR<PushSubscriptionUpdateManyMutationInput, PushSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PushSubscriptions to update
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to update.
     */
    limit?: number
  }

  /**
   * PushSubscription updateManyAndReturn
   */
  export type PushSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update PushSubscriptions.
     */
    data: XOR<PushSubscriptionUpdateManyMutationInput, PushSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PushSubscriptions to update
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to update.
     */
    limit?: number
  }

  /**
   * PushSubscription upsert
   */
  export type PushSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * The filter to search for the PushSubscription to update in case it exists.
     */
    where: PushSubscriptionWhereUniqueInput
    /**
     * In case the PushSubscription found by the `where` argument doesn't exist, create a new PushSubscription with this data.
     */
    create: XOR<PushSubscriptionCreateInput, PushSubscriptionUncheckedCreateInput>
    /**
     * In case the PushSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PushSubscriptionUpdateInput, PushSubscriptionUncheckedUpdateInput>
  }

  /**
   * PushSubscription delete
   */
  export type PushSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
    /**
     * Filter which PushSubscription to delete.
     */
    where: PushSubscriptionWhereUniqueInput
  }

  /**
   * PushSubscription deleteMany
   */
  export type PushSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushSubscriptions to delete
     */
    where?: PushSubscriptionWhereInput
    /**
     * Limit how many PushSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * PushSubscription without action
   */
  export type PushSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushSubscription
     */
    select?: PushSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PushSubscription
     */
    omit?: PushSubscriptionOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    measurements: 'measurements',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PartyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    eventDate: 'eventDate',
    customerId: 'customerId',
    externalId: 'externalId',
    syncedAt: 'syncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    notes: 'notes',
    syncedToLs: 'syncedToLs',
    lsPartyId: 'lsPartyId'
  };

  export type PartyScalarFieldEnum = (typeof PartyScalarFieldEnum)[keyof typeof PartyScalarFieldEnum]


  export const AlterationJobScalarFieldEnum: {
    id: 'id',
    saleLineItemId: 'saleLineItemId',
    partyId: 'partyId',
    customerId: 'customerId',
    notes: 'notes',
    status: 'status',
    timeSpentMinutes: 'timeSpentMinutes',
    tailorId: 'tailorId',
    measurements: 'measurements',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlterationJobScalarFieldEnum = (typeof AlterationJobScalarFieldEnum)[keyof typeof AlterationJobScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    partyId: 'partyId',
    customerId: 'customerId',
    saleId: 'saleId',
    dateTime: 'dateTime',
    durationMinutes: 'durationMinutes',
    type: 'type',
    notes: 'notes',
    status: 'status',
    syncedToLightspeed: 'syncedToLightspeed',
    recurrenceRule: 'recurrenceRule',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    memberId: 'memberId',
    tailorId: 'tailorId',
    lsEventId: 'lsEventId'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const SyncLogScalarFieldEnum: {
    id: 'id',
    appointmentId: 'appointmentId',
    direction: 'direction',
    status: 'status',
    message: 'message',
    payload: 'payload',
    createdAt: 'createdAt'
  };

  export type SyncLogScalarFieldEnum = (typeof SyncLogScalarFieldEnum)[keyof typeof SyncLogScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const PartyMemberScalarFieldEnum: {
    id: 'id',
    partyId: 'partyId',
    lsCustomerId: 'lsCustomerId',
    role: 'role',
    notes: 'notes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    measurements: 'measurements'
  };

  export type PartyMemberScalarFieldEnum = (typeof PartyMemberScalarFieldEnum)[keyof typeof PartyMemberScalarFieldEnum]


  export const SaleAssignmentScalarFieldEnum: {
    id: 'id',
    saleId: 'saleId',
    associateId: 'associateId',
    commissionRate: 'commissionRate',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SaleAssignmentScalarFieldEnum = (typeof SaleAssignmentScalarFieldEnum)[keyof typeof SaleAssignmentScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    reminderIntervals: 'reminderIntervals',
    emailSubject: 'emailSubject',
    emailBody: 'emailBody',
    smsBody: 'smsBody',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const AlterationTaskTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    defaultDuration: 'defaultDuration',
    parts: 'parts'
  };

  export type AlterationTaskTypeScalarFieldEnum = (typeof AlterationTaskTypeScalarFieldEnum)[keyof typeof AlterationTaskTypeScalarFieldEnum]


  export const TailorAbilityScalarFieldEnum: {
    id: 'id',
    tailorId: 'tailorId',
    taskTypeId: 'taskTypeId',
    proficiency: 'proficiency'
  };

  export type TailorAbilityScalarFieldEnum = (typeof TailorAbilityScalarFieldEnum)[keyof typeof TailorAbilityScalarFieldEnum]


  export const TailorScheduleScalarFieldEnum: {
    id: 'id',
    tailorId: 'tailorId',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime'
  };

  export type TailorScheduleScalarFieldEnum = (typeof TailorScheduleScalarFieldEnum)[keyof typeof TailorScheduleScalarFieldEnum]


  export const AlterationJobPartScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    part: 'part',
    taskTypeId: 'taskTypeId',
    assignedTailorId: 'assignedTailorId',
    scheduledTime: 'scheduledTime',
    duration: 'duration',
    status: 'status',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlterationJobPartScalarFieldEnum = (typeof AlterationJobPartScalarFieldEnum)[keyof typeof AlterationJobPartScalarFieldEnum]


  export const PushSubscriptionScalarFieldEnum: {
    id: 'id',
    endpoint: 'endpoint',
    keys: 'keys',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PushSubscriptionScalarFieldEnum = (typeof PushSubscriptionScalarFieldEnum)[keyof typeof PushSubscriptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AppointmentType'
   */
  export type EnumAppointmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentType'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'SyncDirection'
   */
  export type EnumSyncDirectionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncDirection'>
    


  /**
   * Reference to a field of type 'SyncStatus'
   */
  export type EnumSyncStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    name?: StringFilter<"Customer"> | string
    email?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    measurements?: JsonNullableFilter<"Customer">
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    parties?: PartyListRelationFilter
    alterationJobs?: AlterationJobListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parties?: PartyOrderByRelationAggregateInput
    alterationJobs?: AlterationJobOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    measurements?: JsonNullableFilter<"Customer">
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    parties?: PartyListRelationFilter
    alterationJobs?: AlterationJobListRelationFilter
  }, "id" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    name?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    measurements?: JsonNullableWithAggregatesFilter<"Customer">
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    alterationJobs?: AlterationJobListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    saleAssignments?: SaleAssignmentListRelationFilter
    skills?: SkillListRelationFilter
    tailorAbilities?: TailorAbilityListRelationFilter
    tailorSchedules?: TailorScheduleListRelationFilter
    assignedJobParts?: AlterationJobPartListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    alterationJobs?: AlterationJobOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    saleAssignments?: SaleAssignmentOrderByRelationAggregateInput
    skills?: SkillOrderByRelationAggregateInput
    tailorAbilities?: TailorAbilityOrderByRelationAggregateInput
    tailorSchedules?: TailorScheduleOrderByRelationAggregateInput
    assignedJobParts?: AlterationJobPartOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    appointments?: AppointmentListRelationFilter
    alterationJobs?: AlterationJobListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    saleAssignments?: SaleAssignmentListRelationFilter
    skills?: SkillListRelationFilter
    tailorAbilities?: TailorAbilityListRelationFilter
    tailorSchedules?: TailorScheduleListRelationFilter
    assignedJobParts?: AlterationJobPartListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PartyWhereInput = {
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    id?: IntFilter<"Party"> | number
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    alterationJobs?: AlterationJobListRelationFilter
    appointments?: AppointmentListRelationFilter
    members?: PartyMemberListRelationFilter
  }

  export type PartyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    alterationJobs?: AlterationJobOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    members?: PartyMemberOrderByRelationAggregateInput
  }

  export type PartyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    alterationJobs?: AlterationJobListRelationFilter
    appointments?: AppointmentListRelationFilter
    members?: PartyMemberListRelationFilter
  }, "id">

  export type PartyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrderInput | SortOrder
    _count?: PartyCountOrderByAggregateInput
    _avg?: PartyAvgOrderByAggregateInput
    _max?: PartyMaxOrderByAggregateInput
    _min?: PartyMinOrderByAggregateInput
    _sum?: PartySumOrderByAggregateInput
  }

  export type PartyScalarWhereWithAggregatesInput = {
    AND?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    OR?: PartyScalarWhereWithAggregatesInput[]
    NOT?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Party"> | number
    name?: StringWithAggregatesFilter<"Party"> | string
    eventDate?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    customerId?: IntWithAggregatesFilter<"Party"> | number
    externalId?: StringNullableWithAggregatesFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Party"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Party"> | string | null
    syncedToLs?: BoolWithAggregatesFilter<"Party"> | boolean
    lsPartyId?: StringNullableWithAggregatesFilter<"Party"> | string | null
  }

  export type AlterationJobWhereInput = {
    AND?: AlterationJobWhereInput | AlterationJobWhereInput[]
    OR?: AlterationJobWhereInput[]
    NOT?: AlterationJobWhereInput | AlterationJobWhereInput[]
    id?: IntFilter<"AlterationJob"> | number
    saleLineItemId?: IntFilter<"AlterationJob"> | number
    partyId?: IntNullableFilter<"AlterationJob"> | number | null
    customerId?: IntNullableFilter<"AlterationJob"> | number | null
    notes?: StringNullableFilter<"AlterationJob"> | string | null
    status?: StringFilter<"AlterationJob"> | string
    timeSpentMinutes?: IntNullableFilter<"AlterationJob"> | number | null
    tailorId?: IntNullableFilter<"AlterationJob"> | number | null
    measurements?: JsonNullableFilter<"AlterationJob">
    createdAt?: DateTimeFilter<"AlterationJob"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJob"> | Date | string
    party?: XOR<PartyNullableScalarRelationFilter, PartyWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobParts?: AlterationJobPartListRelationFilter
  }

  export type AlterationJobOrderByWithRelationInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    timeSpentMinutes?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    party?: PartyOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    tailor?: UserOrderByWithRelationInput
    jobParts?: AlterationJobPartOrderByRelationAggregateInput
  }

  export type AlterationJobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlterationJobWhereInput | AlterationJobWhereInput[]
    OR?: AlterationJobWhereInput[]
    NOT?: AlterationJobWhereInput | AlterationJobWhereInput[]
    saleLineItemId?: IntFilter<"AlterationJob"> | number
    partyId?: IntNullableFilter<"AlterationJob"> | number | null
    customerId?: IntNullableFilter<"AlterationJob"> | number | null
    notes?: StringNullableFilter<"AlterationJob"> | string | null
    status?: StringFilter<"AlterationJob"> | string
    timeSpentMinutes?: IntNullableFilter<"AlterationJob"> | number | null
    tailorId?: IntNullableFilter<"AlterationJob"> | number | null
    measurements?: JsonNullableFilter<"AlterationJob">
    createdAt?: DateTimeFilter<"AlterationJob"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJob"> | Date | string
    party?: XOR<PartyNullableScalarRelationFilter, PartyWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobParts?: AlterationJobPartListRelationFilter
  }, "id">

  export type AlterationJobOrderByWithAggregationInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    timeSpentMinutes?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlterationJobCountOrderByAggregateInput
    _avg?: AlterationJobAvgOrderByAggregateInput
    _max?: AlterationJobMaxOrderByAggregateInput
    _min?: AlterationJobMinOrderByAggregateInput
    _sum?: AlterationJobSumOrderByAggregateInput
  }

  export type AlterationJobScalarWhereWithAggregatesInput = {
    AND?: AlterationJobScalarWhereWithAggregatesInput | AlterationJobScalarWhereWithAggregatesInput[]
    OR?: AlterationJobScalarWhereWithAggregatesInput[]
    NOT?: AlterationJobScalarWhereWithAggregatesInput | AlterationJobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AlterationJob"> | number
    saleLineItemId?: IntWithAggregatesFilter<"AlterationJob"> | number
    partyId?: IntNullableWithAggregatesFilter<"AlterationJob"> | number | null
    customerId?: IntNullableWithAggregatesFilter<"AlterationJob"> | number | null
    notes?: StringNullableWithAggregatesFilter<"AlterationJob"> | string | null
    status?: StringWithAggregatesFilter<"AlterationJob"> | string
    timeSpentMinutes?: IntNullableWithAggregatesFilter<"AlterationJob"> | number | null
    tailorId?: IntNullableWithAggregatesFilter<"AlterationJob"> | number | null
    measurements?: JsonNullableWithAggregatesFilter<"AlterationJob">
    createdAt?: DateTimeWithAggregatesFilter<"AlterationJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AlterationJob"> | Date | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: IntFilter<"Appointment"> | number
    partyId?: IntFilter<"Appointment"> | number
    customerId?: StringNullableFilter<"Appointment"> | string | null
    saleId?: StringNullableFilter<"Appointment"> | string | null
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    durationMinutes?: IntNullableFilter<"Appointment"> | number | null
    type?: EnumAppointmentTypeNullableFilter<"Appointment"> | $Enums.AppointmentType | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFilter<"Appointment"> | boolean
    recurrenceRule?: StringNullableFilter<"Appointment"> | string | null
    parentId?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    parent?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    children?: AppointmentListRelationFilter
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    syncLogs?: SyncLogListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrderInput | SortOrder
    saleId?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    syncedToLightspeed?: SortOrder
    recurrenceRule?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    lsEventId?: SortOrderInput | SortOrder
    party?: PartyOrderByWithRelationInput
    parent?: AppointmentOrderByWithRelationInput
    children?: AppointmentOrderByRelationAggregateInput
    member?: PartyMemberOrderByWithRelationInput
    tailor?: UserOrderByWithRelationInput
    syncLogs?: SyncLogOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    partyId?: IntFilter<"Appointment"> | number
    customerId?: StringNullableFilter<"Appointment"> | string | null
    saleId?: StringNullableFilter<"Appointment"> | string | null
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    durationMinutes?: IntNullableFilter<"Appointment"> | number | null
    type?: EnumAppointmentTypeNullableFilter<"Appointment"> | $Enums.AppointmentType | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFilter<"Appointment"> | boolean
    recurrenceRule?: StringNullableFilter<"Appointment"> | string | null
    parentId?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    parent?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    children?: AppointmentListRelationFilter
    member?: XOR<PartyMemberNullableScalarRelationFilter, PartyMemberWhereInput> | null
    tailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    syncLogs?: SyncLogListRelationFilter
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrderInput | SortOrder
    saleId?: SortOrderInput | SortOrder
    dateTime?: SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    syncedToLightspeed?: SortOrder
    recurrenceRule?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrderInput | SortOrder
    tailorId?: SortOrderInput | SortOrder
    lsEventId?: SortOrderInput | SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appointment"> | number
    partyId?: IntWithAggregatesFilter<"Appointment"> | number
    customerId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    saleId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    dateTime?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    durationMinutes?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    type?: EnumAppointmentTypeNullableWithAggregatesFilter<"Appointment"> | $Enums.AppointmentType | null
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolWithAggregatesFilter<"Appointment"> | boolean
    recurrenceRule?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    parentId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    memberId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    tailorId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    lsEventId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
  }

  export type SyncLogWhereInput = {
    AND?: SyncLogWhereInput | SyncLogWhereInput[]
    OR?: SyncLogWhereInput[]
    NOT?: SyncLogWhereInput | SyncLogWhereInput[]
    id?: IntFilter<"SyncLog"> | number
    appointmentId?: IntFilter<"SyncLog"> | number
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    message?: StringNullableFilter<"SyncLog"> | string | null
    payload?: JsonNullableFilter<"SyncLog">
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
  }

  export type SyncLogOrderByWithRelationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type SyncLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SyncLogWhereInput | SyncLogWhereInput[]
    OR?: SyncLogWhereInput[]
    NOT?: SyncLogWhereInput | SyncLogWhereInput[]
    appointmentId?: IntFilter<"SyncLog"> | number
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    message?: StringNullableFilter<"SyncLog"> | string | null
    payload?: JsonNullableFilter<"SyncLog">
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
  }, "id">

  export type SyncLogOrderByWithAggregationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SyncLogCountOrderByAggregateInput
    _avg?: SyncLogAvgOrderByAggregateInput
    _max?: SyncLogMaxOrderByAggregateInput
    _min?: SyncLogMinOrderByAggregateInput
    _sum?: SyncLogSumOrderByAggregateInput
  }

  export type SyncLogScalarWhereWithAggregatesInput = {
    AND?: SyncLogScalarWhereWithAggregatesInput | SyncLogScalarWhereWithAggregatesInput[]
    OR?: SyncLogScalarWhereWithAggregatesInput[]
    NOT?: SyncLogScalarWhereWithAggregatesInput | SyncLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SyncLog"> | number
    appointmentId?: IntWithAggregatesFilter<"SyncLog"> | number
    direction?: EnumSyncDirectionWithAggregatesFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusWithAggregatesFilter<"SyncLog"> | $Enums.SyncStatus
    message?: StringNullableWithAggregatesFilter<"SyncLog"> | string | null
    payload?: JsonNullableWithAggregatesFilter<"SyncLog">
    createdAt?: DateTimeWithAggregatesFilter<"SyncLog"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: IntWithAggregatesFilter<"AuditLog"> | number
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type PartyMemberWhereInput = {
    AND?: PartyMemberWhereInput | PartyMemberWhereInput[]
    OR?: PartyMemberWhereInput[]
    NOT?: PartyMemberWhereInput | PartyMemberWhereInput[]
    id?: IntFilter<"PartyMember"> | number
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
    measurements?: JsonNullableFilter<"PartyMember">
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    appointments?: AppointmentListRelationFilter
  }

  export type PartyMemberOrderByWithRelationInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrderInput | SortOrder
    role?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    measurements?: SortOrderInput | SortOrder
    party?: PartyOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type PartyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartyMemberWhereInput | PartyMemberWhereInput[]
    OR?: PartyMemberWhereInput[]
    NOT?: PartyMemberWhereInput | PartyMemberWhereInput[]
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
    measurements?: JsonNullableFilter<"PartyMember">
    party?: XOR<PartyScalarRelationFilter, PartyWhereInput>
    appointments?: AppointmentListRelationFilter
  }, "id">

  export type PartyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrderInput | SortOrder
    role?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    measurements?: SortOrderInput | SortOrder
    _count?: PartyMemberCountOrderByAggregateInput
    _avg?: PartyMemberAvgOrderByAggregateInput
    _max?: PartyMemberMaxOrderByAggregateInput
    _min?: PartyMemberMinOrderByAggregateInput
    _sum?: PartyMemberSumOrderByAggregateInput
  }

  export type PartyMemberScalarWhereWithAggregatesInput = {
    AND?: PartyMemberScalarWhereWithAggregatesInput | PartyMemberScalarWhereWithAggregatesInput[]
    OR?: PartyMemberScalarWhereWithAggregatesInput[]
    NOT?: PartyMemberScalarWhereWithAggregatesInput | PartyMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PartyMember"> | number
    partyId?: IntWithAggregatesFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableWithAggregatesFilter<"PartyMember"> | string | null
    role?: StringWithAggregatesFilter<"PartyMember"> | string
    notes?: StringNullableWithAggregatesFilter<"PartyMember"> | string | null
    status?: StringWithAggregatesFilter<"PartyMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PartyMember"> | Date | string
    measurements?: JsonNullableWithAggregatesFilter<"PartyMember">
  }

  export type SaleAssignmentWhereInput = {
    AND?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    OR?: SaleAssignmentWhereInput[]
    NOT?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    id?: IntFilter<"SaleAssignment"> | number
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    associate?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SaleAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    associate?: UserOrderByWithRelationInput
  }

  export type SaleAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    OR?: SaleAssignmentWhereInput[]
    NOT?: SaleAssignmentWhereInput | SaleAssignmentWhereInput[]
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    associate?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SaleAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SaleAssignmentCountOrderByAggregateInput
    _avg?: SaleAssignmentAvgOrderByAggregateInput
    _max?: SaleAssignmentMaxOrderByAggregateInput
    _min?: SaleAssignmentMinOrderByAggregateInput
    _sum?: SaleAssignmentSumOrderByAggregateInput
  }

  export type SaleAssignmentScalarWhereWithAggregatesInput = {
    AND?: SaleAssignmentScalarWhereWithAggregatesInput | SaleAssignmentScalarWhereWithAggregatesInput[]
    OR?: SaleAssignmentScalarWhereWithAggregatesInput[]
    NOT?: SaleAssignmentScalarWhereWithAggregatesInput | SaleAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SaleAssignment"> | number
    saleId?: StringWithAggregatesFilter<"SaleAssignment"> | string
    associateId?: IntWithAggregatesFilter<"SaleAssignment"> | number
    commissionRate?: FloatWithAggregatesFilter<"SaleAssignment"> | number
    amount?: FloatWithAggregatesFilter<"SaleAssignment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SaleAssignment"> | Date | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
    users?: UserListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "name">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skill"> | number
    name?: StringWithAggregatesFilter<"Skill"> | string
  }

  export type SettingsWhereInput = {
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    id?: IntFilter<"Settings"> | number
    reminderIntervals?: StringFilter<"Settings"> | string
    emailSubject?: StringFilter<"Settings"> | string
    emailBody?: StringFilter<"Settings"> | string
    smsBody?: StringFilter<"Settings"> | string
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
  }

  export type SettingsOrderByWithRelationInput = {
    id?: SortOrder
    reminderIntervals?: SortOrder
    emailSubject?: SortOrder
    emailBody?: SortOrder
    smsBody?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    reminderIntervals?: StringFilter<"Settings"> | string
    emailSubject?: StringFilter<"Settings"> | string
    emailBody?: StringFilter<"Settings"> | string
    smsBody?: StringFilter<"Settings"> | string
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
  }, "id">

  export type SettingsOrderByWithAggregationInput = {
    id?: SortOrder
    reminderIntervals?: SortOrder
    emailSubject?: SortOrder
    emailBody?: SortOrder
    smsBody?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _avg?: SettingsAvgOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
    _sum?: SettingsSumOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    OR?: SettingsScalarWhereWithAggregatesInput[]
    NOT?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Settings"> | number
    reminderIntervals?: StringWithAggregatesFilter<"Settings"> | string
    emailSubject?: StringWithAggregatesFilter<"Settings"> | string
    emailBody?: StringWithAggregatesFilter<"Settings"> | string
    smsBody?: StringWithAggregatesFilter<"Settings"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
  }

  export type AlterationTaskTypeWhereInput = {
    AND?: AlterationTaskTypeWhereInput | AlterationTaskTypeWhereInput[]
    OR?: AlterationTaskTypeWhereInput[]
    NOT?: AlterationTaskTypeWhereInput | AlterationTaskTypeWhereInput[]
    id?: IntFilter<"AlterationTaskType"> | number
    name?: StringFilter<"AlterationTaskType"> | string
    defaultDuration?: IntFilter<"AlterationTaskType"> | number
    parts?: StringFilter<"AlterationTaskType"> | string
    abilities?: TailorAbilityListRelationFilter
    jobParts?: AlterationJobPartListRelationFilter
  }

  export type AlterationTaskTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    defaultDuration?: SortOrder
    parts?: SortOrder
    abilities?: TailorAbilityOrderByRelationAggregateInput
    jobParts?: AlterationJobPartOrderByRelationAggregateInput
  }

  export type AlterationTaskTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: AlterationTaskTypeWhereInput | AlterationTaskTypeWhereInput[]
    OR?: AlterationTaskTypeWhereInput[]
    NOT?: AlterationTaskTypeWhereInput | AlterationTaskTypeWhereInput[]
    defaultDuration?: IntFilter<"AlterationTaskType"> | number
    parts?: StringFilter<"AlterationTaskType"> | string
    abilities?: TailorAbilityListRelationFilter
    jobParts?: AlterationJobPartListRelationFilter
  }, "id" | "name">

  export type AlterationTaskTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    defaultDuration?: SortOrder
    parts?: SortOrder
    _count?: AlterationTaskTypeCountOrderByAggregateInput
    _avg?: AlterationTaskTypeAvgOrderByAggregateInput
    _max?: AlterationTaskTypeMaxOrderByAggregateInput
    _min?: AlterationTaskTypeMinOrderByAggregateInput
    _sum?: AlterationTaskTypeSumOrderByAggregateInput
  }

  export type AlterationTaskTypeScalarWhereWithAggregatesInput = {
    AND?: AlterationTaskTypeScalarWhereWithAggregatesInput | AlterationTaskTypeScalarWhereWithAggregatesInput[]
    OR?: AlterationTaskTypeScalarWhereWithAggregatesInput[]
    NOT?: AlterationTaskTypeScalarWhereWithAggregatesInput | AlterationTaskTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AlterationTaskType"> | number
    name?: StringWithAggregatesFilter<"AlterationTaskType"> | string
    defaultDuration?: IntWithAggregatesFilter<"AlterationTaskType"> | number
    parts?: StringWithAggregatesFilter<"AlterationTaskType"> | string
  }

  export type TailorAbilityWhereInput = {
    AND?: TailorAbilityWhereInput | TailorAbilityWhereInput[]
    OR?: TailorAbilityWhereInput[]
    NOT?: TailorAbilityWhereInput | TailorAbilityWhereInput[]
    id?: IntFilter<"TailorAbility"> | number
    tailorId?: IntFilter<"TailorAbility"> | number
    taskTypeId?: IntFilter<"TailorAbility"> | number
    proficiency?: IntFilter<"TailorAbility"> | number
    tailor?: XOR<UserScalarRelationFilter, UserWhereInput>
    taskType?: XOR<AlterationTaskTypeScalarRelationFilter, AlterationTaskTypeWhereInput>
  }

  export type TailorAbilityOrderByWithRelationInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
    tailor?: UserOrderByWithRelationInput
    taskType?: AlterationTaskTypeOrderByWithRelationInput
  }

  export type TailorAbilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TailorAbilityWhereInput | TailorAbilityWhereInput[]
    OR?: TailorAbilityWhereInput[]
    NOT?: TailorAbilityWhereInput | TailorAbilityWhereInput[]
    tailorId?: IntFilter<"TailorAbility"> | number
    taskTypeId?: IntFilter<"TailorAbility"> | number
    proficiency?: IntFilter<"TailorAbility"> | number
    tailor?: XOR<UserScalarRelationFilter, UserWhereInput>
    taskType?: XOR<AlterationTaskTypeScalarRelationFilter, AlterationTaskTypeWhereInput>
  }, "id">

  export type TailorAbilityOrderByWithAggregationInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
    _count?: TailorAbilityCountOrderByAggregateInput
    _avg?: TailorAbilityAvgOrderByAggregateInput
    _max?: TailorAbilityMaxOrderByAggregateInput
    _min?: TailorAbilityMinOrderByAggregateInput
    _sum?: TailorAbilitySumOrderByAggregateInput
  }

  export type TailorAbilityScalarWhereWithAggregatesInput = {
    AND?: TailorAbilityScalarWhereWithAggregatesInput | TailorAbilityScalarWhereWithAggregatesInput[]
    OR?: TailorAbilityScalarWhereWithAggregatesInput[]
    NOT?: TailorAbilityScalarWhereWithAggregatesInput | TailorAbilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TailorAbility"> | number
    tailorId?: IntWithAggregatesFilter<"TailorAbility"> | number
    taskTypeId?: IntWithAggregatesFilter<"TailorAbility"> | number
    proficiency?: IntWithAggregatesFilter<"TailorAbility"> | number
  }

  export type TailorScheduleWhereInput = {
    AND?: TailorScheduleWhereInput | TailorScheduleWhereInput[]
    OR?: TailorScheduleWhereInput[]
    NOT?: TailorScheduleWhereInput | TailorScheduleWhereInput[]
    id?: IntFilter<"TailorSchedule"> | number
    tailorId?: IntFilter<"TailorSchedule"> | number
    dayOfWeek?: IntFilter<"TailorSchedule"> | number
    startTime?: StringFilter<"TailorSchedule"> | string
    endTime?: StringFilter<"TailorSchedule"> | string
    tailor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TailorScheduleOrderByWithRelationInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    tailor?: UserOrderByWithRelationInput
  }

  export type TailorScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TailorScheduleWhereInput | TailorScheduleWhereInput[]
    OR?: TailorScheduleWhereInput[]
    NOT?: TailorScheduleWhereInput | TailorScheduleWhereInput[]
    tailorId?: IntFilter<"TailorSchedule"> | number
    dayOfWeek?: IntFilter<"TailorSchedule"> | number
    startTime?: StringFilter<"TailorSchedule"> | string
    endTime?: StringFilter<"TailorSchedule"> | string
    tailor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TailorScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    _count?: TailorScheduleCountOrderByAggregateInput
    _avg?: TailorScheduleAvgOrderByAggregateInput
    _max?: TailorScheduleMaxOrderByAggregateInput
    _min?: TailorScheduleMinOrderByAggregateInput
    _sum?: TailorScheduleSumOrderByAggregateInput
  }

  export type TailorScheduleScalarWhereWithAggregatesInput = {
    AND?: TailorScheduleScalarWhereWithAggregatesInput | TailorScheduleScalarWhereWithAggregatesInput[]
    OR?: TailorScheduleScalarWhereWithAggregatesInput[]
    NOT?: TailorScheduleScalarWhereWithAggregatesInput | TailorScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TailorSchedule"> | number
    tailorId?: IntWithAggregatesFilter<"TailorSchedule"> | number
    dayOfWeek?: IntWithAggregatesFilter<"TailorSchedule"> | number
    startTime?: StringWithAggregatesFilter<"TailorSchedule"> | string
    endTime?: StringWithAggregatesFilter<"TailorSchedule"> | string
  }

  export type AlterationJobPartWhereInput = {
    AND?: AlterationJobPartWhereInput | AlterationJobPartWhereInput[]
    OR?: AlterationJobPartWhereInput[]
    NOT?: AlterationJobPartWhereInput | AlterationJobPartWhereInput[]
    id?: IntFilter<"AlterationJobPart"> | number
    jobId?: IntFilter<"AlterationJobPart"> | number
    part?: StringFilter<"AlterationJobPart"> | string
    taskTypeId?: IntFilter<"AlterationJobPart"> | number
    assignedTailorId?: IntNullableFilter<"AlterationJobPart"> | number | null
    scheduledTime?: DateTimeNullableFilter<"AlterationJobPart"> | Date | string | null
    duration?: IntNullableFilter<"AlterationJobPart"> | number | null
    status?: StringFilter<"AlterationJobPart"> | string
    notes?: StringNullableFilter<"AlterationJobPart"> | string | null
    createdAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
    job?: XOR<AlterationJobScalarRelationFilter, AlterationJobWhereInput>
    taskType?: XOR<AlterationTaskTypeScalarRelationFilter, AlterationTaskTypeWhereInput>
    assignedTailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AlterationJobPartOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    part?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: AlterationJobOrderByWithRelationInput
    taskType?: AlterationTaskTypeOrderByWithRelationInput
    assignedTailor?: UserOrderByWithRelationInput
  }

  export type AlterationJobPartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlterationJobPartWhereInput | AlterationJobPartWhereInput[]
    OR?: AlterationJobPartWhereInput[]
    NOT?: AlterationJobPartWhereInput | AlterationJobPartWhereInput[]
    jobId?: IntFilter<"AlterationJobPart"> | number
    part?: StringFilter<"AlterationJobPart"> | string
    taskTypeId?: IntFilter<"AlterationJobPart"> | number
    assignedTailorId?: IntNullableFilter<"AlterationJobPart"> | number | null
    scheduledTime?: DateTimeNullableFilter<"AlterationJobPart"> | Date | string | null
    duration?: IntNullableFilter<"AlterationJobPart"> | number | null
    status?: StringFilter<"AlterationJobPart"> | string
    notes?: StringNullableFilter<"AlterationJobPart"> | string | null
    createdAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
    job?: XOR<AlterationJobScalarRelationFilter, AlterationJobWhereInput>
    taskType?: XOR<AlterationTaskTypeScalarRelationFilter, AlterationTaskTypeWhereInput>
    assignedTailor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AlterationJobPartOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    part?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlterationJobPartCountOrderByAggregateInput
    _avg?: AlterationJobPartAvgOrderByAggregateInput
    _max?: AlterationJobPartMaxOrderByAggregateInput
    _min?: AlterationJobPartMinOrderByAggregateInput
    _sum?: AlterationJobPartSumOrderByAggregateInput
  }

  export type AlterationJobPartScalarWhereWithAggregatesInput = {
    AND?: AlterationJobPartScalarWhereWithAggregatesInput | AlterationJobPartScalarWhereWithAggregatesInput[]
    OR?: AlterationJobPartScalarWhereWithAggregatesInput[]
    NOT?: AlterationJobPartScalarWhereWithAggregatesInput | AlterationJobPartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AlterationJobPart"> | number
    jobId?: IntWithAggregatesFilter<"AlterationJobPart"> | number
    part?: StringWithAggregatesFilter<"AlterationJobPart"> | string
    taskTypeId?: IntWithAggregatesFilter<"AlterationJobPart"> | number
    assignedTailorId?: IntNullableWithAggregatesFilter<"AlterationJobPart"> | number | null
    scheduledTime?: DateTimeNullableWithAggregatesFilter<"AlterationJobPart"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"AlterationJobPart"> | number | null
    status?: StringWithAggregatesFilter<"AlterationJobPart"> | string
    notes?: StringNullableWithAggregatesFilter<"AlterationJobPart"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AlterationJobPart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AlterationJobPart"> | Date | string
  }

  export type PushSubscriptionWhereInput = {
    AND?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    OR?: PushSubscriptionWhereInput[]
    NOT?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    id?: IntFilter<"PushSubscription"> | number
    endpoint?: StringFilter<"PushSubscription"> | string
    keys?: JsonFilter<"PushSubscription">
    createdAt?: DateTimeFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"PushSubscription"> | Date | string
  }

  export type PushSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    endpoint?: SortOrder
    keys?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    endpoint?: string
    AND?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    OR?: PushSubscriptionWhereInput[]
    NOT?: PushSubscriptionWhereInput | PushSubscriptionWhereInput[]
    keys?: JsonFilter<"PushSubscription">
    createdAt?: DateTimeFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"PushSubscription"> | Date | string
  }, "id" | "endpoint">

  export type PushSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    endpoint?: SortOrder
    keys?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PushSubscriptionCountOrderByAggregateInput
    _avg?: PushSubscriptionAvgOrderByAggregateInput
    _max?: PushSubscriptionMaxOrderByAggregateInput
    _min?: PushSubscriptionMinOrderByAggregateInput
    _sum?: PushSubscriptionSumOrderByAggregateInput
  }

  export type PushSubscriptionScalarWhereWithAggregatesInput = {
    AND?: PushSubscriptionScalarWhereWithAggregatesInput | PushSubscriptionScalarWhereWithAggregatesInput[]
    OR?: PushSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: PushSubscriptionScalarWhereWithAggregatesInput | PushSubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PushSubscription"> | number
    endpoint?: StringWithAggregatesFilter<"PushSubscription"> | string
    keys?: JsonWithAggregatesFilter<"PushSubscription">
    createdAt?: DateTimeWithAggregatesFilter<"PushSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PushSubscription"> | Date | string
  }

  export type CustomerCreateInput = {
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyCreateNestedManyWithoutCustomerInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyUncheckedCreateNestedManyWithoutCustomerInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUpdateManyWithoutCustomerNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUncheckedUpdateManyWithoutCustomerNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyCreateInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type PartyCreateManyInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
  }

  export type PartyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlterationJobCreateInput = {
    saleLineItemId: number
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    party?: PartyCreateNestedOneWithoutAlterationJobsInput
    customer?: CustomerCreateNestedOneWithoutAlterationJobsInput
    tailor?: UserCreateNestedOneWithoutAlterationJobsInput
    jobParts?: AlterationJobPartCreateNestedManyWithoutJobInput
  }

  export type AlterationJobUncheckedCreateInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutJobInput
  }

  export type AlterationJobUpdateInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneWithoutAlterationJobsNestedInput
    customer?: CustomerUpdateOneWithoutAlterationJobsNestedInput
    tailor?: UserUpdateOneWithoutAlterationJobsNestedInput
    jobParts?: AlterationJobPartUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobCreateManyInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobUpdateManyMutationInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
  }

  export type AppointmentUpdateManyMutationInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SyncLogCreateInput = {
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    appointment: AppointmentCreateNestedOneWithoutSyncLogsInput
  }

  export type SyncLogUncheckedCreateInput = {
    id?: number
    appointmentId: number
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SyncLogUpdateInput = {
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneRequiredWithoutSyncLogsNestedInput
  }

  export type SyncLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogCreateManyInput = {
    id?: number
    appointmentId: number
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SyncLogUpdateManyMutationInput = {
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyMemberCreateInput = {
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    party: PartyCreateNestedOneWithoutMembersInput
    appointments?: AppointmentCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUpdateInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    party?: PartyUpdateOneRequiredWithoutMembersNestedInput
    appointments?: AppointmentUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberCreateManyInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PartyMemberUpdateManyMutationInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PartyMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SaleAssignmentCreateInput = {
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    associate: UserCreateNestedOneWithoutSaleAssignmentsInput
  }

  export type SaleAssignmentUncheckedCreateInput = {
    id?: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUpdateInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    associate?: UserUpdateOneRequiredWithoutSaleAssignmentsNestedInput
  }

  export type SaleAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    associateId?: IntFieldUpdateOperationsInput | number
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentCreateManyInput = {
    id?: number
    saleId: string
    associateId: number
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUpdateManyMutationInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    associateId?: IntFieldUpdateOperationsInput | number
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillCreateManyInput = {
    id?: number
    name: string
  }

  export type SkillUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SettingsCreateInput = {
    id?: number
    reminderIntervals?: string
    emailSubject?: string
    emailBody?: string
    smsBody?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUncheckedCreateInput = {
    id?: number
    reminderIntervals?: string
    emailSubject?: string
    emailBody?: string
    smsBody?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reminderIntervals?: StringFieldUpdateOperationsInput | string
    emailSubject?: StringFieldUpdateOperationsInput | string
    emailBody?: StringFieldUpdateOperationsInput | string
    smsBody?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reminderIntervals?: StringFieldUpdateOperationsInput | string
    emailSubject?: StringFieldUpdateOperationsInput | string
    emailBody?: StringFieldUpdateOperationsInput | string
    smsBody?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsCreateManyInput = {
    id?: number
    reminderIntervals?: string
    emailSubject?: string
    emailBody?: string
    smsBody?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    reminderIntervals?: StringFieldUpdateOperationsInput | string
    emailSubject?: StringFieldUpdateOperationsInput | string
    emailBody?: StringFieldUpdateOperationsInput | string
    smsBody?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reminderIntervals?: StringFieldUpdateOperationsInput | string
    emailSubject?: StringFieldUpdateOperationsInput | string
    emailBody?: StringFieldUpdateOperationsInput | string
    smsBody?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationTaskTypeCreateInput = {
    name: string
    defaultDuration: number
    parts: string
    abilities?: TailorAbilityCreateNestedManyWithoutTaskTypeInput
    jobParts?: AlterationJobPartCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeUncheckedCreateInput = {
    id?: number
    name: string
    defaultDuration: number
    parts: string
    abilities?: TailorAbilityUncheckedCreateNestedManyWithoutTaskTypeInput
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    abilities?: TailorAbilityUpdateManyWithoutTaskTypeNestedInput
    jobParts?: AlterationJobPartUpdateManyWithoutTaskTypeNestedInput
  }

  export type AlterationTaskTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    abilities?: TailorAbilityUncheckedUpdateManyWithoutTaskTypeNestedInput
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutTaskTypeNestedInput
  }

  export type AlterationTaskTypeCreateManyInput = {
    id?: number
    name: string
    defaultDuration: number
    parts: string
  }

  export type AlterationTaskTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
  }

  export type AlterationTaskTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
  }

  export type TailorAbilityCreateInput = {
    proficiency: number
    tailor: UserCreateNestedOneWithoutTailorAbilitiesInput
    taskType: AlterationTaskTypeCreateNestedOneWithoutAbilitiesInput
  }

  export type TailorAbilityUncheckedCreateInput = {
    id?: number
    tailorId: number
    taskTypeId: number
    proficiency: number
  }

  export type TailorAbilityUpdateInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    tailor?: UserUpdateOneRequiredWithoutTailorAbilitiesNestedInput
    taskType?: AlterationTaskTypeUpdateOneRequiredWithoutAbilitiesNestedInput
  }

  export type TailorAbilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    taskTypeId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorAbilityCreateManyInput = {
    id?: number
    tailorId: number
    taskTypeId: number
    proficiency: number
  }

  export type TailorAbilityUpdateManyMutationInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorAbilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    taskTypeId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorScheduleCreateInput = {
    dayOfWeek: number
    startTime: string
    endTime: string
    tailor: UserCreateNestedOneWithoutTailorSchedulesInput
  }

  export type TailorScheduleUncheckedCreateInput = {
    id?: number
    tailorId: number
    dayOfWeek: number
    startTime: string
    endTime: string
  }

  export type TailorScheduleUpdateInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    tailor?: UserUpdateOneRequiredWithoutTailorSchedulesNestedInput
  }

  export type TailorScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type TailorScheduleCreateManyInput = {
    id?: number
    tailorId: number
    dayOfWeek: number
    startTime: string
    endTime: string
  }

  export type TailorScheduleUpdateManyMutationInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type TailorScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type AlterationJobPartCreateInput = {
    part: string
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: AlterationJobCreateNestedOneWithoutJobPartsInput
    taskType: AlterationTaskTypeCreateNestedOneWithoutJobPartsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedJobPartsInput
  }

  export type AlterationJobPartUncheckedCreateInput = {
    id?: number
    jobId: number
    part: string
    taskTypeId: number
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartUpdateInput = {
    part?: StringFieldUpdateOperationsInput | string
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: AlterationJobUpdateOneRequiredWithoutJobPartsNestedInput
    taskType?: AlterationTaskTypeUpdateOneRequiredWithoutJobPartsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedJobPartsNestedInput
  }

  export type AlterationJobPartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobPartCreateManyInput = {
    id?: number
    jobId: number
    part: string
    taskTypeId: number
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartUpdateManyMutationInput = {
    part?: StringFieldUpdateOperationsInput | string
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobPartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionCreateInput = {
    endpoint: string
    keys: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUncheckedCreateInput = {
    id?: number
    endpoint: string
    keys: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUpdateInput = {
    endpoint?: StringFieldUpdateOperationsInput | string
    keys?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    keys?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionCreateManyInput = {
    id?: number
    endpoint: string
    keys: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PushSubscriptionUpdateManyMutationInput = {
    endpoint?: StringFieldUpdateOperationsInput | string
    keys?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushSubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    keys?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PartyListRelationFilter = {
    every?: PartyWhereInput
    some?: PartyWhereInput
    none?: PartyWhereInput
  }

  export type AlterationJobListRelationFilter = {
    every?: AlterationJobWhereInput
    some?: AlterationJobWhereInput
    none?: AlterationJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PartyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlterationJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    measurements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SaleAssignmentListRelationFilter = {
    every?: SaleAssignmentWhereInput
    some?: SaleAssignmentWhereInput
    none?: SaleAssignmentWhereInput
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type TailorAbilityListRelationFilter = {
    every?: TailorAbilityWhereInput
    some?: TailorAbilityWhereInput
    none?: TailorAbilityWhereInput
  }

  export type TailorScheduleListRelationFilter = {
    every?: TailorScheduleWhereInput
    some?: TailorScheduleWhereInput
    none?: TailorScheduleWhereInput
  }

  export type AlterationJobPartListRelationFilter = {
    every?: AlterationJobPartWhereInput
    some?: AlterationJobPartWhereInput
    none?: AlterationJobPartWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaleAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TailorAbilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TailorScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlterationJobPartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type PartyMemberListRelationFilter = {
    every?: PartyMemberWhereInput
    some?: PartyMemberWhereInput
    none?: PartyMemberWhereInput
  }

  export type PartyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartyAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type PartyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eventDate?: SortOrder
    customerId?: SortOrder
    externalId?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
    syncedToLs?: SortOrder
    lsPartyId?: SortOrder
  }

  export type PartySumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PartyNullableScalarRelationFilter = {
    is?: PartyWhereInput | null
    isNot?: PartyWhereInput | null
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AlterationJobCountOrderByAggregateInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    timeSpentMinutes?: SortOrder
    tailorId?: SortOrder
    measurements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobAvgOrderByAggregateInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    timeSpentMinutes?: SortOrder
    tailorId?: SortOrder
  }

  export type AlterationJobMaxOrderByAggregateInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    timeSpentMinutes?: SortOrder
    tailorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobMinOrderByAggregateInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    timeSpentMinutes?: SortOrder
    tailorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobSumOrderByAggregateInput = {
    id?: SortOrder
    saleLineItemId?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    timeSpentMinutes?: SortOrder
    tailorId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumAppointmentTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AppointmentType[] | null
    notIn?: $Enums.AppointmentType[] | null
    not?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel> | $Enums.AppointmentType | null
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type PartyScalarRelationFilter = {
    is?: PartyWhereInput
    isNot?: PartyWhereInput
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type PartyMemberNullableScalarRelationFilter = {
    is?: PartyMemberWhereInput | null
    isNot?: PartyMemberWhereInput | null
  }

  export type SyncLogListRelationFilter = {
    every?: SyncLogWhereInput
    some?: SyncLogWhereInput
    none?: SyncLogWhereInput
  }

  export type SyncLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    dateTime?: SortOrder
    durationMinutes?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    syncedToLightspeed?: SortOrder
    recurrenceRule?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    tailorId?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    durationMinutes?: SortOrder
    parentId?: SortOrder
    memberId?: SortOrder
    tailorId?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    dateTime?: SortOrder
    durationMinutes?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    syncedToLightspeed?: SortOrder
    recurrenceRule?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    tailorId?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    dateTime?: SortOrder
    durationMinutes?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    syncedToLightspeed?: SortOrder
    recurrenceRule?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    memberId?: SortOrder
    tailorId?: SortOrder
    lsEventId?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    durationMinutes?: SortOrder
    parentId?: SortOrder
    memberId?: SortOrder
    tailorId?: SortOrder
  }

  export type EnumAppointmentTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AppointmentType[] | null
    notIn?: $Enums.AppointmentType[] | null
    not?: NestedEnumAppointmentTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type EnumSyncDirectionFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[]
    notIn?: $Enums.SyncDirection[]
    not?: NestedEnumSyncDirectionFilter<$PrismaModel> | $Enums.SyncDirection
  }

  export type EnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[]
    notIn?: $Enums.SyncStatus[]
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type AppointmentScalarRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type SyncLogCountOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    message?: SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogAvgOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
  }

  export type SyncLogMaxOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogMinOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    direction?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncLogSumOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
  }

  export type EnumSyncDirectionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[]
    notIn?: $Enums.SyncDirection[]
    not?: NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel> | $Enums.SyncDirection
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncDirectionFilter<$PrismaModel>
    _max?: NestedEnumSyncDirectionFilter<$PrismaModel>
  }

  export type EnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[]
    notIn?: $Enums.SyncStatus[]
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type PartyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    measurements?: SortOrder
  }

  export type PartyMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
  }

  export type PartyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
    lsCustomerId?: SortOrder
    role?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMemberSumOrderByAggregateInput = {
    id?: SortOrder
    partyId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SaleAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
  }

  export type SaleAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SaleAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    associateId?: SortOrder
    commissionRate?: SortOrder
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SettingsCountOrderByAggregateInput = {
    id?: SortOrder
    reminderIntervals?: SortOrder
    emailSubject?: SortOrder
    emailBody?: SortOrder
    smsBody?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    reminderIntervals?: SortOrder
    emailSubject?: SortOrder
    emailBody?: SortOrder
    smsBody?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    id?: SortOrder
    reminderIntervals?: SortOrder
    emailSubject?: SortOrder
    emailBody?: SortOrder
    smsBody?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlterationTaskTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    defaultDuration?: SortOrder
    parts?: SortOrder
  }

  export type AlterationTaskTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    defaultDuration?: SortOrder
  }

  export type AlterationTaskTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    defaultDuration?: SortOrder
    parts?: SortOrder
  }

  export type AlterationTaskTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    defaultDuration?: SortOrder
    parts?: SortOrder
  }

  export type AlterationTaskTypeSumOrderByAggregateInput = {
    id?: SortOrder
    defaultDuration?: SortOrder
  }

  export type AlterationTaskTypeScalarRelationFilter = {
    is?: AlterationTaskTypeWhereInput
    isNot?: AlterationTaskTypeWhereInput
  }

  export type TailorAbilityCountOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
  }

  export type TailorAbilityAvgOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
  }

  export type TailorAbilityMaxOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
  }

  export type TailorAbilityMinOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
  }

  export type TailorAbilitySumOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    taskTypeId?: SortOrder
    proficiency?: SortOrder
  }

  export type TailorScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
  }

  export type TailorScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
  }

  export type TailorScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
  }

  export type TailorScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
  }

  export type TailorScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    tailorId?: SortOrder
    dayOfWeek?: SortOrder
  }

  export type AlterationJobScalarRelationFilter = {
    is?: AlterationJobWhereInput
    isNot?: AlterationJobWhereInput
  }

  export type AlterationJobPartCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    part?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrder
    scheduledTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobPartAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrder
    duration?: SortOrder
  }

  export type AlterationJobPartMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    part?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrder
    scheduledTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobPartMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    part?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrder
    scheduledTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlterationJobPartSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    taskTypeId?: SortOrder
    assignedTailorId?: SortOrder
    duration?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PushSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    endpoint?: SortOrder
    keys?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PushSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    endpoint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    endpoint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PushSubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PartyCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
  }

  export type AlterationJobCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput> | AlterationJobCreateWithoutCustomerInput[] | AlterationJobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutCustomerInput | AlterationJobCreateOrConnectWithoutCustomerInput[]
    createMany?: AlterationJobCreateManyCustomerInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type PartyUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
  }

  export type AlterationJobUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput> | AlterationJobCreateWithoutCustomerInput[] | AlterationJobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutCustomerInput | AlterationJobCreateOrConnectWithoutCustomerInput[]
    createMany?: AlterationJobCreateManyCustomerInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PartyUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    upsert?: PartyUpsertWithWhereUniqueWithoutCustomerInput | PartyUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    set?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    disconnect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    delete?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    update?: PartyUpdateWithWhereUniqueWithoutCustomerInput | PartyUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PartyUpdateManyWithWhereWithoutCustomerInput | PartyUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PartyScalarWhereInput | PartyScalarWhereInput[]
  }

  export type AlterationJobUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput> | AlterationJobCreateWithoutCustomerInput[] | AlterationJobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutCustomerInput | AlterationJobCreateOrConnectWithoutCustomerInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutCustomerInput | AlterationJobUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AlterationJobCreateManyCustomerInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutCustomerInput | AlterationJobUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutCustomerInput | AlterationJobUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartyUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput> | PartyCreateWithoutCustomerInput[] | PartyUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: PartyCreateOrConnectWithoutCustomerInput | PartyCreateOrConnectWithoutCustomerInput[]
    upsert?: PartyUpsertWithWhereUniqueWithoutCustomerInput | PartyUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: PartyCreateManyCustomerInputEnvelope
    set?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    disconnect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    delete?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    connect?: PartyWhereUniqueInput | PartyWhereUniqueInput[]
    update?: PartyUpdateWithWhereUniqueWithoutCustomerInput | PartyUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: PartyUpdateManyWithWhereWithoutCustomerInput | PartyUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: PartyScalarWhereInput | PartyScalarWhereInput[]
  }

  export type AlterationJobUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput> | AlterationJobCreateWithoutCustomerInput[] | AlterationJobUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutCustomerInput | AlterationJobCreateOrConnectWithoutCustomerInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutCustomerInput | AlterationJobUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AlterationJobCreateManyCustomerInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutCustomerInput | AlterationJobUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutCustomerInput | AlterationJobUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type AppointmentCreateNestedManyWithoutTailorInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AlterationJobCreateNestedManyWithoutTailorInput = {
    create?: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput> | AlterationJobCreateWithoutTailorInput[] | AlterationJobUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutTailorInput | AlterationJobCreateOrConnectWithoutTailorInput[]
    createMany?: AlterationJobCreateManyTailorInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SaleAssignmentCreateNestedManyWithoutAssociateInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
  }

  export type SkillCreateNestedManyWithoutUsersInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type TailorAbilityCreateNestedManyWithoutTailorInput = {
    create?: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput> | TailorAbilityCreateWithoutTailorInput[] | TailorAbilityUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTailorInput | TailorAbilityCreateOrConnectWithoutTailorInput[]
    createMany?: TailorAbilityCreateManyTailorInputEnvelope
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
  }

  export type TailorScheduleCreateNestedManyWithoutTailorInput = {
    create?: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput> | TailorScheduleCreateWithoutTailorInput[] | TailorScheduleUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorScheduleCreateOrConnectWithoutTailorInput | TailorScheduleCreateOrConnectWithoutTailorInput[]
    createMany?: TailorScheduleCreateManyTailorInputEnvelope
    connect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
  }

  export type AlterationJobPartCreateNestedManyWithoutAssignedTailorInput = {
    create?: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput> | AlterationJobPartCreateWithoutAssignedTailorInput[] | AlterationJobPartUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutAssignedTailorInput | AlterationJobPartCreateOrConnectWithoutAssignedTailorInput[]
    createMany?: AlterationJobPartCreateManyAssignedTailorInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AlterationJobUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput> | AlterationJobCreateWithoutTailorInput[] | AlterationJobUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutTailorInput | AlterationJobCreateOrConnectWithoutTailorInput[]
    createMany?: AlterationJobCreateManyTailorInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type TailorAbilityUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput> | TailorAbilityCreateWithoutTailorInput[] | TailorAbilityUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTailorInput | TailorAbilityCreateOrConnectWithoutTailorInput[]
    createMany?: TailorAbilityCreateManyTailorInputEnvelope
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
  }

  export type TailorScheduleUncheckedCreateNestedManyWithoutTailorInput = {
    create?: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput> | TailorScheduleCreateWithoutTailorInput[] | TailorScheduleUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorScheduleCreateOrConnectWithoutTailorInput | TailorScheduleCreateOrConnectWithoutTailorInput[]
    createMany?: TailorScheduleCreateManyTailorInputEnvelope
    connect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
  }

  export type AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput = {
    create?: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput> | AlterationJobPartCreateWithoutAssignedTailorInput[] | AlterationJobPartUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutAssignedTailorInput | AlterationJobPartCreateOrConnectWithoutAssignedTailorInput[]
    createMany?: AlterationJobPartCreateManyAssignedTailorInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type AppointmentUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTailorInput | AppointmentUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTailorInput | AppointmentUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTailorInput | AppointmentUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AlterationJobUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput> | AlterationJobCreateWithoutTailorInput[] | AlterationJobUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutTailorInput | AlterationJobCreateOrConnectWithoutTailorInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutTailorInput | AlterationJobUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AlterationJobCreateManyTailorInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutTailorInput | AlterationJobUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutTailorInput | AlterationJobUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SaleAssignmentUpdateManyWithoutAssociateNestedInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    upsert?: SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    set?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    disconnect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    delete?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    update?: SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput[]
    updateMany?: SaleAssignmentUpdateManyWithWhereWithoutAssociateInput | SaleAssignmentUpdateManyWithWhereWithoutAssociateInput[]
    deleteMany?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
  }

  export type SkillUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUsersInput | SkillUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUsersInput | SkillUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUsersInput | SkillUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type TailorAbilityUpdateManyWithoutTailorNestedInput = {
    create?: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput> | TailorAbilityCreateWithoutTailorInput[] | TailorAbilityUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTailorInput | TailorAbilityCreateOrConnectWithoutTailorInput[]
    upsert?: TailorAbilityUpsertWithWhereUniqueWithoutTailorInput | TailorAbilityUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: TailorAbilityCreateManyTailorInputEnvelope
    set?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    disconnect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    delete?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    update?: TailorAbilityUpdateWithWhereUniqueWithoutTailorInput | TailorAbilityUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: TailorAbilityUpdateManyWithWhereWithoutTailorInput | TailorAbilityUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
  }

  export type TailorScheduleUpdateManyWithoutTailorNestedInput = {
    create?: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput> | TailorScheduleCreateWithoutTailorInput[] | TailorScheduleUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorScheduleCreateOrConnectWithoutTailorInput | TailorScheduleCreateOrConnectWithoutTailorInput[]
    upsert?: TailorScheduleUpsertWithWhereUniqueWithoutTailorInput | TailorScheduleUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: TailorScheduleCreateManyTailorInputEnvelope
    set?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    disconnect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    delete?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    connect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    update?: TailorScheduleUpdateWithWhereUniqueWithoutTailorInput | TailorScheduleUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: TailorScheduleUpdateManyWithWhereWithoutTailorInput | TailorScheduleUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: TailorScheduleScalarWhereInput | TailorScheduleScalarWhereInput[]
  }

  export type AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput> | AlterationJobPartCreateWithoutAssignedTailorInput[] | AlterationJobPartUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutAssignedTailorInput | AlterationJobPartCreateOrConnectWithoutAssignedTailorInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutAssignedTailorInput | AlterationJobPartUpsertWithWhereUniqueWithoutAssignedTailorInput[]
    createMany?: AlterationJobPartCreateManyAssignedTailorInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutAssignedTailorInput | AlterationJobPartUpdateWithWhereUniqueWithoutAssignedTailorInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutAssignedTailorInput | AlterationJobPartUpdateManyWithWhereWithoutAssignedTailorInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput> | AppointmentCreateWithoutTailorInput[] | AppointmentUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTailorInput | AppointmentCreateOrConnectWithoutTailorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTailorInput | AppointmentUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AppointmentCreateManyTailorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTailorInput | AppointmentUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTailorInput | AppointmentUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AlterationJobUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput> | AlterationJobCreateWithoutTailorInput[] | AlterationJobUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutTailorInput | AlterationJobCreateOrConnectWithoutTailorInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutTailorInput | AlterationJobUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: AlterationJobCreateManyTailorInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutTailorInput | AlterationJobUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutTailorInput | AlterationJobUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput = {
    create?: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput> | SaleAssignmentCreateWithoutAssociateInput[] | SaleAssignmentUncheckedCreateWithoutAssociateInput[]
    connectOrCreate?: SaleAssignmentCreateOrConnectWithoutAssociateInput | SaleAssignmentCreateOrConnectWithoutAssociateInput[]
    upsert?: SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput[]
    createMany?: SaleAssignmentCreateManyAssociateInputEnvelope
    set?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    disconnect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    delete?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    connect?: SaleAssignmentWhereUniqueInput | SaleAssignmentWhereUniqueInput[]
    update?: SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput | SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput[]
    updateMany?: SaleAssignmentUpdateManyWithWhereWithoutAssociateInput | SaleAssignmentUpdateManyWithWhereWithoutAssociateInput[]
    deleteMany?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput> | SkillCreateWithoutUsersInput[] | SkillUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUsersInput | SkillCreateOrConnectWithoutUsersInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUsersInput | SkillUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUsersInput | SkillUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUsersInput | SkillUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput> | TailorAbilityCreateWithoutTailorInput[] | TailorAbilityUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTailorInput | TailorAbilityCreateOrConnectWithoutTailorInput[]
    upsert?: TailorAbilityUpsertWithWhereUniqueWithoutTailorInput | TailorAbilityUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: TailorAbilityCreateManyTailorInputEnvelope
    set?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    disconnect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    delete?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    update?: TailorAbilityUpdateWithWhereUniqueWithoutTailorInput | TailorAbilityUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: TailorAbilityUpdateManyWithWhereWithoutTailorInput | TailorAbilityUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
  }

  export type TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput = {
    create?: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput> | TailorScheduleCreateWithoutTailorInput[] | TailorScheduleUncheckedCreateWithoutTailorInput[]
    connectOrCreate?: TailorScheduleCreateOrConnectWithoutTailorInput | TailorScheduleCreateOrConnectWithoutTailorInput[]
    upsert?: TailorScheduleUpsertWithWhereUniqueWithoutTailorInput | TailorScheduleUpsertWithWhereUniqueWithoutTailorInput[]
    createMany?: TailorScheduleCreateManyTailorInputEnvelope
    set?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    disconnect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    delete?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    connect?: TailorScheduleWhereUniqueInput | TailorScheduleWhereUniqueInput[]
    update?: TailorScheduleUpdateWithWhereUniqueWithoutTailorInput | TailorScheduleUpdateWithWhereUniqueWithoutTailorInput[]
    updateMany?: TailorScheduleUpdateManyWithWhereWithoutTailorInput | TailorScheduleUpdateManyWithWhereWithoutTailorInput[]
    deleteMany?: TailorScheduleScalarWhereInput | TailorScheduleScalarWhereInput[]
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput> | AlterationJobPartCreateWithoutAssignedTailorInput[] | AlterationJobPartUncheckedCreateWithoutAssignedTailorInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutAssignedTailorInput | AlterationJobPartCreateOrConnectWithoutAssignedTailorInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutAssignedTailorInput | AlterationJobPartUpsertWithWhereUniqueWithoutAssignedTailorInput[]
    createMany?: AlterationJobPartCreateManyAssignedTailorInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutAssignedTailorInput | AlterationJobPartUpdateWithWhereUniqueWithoutAssignedTailorInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutAssignedTailorInput | AlterationJobPartUpdateManyWithWhereWithoutAssignedTailorInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutPartiesInput = {
    create?: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPartiesInput
    connect?: CustomerWhereUniqueInput
  }

  export type AlterationJobCreateNestedManyWithoutPartyInput = {
    create?: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput> | AlterationJobCreateWithoutPartyInput[] | AlterationJobUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutPartyInput | AlterationJobCreateOrConnectWithoutPartyInput[]
    createMany?: AlterationJobCreateManyPartyInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPartyInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyMemberCreateNestedManyWithoutPartyInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
  }

  export type AlterationJobUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput> | AlterationJobCreateWithoutPartyInput[] | AlterationJobUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutPartyInput | AlterationJobCreateOrConnectWithoutPartyInput[]
    createMany?: AlterationJobCreateManyPartyInputEnvelope
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyMemberUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CustomerUpdateOneRequiredWithoutPartiesNestedInput = {
    create?: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPartiesInput
    upsert?: CustomerUpsertWithoutPartiesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPartiesInput, CustomerUpdateWithoutPartiesInput>, CustomerUncheckedUpdateWithoutPartiesInput>
  }

  export type AlterationJobUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput> | AlterationJobCreateWithoutPartyInput[] | AlterationJobUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutPartyInput | AlterationJobCreateOrConnectWithoutPartyInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutPartyInput | AlterationJobUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AlterationJobCreateManyPartyInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutPartyInput | AlterationJobUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutPartyInput | AlterationJobUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPartyInput | AppointmentUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPartyInput | AppointmentUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPartyInput | AppointmentUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PartyMemberUpdateManyWithoutPartyNestedInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    upsert?: PartyMemberUpsertWithWhereUniqueWithoutPartyInput | PartyMemberUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    set?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    disconnect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    delete?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    update?: PartyMemberUpdateWithWhereUniqueWithoutPartyInput | PartyMemberUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: PartyMemberUpdateManyWithWhereWithoutPartyInput | PartyMemberUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
  }

  export type AlterationJobUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput> | AlterationJobCreateWithoutPartyInput[] | AlterationJobUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AlterationJobCreateOrConnectWithoutPartyInput | AlterationJobCreateOrConnectWithoutPartyInput[]
    upsert?: AlterationJobUpsertWithWhereUniqueWithoutPartyInput | AlterationJobUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AlterationJobCreateManyPartyInputEnvelope
    set?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    disconnect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    delete?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    connect?: AlterationJobWhereUniqueInput | AlterationJobWhereUniqueInput[]
    update?: AlterationJobUpdateWithWhereUniqueWithoutPartyInput | AlterationJobUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AlterationJobUpdateManyWithWhereWithoutPartyInput | AlterationJobUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput> | AppointmentCreateWithoutPartyInput[] | AppointmentUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPartyInput | AppointmentCreateOrConnectWithoutPartyInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPartyInput | AppointmentUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: AppointmentCreateManyPartyInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPartyInput | AppointmentUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPartyInput | AppointmentUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PartyMemberUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput> | PartyMemberCreateWithoutPartyInput[] | PartyMemberUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: PartyMemberCreateOrConnectWithoutPartyInput | PartyMemberCreateOrConnectWithoutPartyInput[]
    upsert?: PartyMemberUpsertWithWhereUniqueWithoutPartyInput | PartyMemberUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: PartyMemberCreateManyPartyInputEnvelope
    set?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    disconnect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    delete?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    connect?: PartyMemberWhereUniqueInput | PartyMemberWhereUniqueInput[]
    update?: PartyMemberUpdateWithWhereUniqueWithoutPartyInput | PartyMemberUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: PartyMemberUpdateManyWithWhereWithoutPartyInput | PartyMemberUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
  }

  export type PartyCreateNestedOneWithoutAlterationJobsInput = {
    create?: XOR<PartyCreateWithoutAlterationJobsInput, PartyUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAlterationJobsInput
    connect?: PartyWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutAlterationJobsInput = {
    create?: XOR<CustomerCreateWithoutAlterationJobsInput, CustomerUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAlterationJobsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAlterationJobsInput = {
    create?: XOR<UserCreateWithoutAlterationJobsInput, UserUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlterationJobsInput
    connect?: UserWhereUniqueInput
  }

  export type AlterationJobPartCreateNestedManyWithoutJobInput = {
    create?: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput> | AlterationJobPartCreateWithoutJobInput[] | AlterationJobPartUncheckedCreateWithoutJobInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutJobInput | AlterationJobPartCreateOrConnectWithoutJobInput[]
    createMany?: AlterationJobPartCreateManyJobInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type AlterationJobPartUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput> | AlterationJobPartCreateWithoutJobInput[] | AlterationJobPartUncheckedCreateWithoutJobInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutJobInput | AlterationJobPartCreateOrConnectWithoutJobInput[]
    createMany?: AlterationJobPartCreateManyJobInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartyUpdateOneWithoutAlterationJobsNestedInput = {
    create?: XOR<PartyCreateWithoutAlterationJobsInput, PartyUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAlterationJobsInput
    upsert?: PartyUpsertWithoutAlterationJobsInput
    disconnect?: PartyWhereInput | boolean
    delete?: PartyWhereInput | boolean
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutAlterationJobsInput, PartyUpdateWithoutAlterationJobsInput>, PartyUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type CustomerUpdateOneWithoutAlterationJobsNestedInput = {
    create?: XOR<CustomerCreateWithoutAlterationJobsInput, CustomerUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAlterationJobsInput
    upsert?: CustomerUpsertWithoutAlterationJobsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutAlterationJobsInput, CustomerUpdateWithoutAlterationJobsInput>, CustomerUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type UserUpdateOneWithoutAlterationJobsNestedInput = {
    create?: XOR<UserCreateWithoutAlterationJobsInput, UserUncheckedCreateWithoutAlterationJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlterationJobsInput
    upsert?: UserUpsertWithoutAlterationJobsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlterationJobsInput, UserUpdateWithoutAlterationJobsInput>, UserUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type AlterationJobPartUpdateManyWithoutJobNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput> | AlterationJobPartCreateWithoutJobInput[] | AlterationJobPartUncheckedCreateWithoutJobInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutJobInput | AlterationJobPartCreateOrConnectWithoutJobInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutJobInput | AlterationJobPartUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: AlterationJobPartCreateManyJobInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutJobInput | AlterationJobPartUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutJobInput | AlterationJobPartUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput> | AlterationJobPartCreateWithoutJobInput[] | AlterationJobPartUncheckedCreateWithoutJobInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutJobInput | AlterationJobPartCreateOrConnectWithoutJobInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutJobInput | AlterationJobPartUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: AlterationJobPartCreateManyJobInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutJobInput | AlterationJobPartUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutJobInput | AlterationJobPartUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type PartyCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAppointmentsInput
    connect?: PartyWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutChildrenInput = {
    create?: XOR<AppointmentCreateWithoutChildrenInput, AppointmentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutChildrenInput
    connect?: AppointmentWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutParentInput = {
    create?: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput> | AppointmentCreateWithoutParentInput[] | AppointmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutParentInput | AppointmentCreateOrConnectWithoutParentInput[]
    createMany?: AppointmentCreateManyParentInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyMemberCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAppointmentsInput
    connect?: PartyMemberWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type SyncLogCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput> | SyncLogCreateWithoutAppointmentInput[] | SyncLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutAppointmentInput | SyncLogCreateOrConnectWithoutAppointmentInput[]
    createMany?: SyncLogCreateManyAppointmentInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput> | AppointmentCreateWithoutParentInput[] | AppointmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutParentInput | AppointmentCreateOrConnectWithoutParentInput[]
    createMany?: AppointmentCreateManyParentInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type SyncLogUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput> | SyncLogCreateWithoutAppointmentInput[] | SyncLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutAppointmentInput | SyncLogCreateOrConnectWithoutAppointmentInput[]
    createMany?: SyncLogCreateManyAppointmentInputEnvelope
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
  }

  export type NullableEnumAppointmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentType | null
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type PartyUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyCreateOrConnectWithoutAppointmentsInput
    upsert?: PartyUpsertWithoutAppointmentsInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutAppointmentsInput, PartyUpdateWithoutAppointmentsInput>, PartyUncheckedUpdateWithoutAppointmentsInput>
  }

  export type AppointmentUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<AppointmentCreateWithoutChildrenInput, AppointmentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutChildrenInput
    upsert?: AppointmentUpsertWithoutChildrenInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutChildrenInput, AppointmentUpdateWithoutChildrenInput>, AppointmentUncheckedUpdateWithoutChildrenInput>
  }

  export type AppointmentUpdateManyWithoutParentNestedInput = {
    create?: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput> | AppointmentCreateWithoutParentInput[] | AppointmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutParentInput | AppointmentCreateOrConnectWithoutParentInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutParentInput | AppointmentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: AppointmentCreateManyParentInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutParentInput | AppointmentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutParentInput | AppointmentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PartyMemberUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PartyMemberCreateOrConnectWithoutAppointmentsInput
    upsert?: PartyMemberUpsertWithoutAppointmentsInput
    disconnect?: PartyMemberWhereInput | boolean
    delete?: PartyMemberWhereInput | boolean
    connect?: PartyMemberWhereUniqueInput
    update?: XOR<XOR<PartyMemberUpdateToOneWithWhereWithoutAppointmentsInput, PartyMemberUpdateWithoutAppointmentsInput>, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type SyncLogUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput> | SyncLogCreateWithoutAppointmentInput[] | SyncLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutAppointmentInput | SyncLogCreateOrConnectWithoutAppointmentInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutAppointmentInput | SyncLogUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: SyncLogCreateManyAppointmentInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutAppointmentInput | SyncLogUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutAppointmentInput | SyncLogUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput> | AppointmentCreateWithoutParentInput[] | AppointmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutParentInput | AppointmentCreateOrConnectWithoutParentInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutParentInput | AppointmentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: AppointmentCreateManyParentInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutParentInput | AppointmentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutParentInput | AppointmentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput> | SyncLogCreateWithoutAppointmentInput[] | SyncLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: SyncLogCreateOrConnectWithoutAppointmentInput | SyncLogCreateOrConnectWithoutAppointmentInput[]
    upsert?: SyncLogUpsertWithWhereUniqueWithoutAppointmentInput | SyncLogUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: SyncLogCreateManyAppointmentInputEnvelope
    set?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    disconnect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    delete?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    connect?: SyncLogWhereUniqueInput | SyncLogWhereUniqueInput[]
    update?: SyncLogUpdateWithWhereUniqueWithoutAppointmentInput | SyncLogUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: SyncLogUpdateManyWithWhereWithoutAppointmentInput | SyncLogUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
  }

  export type AppointmentCreateNestedOneWithoutSyncLogsInput = {
    create?: XOR<AppointmentCreateWithoutSyncLogsInput, AppointmentUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutSyncLogsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type EnumSyncDirectionFieldUpdateOperationsInput = {
    set?: $Enums.SyncDirection
  }

  export type EnumSyncStatusFieldUpdateOperationsInput = {
    set?: $Enums.SyncStatus
  }

  export type AppointmentUpdateOneRequiredWithoutSyncLogsNestedInput = {
    create?: XOR<AppointmentCreateWithoutSyncLogsInput, AppointmentUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutSyncLogsInput
    upsert?: AppointmentUpsertWithoutSyncLogsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutSyncLogsInput, AppointmentUpdateWithoutSyncLogsInput>, AppointmentUncheckedUpdateWithoutSyncLogsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type PartyCreateNestedOneWithoutMembersInput = {
    create?: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: PartyCreateOrConnectWithoutMembersInput
    connect?: PartyWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutMemberInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PartyUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: PartyCreateOrConnectWithoutMembersInput
    upsert?: PartyUpsertWithoutMembersInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutMembersInput, PartyUpdateWithoutMembersInput>, PartyUncheckedUpdateWithoutMembersInput>
  }

  export type AppointmentUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutMemberInput | AppointmentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutMemberInput | AppointmentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutMemberInput | AppointmentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput> | AppointmentCreateWithoutMemberInput[] | AppointmentUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutMemberInput | AppointmentCreateOrConnectWithoutMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutMemberInput | AppointmentUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AppointmentCreateManyMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutMemberInput | AppointmentUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutMemberInput | AppointmentUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSaleAssignmentsInput = {
    create?: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSaleAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleAssignmentsInput
    upsert?: UserUpsertWithoutSaleAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSaleAssignmentsInput, UserUpdateWithoutSaleAssignmentsInput>, UserUncheckedUpdateWithoutSaleAssignmentsInput>
  }

  export type UserCreateNestedManyWithoutSkillsInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSkillsInput | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSkillsInput | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSkillsInput | UserUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput> | UserCreateWithoutSkillsInput[] | UserUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSkillsInput | UserCreateOrConnectWithoutSkillsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSkillsInput | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSkillsInput | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSkillsInput | UserUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TailorAbilityCreateNestedManyWithoutTaskTypeInput = {
    create?: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput> | TailorAbilityCreateWithoutTaskTypeInput[] | TailorAbilityUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTaskTypeInput | TailorAbilityCreateOrConnectWithoutTaskTypeInput[]
    createMany?: TailorAbilityCreateManyTaskTypeInputEnvelope
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
  }

  export type AlterationJobPartCreateNestedManyWithoutTaskTypeInput = {
    create?: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput> | AlterationJobPartCreateWithoutTaskTypeInput[] | AlterationJobPartUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutTaskTypeInput | AlterationJobPartCreateOrConnectWithoutTaskTypeInput[]
    createMany?: AlterationJobPartCreateManyTaskTypeInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type TailorAbilityUncheckedCreateNestedManyWithoutTaskTypeInput = {
    create?: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput> | TailorAbilityCreateWithoutTaskTypeInput[] | TailorAbilityUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTaskTypeInput | TailorAbilityCreateOrConnectWithoutTaskTypeInput[]
    createMany?: TailorAbilityCreateManyTaskTypeInputEnvelope
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
  }

  export type AlterationJobPartUncheckedCreateNestedManyWithoutTaskTypeInput = {
    create?: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput> | AlterationJobPartCreateWithoutTaskTypeInput[] | AlterationJobPartUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutTaskTypeInput | AlterationJobPartCreateOrConnectWithoutTaskTypeInput[]
    createMany?: AlterationJobPartCreateManyTaskTypeInputEnvelope
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
  }

  export type TailorAbilityUpdateManyWithoutTaskTypeNestedInput = {
    create?: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput> | TailorAbilityCreateWithoutTaskTypeInput[] | TailorAbilityUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTaskTypeInput | TailorAbilityCreateOrConnectWithoutTaskTypeInput[]
    upsert?: TailorAbilityUpsertWithWhereUniqueWithoutTaskTypeInput | TailorAbilityUpsertWithWhereUniqueWithoutTaskTypeInput[]
    createMany?: TailorAbilityCreateManyTaskTypeInputEnvelope
    set?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    disconnect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    delete?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    update?: TailorAbilityUpdateWithWhereUniqueWithoutTaskTypeInput | TailorAbilityUpdateWithWhereUniqueWithoutTaskTypeInput[]
    updateMany?: TailorAbilityUpdateManyWithWhereWithoutTaskTypeInput | TailorAbilityUpdateManyWithWhereWithoutTaskTypeInput[]
    deleteMany?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
  }

  export type AlterationJobPartUpdateManyWithoutTaskTypeNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput> | AlterationJobPartCreateWithoutTaskTypeInput[] | AlterationJobPartUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutTaskTypeInput | AlterationJobPartCreateOrConnectWithoutTaskTypeInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutTaskTypeInput | AlterationJobPartUpsertWithWhereUniqueWithoutTaskTypeInput[]
    createMany?: AlterationJobPartCreateManyTaskTypeInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutTaskTypeInput | AlterationJobPartUpdateWithWhereUniqueWithoutTaskTypeInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutTaskTypeInput | AlterationJobPartUpdateManyWithWhereWithoutTaskTypeInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type TailorAbilityUncheckedUpdateManyWithoutTaskTypeNestedInput = {
    create?: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput> | TailorAbilityCreateWithoutTaskTypeInput[] | TailorAbilityUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: TailorAbilityCreateOrConnectWithoutTaskTypeInput | TailorAbilityCreateOrConnectWithoutTaskTypeInput[]
    upsert?: TailorAbilityUpsertWithWhereUniqueWithoutTaskTypeInput | TailorAbilityUpsertWithWhereUniqueWithoutTaskTypeInput[]
    createMany?: TailorAbilityCreateManyTaskTypeInputEnvelope
    set?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    disconnect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    delete?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    connect?: TailorAbilityWhereUniqueInput | TailorAbilityWhereUniqueInput[]
    update?: TailorAbilityUpdateWithWhereUniqueWithoutTaskTypeInput | TailorAbilityUpdateWithWhereUniqueWithoutTaskTypeInput[]
    updateMany?: TailorAbilityUpdateManyWithWhereWithoutTaskTypeInput | TailorAbilityUpdateManyWithWhereWithoutTaskTypeInput[]
    deleteMany?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutTaskTypeNestedInput = {
    create?: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput> | AlterationJobPartCreateWithoutTaskTypeInput[] | AlterationJobPartUncheckedCreateWithoutTaskTypeInput[]
    connectOrCreate?: AlterationJobPartCreateOrConnectWithoutTaskTypeInput | AlterationJobPartCreateOrConnectWithoutTaskTypeInput[]
    upsert?: AlterationJobPartUpsertWithWhereUniqueWithoutTaskTypeInput | AlterationJobPartUpsertWithWhereUniqueWithoutTaskTypeInput[]
    createMany?: AlterationJobPartCreateManyTaskTypeInputEnvelope
    set?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    disconnect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    delete?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    connect?: AlterationJobPartWhereUniqueInput | AlterationJobPartWhereUniqueInput[]
    update?: AlterationJobPartUpdateWithWhereUniqueWithoutTaskTypeInput | AlterationJobPartUpdateWithWhereUniqueWithoutTaskTypeInput[]
    updateMany?: AlterationJobPartUpdateManyWithWhereWithoutTaskTypeInput | AlterationJobPartUpdateManyWithWhereWithoutTaskTypeInput[]
    deleteMany?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTailorAbilitiesInput = {
    create?: XOR<UserCreateWithoutTailorAbilitiesInput, UserUncheckedCreateWithoutTailorAbilitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTailorAbilitiesInput
    connect?: UserWhereUniqueInput
  }

  export type AlterationTaskTypeCreateNestedOneWithoutAbilitiesInput = {
    create?: XOR<AlterationTaskTypeCreateWithoutAbilitiesInput, AlterationTaskTypeUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: AlterationTaskTypeCreateOrConnectWithoutAbilitiesInput
    connect?: AlterationTaskTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTailorAbilitiesNestedInput = {
    create?: XOR<UserCreateWithoutTailorAbilitiesInput, UserUncheckedCreateWithoutTailorAbilitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTailorAbilitiesInput
    upsert?: UserUpsertWithoutTailorAbilitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTailorAbilitiesInput, UserUpdateWithoutTailorAbilitiesInput>, UserUncheckedUpdateWithoutTailorAbilitiesInput>
  }

  export type AlterationTaskTypeUpdateOneRequiredWithoutAbilitiesNestedInput = {
    create?: XOR<AlterationTaskTypeCreateWithoutAbilitiesInput, AlterationTaskTypeUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: AlterationTaskTypeCreateOrConnectWithoutAbilitiesInput
    upsert?: AlterationTaskTypeUpsertWithoutAbilitiesInput
    connect?: AlterationTaskTypeWhereUniqueInput
    update?: XOR<XOR<AlterationTaskTypeUpdateToOneWithWhereWithoutAbilitiesInput, AlterationTaskTypeUpdateWithoutAbilitiesInput>, AlterationTaskTypeUncheckedUpdateWithoutAbilitiesInput>
  }

  export type UserCreateNestedOneWithoutTailorSchedulesInput = {
    create?: XOR<UserCreateWithoutTailorSchedulesInput, UserUncheckedCreateWithoutTailorSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTailorSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTailorSchedulesNestedInput = {
    create?: XOR<UserCreateWithoutTailorSchedulesInput, UserUncheckedCreateWithoutTailorSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTailorSchedulesInput
    upsert?: UserUpsertWithoutTailorSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTailorSchedulesInput, UserUpdateWithoutTailorSchedulesInput>, UserUncheckedUpdateWithoutTailorSchedulesInput>
  }

  export type AlterationJobCreateNestedOneWithoutJobPartsInput = {
    create?: XOR<AlterationJobCreateWithoutJobPartsInput, AlterationJobUncheckedCreateWithoutJobPartsInput>
    connectOrCreate?: AlterationJobCreateOrConnectWithoutJobPartsInput
    connect?: AlterationJobWhereUniqueInput
  }

  export type AlterationTaskTypeCreateNestedOneWithoutJobPartsInput = {
    create?: XOR<AlterationTaskTypeCreateWithoutJobPartsInput, AlterationTaskTypeUncheckedCreateWithoutJobPartsInput>
    connectOrCreate?: AlterationTaskTypeCreateOrConnectWithoutJobPartsInput
    connect?: AlterationTaskTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedJobPartsInput = {
    create?: XOR<UserCreateWithoutAssignedJobPartsInput, UserUncheckedCreateWithoutAssignedJobPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedJobPartsInput
    connect?: UserWhereUniqueInput
  }

  export type AlterationJobUpdateOneRequiredWithoutJobPartsNestedInput = {
    create?: XOR<AlterationJobCreateWithoutJobPartsInput, AlterationJobUncheckedCreateWithoutJobPartsInput>
    connectOrCreate?: AlterationJobCreateOrConnectWithoutJobPartsInput
    upsert?: AlterationJobUpsertWithoutJobPartsInput
    connect?: AlterationJobWhereUniqueInput
    update?: XOR<XOR<AlterationJobUpdateToOneWithWhereWithoutJobPartsInput, AlterationJobUpdateWithoutJobPartsInput>, AlterationJobUncheckedUpdateWithoutJobPartsInput>
  }

  export type AlterationTaskTypeUpdateOneRequiredWithoutJobPartsNestedInput = {
    create?: XOR<AlterationTaskTypeCreateWithoutJobPartsInput, AlterationTaskTypeUncheckedCreateWithoutJobPartsInput>
    connectOrCreate?: AlterationTaskTypeCreateOrConnectWithoutJobPartsInput
    upsert?: AlterationTaskTypeUpsertWithoutJobPartsInput
    connect?: AlterationTaskTypeWhereUniqueInput
    update?: XOR<XOR<AlterationTaskTypeUpdateToOneWithWhereWithoutJobPartsInput, AlterationTaskTypeUpdateWithoutJobPartsInput>, AlterationTaskTypeUncheckedUpdateWithoutJobPartsInput>
  }

  export type UserUpdateOneWithoutAssignedJobPartsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedJobPartsInput, UserUncheckedCreateWithoutAssignedJobPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedJobPartsInput
    upsert?: UserUpsertWithoutAssignedJobPartsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedJobPartsInput, UserUpdateWithoutAssignedJobPartsInput>, UserUncheckedUpdateWithoutAssignedJobPartsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAppointmentTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AppointmentType[] | null
    notIn?: $Enums.AppointmentType[] | null
    not?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel> | $Enums.AppointmentType | null
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AppointmentType[] | null
    notIn?: $Enums.AppointmentType[] | null
    not?: NestedEnumAppointmentTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumSyncDirectionFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[]
    notIn?: $Enums.SyncDirection[]
    not?: NestedEnumSyncDirectionFilter<$PrismaModel> | $Enums.SyncDirection
  }

  export type NestedEnumSyncStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[]
    notIn?: $Enums.SyncStatus[]
    not?: NestedEnumSyncStatusFilter<$PrismaModel> | $Enums.SyncStatus
  }

  export type NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncDirection | EnumSyncDirectionFieldRefInput<$PrismaModel>
    in?: $Enums.SyncDirection[]
    notIn?: $Enums.SyncDirection[]
    not?: NestedEnumSyncDirectionWithAggregatesFilter<$PrismaModel> | $Enums.SyncDirection
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncDirectionFilter<$PrismaModel>
    _max?: NestedEnumSyncDirectionFilter<$PrismaModel>
  }

  export type NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncStatus | EnumSyncStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncStatus[]
    notIn?: $Enums.SyncStatus[]
    not?: NestedEnumSyncStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PartyCreateWithoutCustomerInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterationJobs?: AlterationJobCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutCustomerInput = {
    id?: number
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput>
  }

  export type PartyCreateManyCustomerInputEnvelope = {
    data: PartyCreateManyCustomerInput | PartyCreateManyCustomerInput[]
  }

  export type AlterationJobCreateWithoutCustomerInput = {
    saleLineItemId: number
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    party?: PartyCreateNestedOneWithoutAlterationJobsInput
    tailor?: UserCreateNestedOneWithoutAlterationJobsInput
    jobParts?: AlterationJobPartCreateNestedManyWithoutJobInput
  }

  export type AlterationJobUncheckedCreateWithoutCustomerInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutJobInput
  }

  export type AlterationJobCreateOrConnectWithoutCustomerInput = {
    where: AlterationJobWhereUniqueInput
    create: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput>
  }

  export type AlterationJobCreateManyCustomerInputEnvelope = {
    data: AlterationJobCreateManyCustomerInput | AlterationJobCreateManyCustomerInput[]
  }

  export type PartyUpsertWithWhereUniqueWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    update: XOR<PartyUpdateWithoutCustomerInput, PartyUncheckedUpdateWithoutCustomerInput>
    create: XOR<PartyCreateWithoutCustomerInput, PartyUncheckedCreateWithoutCustomerInput>
  }

  export type PartyUpdateWithWhereUniqueWithoutCustomerInput = {
    where: PartyWhereUniqueInput
    data: XOR<PartyUpdateWithoutCustomerInput, PartyUncheckedUpdateWithoutCustomerInput>
  }

  export type PartyUpdateManyWithWhereWithoutCustomerInput = {
    where: PartyScalarWhereInput
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PartyScalarWhereInput = {
    AND?: PartyScalarWhereInput | PartyScalarWhereInput[]
    OR?: PartyScalarWhereInput[]
    NOT?: PartyScalarWhereInput | PartyScalarWhereInput[]
    id?: IntFilter<"Party"> | number
    name?: StringFilter<"Party"> | string
    eventDate?: DateTimeFilter<"Party"> | Date | string
    customerId?: IntFilter<"Party"> | number
    externalId?: StringNullableFilter<"Party"> | string | null
    syncedAt?: DateTimeNullableFilter<"Party"> | Date | string | null
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    notes?: StringNullableFilter<"Party"> | string | null
    syncedToLs?: BoolFilter<"Party"> | boolean
    lsPartyId?: StringNullableFilter<"Party"> | string | null
  }

  export type AlterationJobUpsertWithWhereUniqueWithoutCustomerInput = {
    where: AlterationJobWhereUniqueInput
    update: XOR<AlterationJobUpdateWithoutCustomerInput, AlterationJobUncheckedUpdateWithoutCustomerInput>
    create: XOR<AlterationJobCreateWithoutCustomerInput, AlterationJobUncheckedCreateWithoutCustomerInput>
  }

  export type AlterationJobUpdateWithWhereUniqueWithoutCustomerInput = {
    where: AlterationJobWhereUniqueInput
    data: XOR<AlterationJobUpdateWithoutCustomerInput, AlterationJobUncheckedUpdateWithoutCustomerInput>
  }

  export type AlterationJobUpdateManyWithWhereWithoutCustomerInput = {
    where: AlterationJobScalarWhereInput
    data: XOR<AlterationJobUpdateManyMutationInput, AlterationJobUncheckedUpdateManyWithoutCustomerInput>
  }

  export type AlterationJobScalarWhereInput = {
    AND?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
    OR?: AlterationJobScalarWhereInput[]
    NOT?: AlterationJobScalarWhereInput | AlterationJobScalarWhereInput[]
    id?: IntFilter<"AlterationJob"> | number
    saleLineItemId?: IntFilter<"AlterationJob"> | number
    partyId?: IntNullableFilter<"AlterationJob"> | number | null
    customerId?: IntNullableFilter<"AlterationJob"> | number | null
    notes?: StringNullableFilter<"AlterationJob"> | string | null
    status?: StringFilter<"AlterationJob"> | string
    timeSpentMinutes?: IntNullableFilter<"AlterationJob"> | number | null
    tailorId?: IntNullableFilter<"AlterationJob"> | number | null
    measurements?: JsonNullableFilter<"AlterationJob">
    createdAt?: DateTimeFilter<"AlterationJob"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJob"> | Date | string
  }

  export type AppointmentCreateWithoutTailorInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutTailorInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput>
  }

  export type AppointmentCreateManyTailorInputEnvelope = {
    data: AppointmentCreateManyTailorInput | AppointmentCreateManyTailorInput[]
  }

  export type AlterationJobCreateWithoutTailorInput = {
    saleLineItemId: number
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    party?: PartyCreateNestedOneWithoutAlterationJobsInput
    customer?: CustomerCreateNestedOneWithoutAlterationJobsInput
    jobParts?: AlterationJobPartCreateNestedManyWithoutJobInput
  }

  export type AlterationJobUncheckedCreateWithoutTailorInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutJobInput
  }

  export type AlterationJobCreateOrConnectWithoutTailorInput = {
    where: AlterationJobWhereUniqueInput
    create: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput>
  }

  export type AlterationJobCreateManyTailorInputEnvelope = {
    data: AlterationJobCreateManyTailorInput | AlterationJobCreateManyTailorInput[]
  }

  export type AuditLogCreateWithoutUserInput = {
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
  }

  export type SaleAssignmentCreateWithoutAssociateInput = {
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentUncheckedCreateWithoutAssociateInput = {
    id?: number
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SaleAssignmentCreateOrConnectWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    create: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput>
  }

  export type SaleAssignmentCreateManyAssociateInputEnvelope = {
    data: SaleAssignmentCreateManyAssociateInput | SaleAssignmentCreateManyAssociateInput[]
  }

  export type SkillCreateWithoutUsersInput = {
    name: string
  }

  export type SkillUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type SkillCreateOrConnectWithoutUsersInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput>
  }

  export type TailorAbilityCreateWithoutTailorInput = {
    proficiency: number
    taskType: AlterationTaskTypeCreateNestedOneWithoutAbilitiesInput
  }

  export type TailorAbilityUncheckedCreateWithoutTailorInput = {
    id?: number
    taskTypeId: number
    proficiency: number
  }

  export type TailorAbilityCreateOrConnectWithoutTailorInput = {
    where: TailorAbilityWhereUniqueInput
    create: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput>
  }

  export type TailorAbilityCreateManyTailorInputEnvelope = {
    data: TailorAbilityCreateManyTailorInput | TailorAbilityCreateManyTailorInput[]
  }

  export type TailorScheduleCreateWithoutTailorInput = {
    dayOfWeek: number
    startTime: string
    endTime: string
  }

  export type TailorScheduleUncheckedCreateWithoutTailorInput = {
    id?: number
    dayOfWeek: number
    startTime: string
    endTime: string
  }

  export type TailorScheduleCreateOrConnectWithoutTailorInput = {
    where: TailorScheduleWhereUniqueInput
    create: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput>
  }

  export type TailorScheduleCreateManyTailorInputEnvelope = {
    data: TailorScheduleCreateManyTailorInput | TailorScheduleCreateManyTailorInput[]
  }

  export type AlterationJobPartCreateWithoutAssignedTailorInput = {
    part: string
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: AlterationJobCreateNestedOneWithoutJobPartsInput
    taskType: AlterationTaskTypeCreateNestedOneWithoutJobPartsInput
  }

  export type AlterationJobPartUncheckedCreateWithoutAssignedTailorInput = {
    id?: number
    jobId: number
    part: string
    taskTypeId: number
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartCreateOrConnectWithoutAssignedTailorInput = {
    where: AlterationJobPartWhereUniqueInput
    create: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput>
  }

  export type AlterationJobPartCreateManyAssignedTailorInputEnvelope = {
    data: AlterationJobPartCreateManyAssignedTailorInput | AlterationJobPartCreateManyAssignedTailorInput[]
  }

  export type AppointmentUpsertWithWhereUniqueWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutTailorInput, AppointmentUncheckedUpdateWithoutTailorInput>
    create: XOR<AppointmentCreateWithoutTailorInput, AppointmentUncheckedCreateWithoutTailorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutTailorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutTailorInput, AppointmentUncheckedUpdateWithoutTailorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutTailorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutTailorInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: IntFilter<"Appointment"> | number
    partyId?: IntFilter<"Appointment"> | number
    customerId?: StringNullableFilter<"Appointment"> | string | null
    saleId?: StringNullableFilter<"Appointment"> | string | null
    dateTime?: DateTimeFilter<"Appointment"> | Date | string
    durationMinutes?: IntNullableFilter<"Appointment"> | number | null
    type?: EnumAppointmentTypeNullableFilter<"Appointment"> | $Enums.AppointmentType | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFilter<"Appointment"> | boolean
    recurrenceRule?: StringNullableFilter<"Appointment"> | string | null
    parentId?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    memberId?: IntNullableFilter<"Appointment"> | number | null
    tailorId?: IntNullableFilter<"Appointment"> | number | null
    lsEventId?: StringNullableFilter<"Appointment"> | string | null
  }

  export type AlterationJobUpsertWithWhereUniqueWithoutTailorInput = {
    where: AlterationJobWhereUniqueInput
    update: XOR<AlterationJobUpdateWithoutTailorInput, AlterationJobUncheckedUpdateWithoutTailorInput>
    create: XOR<AlterationJobCreateWithoutTailorInput, AlterationJobUncheckedCreateWithoutTailorInput>
  }

  export type AlterationJobUpdateWithWhereUniqueWithoutTailorInput = {
    where: AlterationJobWhereUniqueInput
    data: XOR<AlterationJobUpdateWithoutTailorInput, AlterationJobUncheckedUpdateWithoutTailorInput>
  }

  export type AlterationJobUpdateManyWithWhereWithoutTailorInput = {
    where: AlterationJobScalarWhereInput
    data: XOR<AlterationJobUpdateManyMutationInput, AlterationJobUncheckedUpdateManyWithoutTailorInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: IntFilter<"AuditLog"> | number
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type SaleAssignmentUpsertWithWhereUniqueWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    update: XOR<SaleAssignmentUpdateWithoutAssociateInput, SaleAssignmentUncheckedUpdateWithoutAssociateInput>
    create: XOR<SaleAssignmentCreateWithoutAssociateInput, SaleAssignmentUncheckedCreateWithoutAssociateInput>
  }

  export type SaleAssignmentUpdateWithWhereUniqueWithoutAssociateInput = {
    where: SaleAssignmentWhereUniqueInput
    data: XOR<SaleAssignmentUpdateWithoutAssociateInput, SaleAssignmentUncheckedUpdateWithoutAssociateInput>
  }

  export type SaleAssignmentUpdateManyWithWhereWithoutAssociateInput = {
    where: SaleAssignmentScalarWhereInput
    data: XOR<SaleAssignmentUpdateManyMutationInput, SaleAssignmentUncheckedUpdateManyWithoutAssociateInput>
  }

  export type SaleAssignmentScalarWhereInput = {
    AND?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
    OR?: SaleAssignmentScalarWhereInput[]
    NOT?: SaleAssignmentScalarWhereInput | SaleAssignmentScalarWhereInput[]
    id?: IntFilter<"SaleAssignment"> | number
    saleId?: StringFilter<"SaleAssignment"> | string
    associateId?: IntFilter<"SaleAssignment"> | number
    commissionRate?: FloatFilter<"SaleAssignment"> | number
    amount?: FloatFilter<"SaleAssignment"> | number
    createdAt?: DateTimeFilter<"SaleAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"SaleAssignment"> | Date | string
  }

  export type SkillUpsertWithWhereUniqueWithoutUsersInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutUsersInput, SkillUncheckedUpdateWithoutUsersInput>
    create: XOR<SkillCreateWithoutUsersInput, SkillUncheckedCreateWithoutUsersInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutUsersInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutUsersInput, SkillUncheckedUpdateWithoutUsersInput>
  }

  export type SkillUpdateManyWithWhereWithoutUsersInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutUsersInput>
  }

  export type SkillScalarWhereInput = {
    AND?: SkillScalarWhereInput | SkillScalarWhereInput[]
    OR?: SkillScalarWhereInput[]
    NOT?: SkillScalarWhereInput | SkillScalarWhereInput[]
    id?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
  }

  export type TailorAbilityUpsertWithWhereUniqueWithoutTailorInput = {
    where: TailorAbilityWhereUniqueInput
    update: XOR<TailorAbilityUpdateWithoutTailorInput, TailorAbilityUncheckedUpdateWithoutTailorInput>
    create: XOR<TailorAbilityCreateWithoutTailorInput, TailorAbilityUncheckedCreateWithoutTailorInput>
  }

  export type TailorAbilityUpdateWithWhereUniqueWithoutTailorInput = {
    where: TailorAbilityWhereUniqueInput
    data: XOR<TailorAbilityUpdateWithoutTailorInput, TailorAbilityUncheckedUpdateWithoutTailorInput>
  }

  export type TailorAbilityUpdateManyWithWhereWithoutTailorInput = {
    where: TailorAbilityScalarWhereInput
    data: XOR<TailorAbilityUpdateManyMutationInput, TailorAbilityUncheckedUpdateManyWithoutTailorInput>
  }

  export type TailorAbilityScalarWhereInput = {
    AND?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
    OR?: TailorAbilityScalarWhereInput[]
    NOT?: TailorAbilityScalarWhereInput | TailorAbilityScalarWhereInput[]
    id?: IntFilter<"TailorAbility"> | number
    tailorId?: IntFilter<"TailorAbility"> | number
    taskTypeId?: IntFilter<"TailorAbility"> | number
    proficiency?: IntFilter<"TailorAbility"> | number
  }

  export type TailorScheduleUpsertWithWhereUniqueWithoutTailorInput = {
    where: TailorScheduleWhereUniqueInput
    update: XOR<TailorScheduleUpdateWithoutTailorInput, TailorScheduleUncheckedUpdateWithoutTailorInput>
    create: XOR<TailorScheduleCreateWithoutTailorInput, TailorScheduleUncheckedCreateWithoutTailorInput>
  }

  export type TailorScheduleUpdateWithWhereUniqueWithoutTailorInput = {
    where: TailorScheduleWhereUniqueInput
    data: XOR<TailorScheduleUpdateWithoutTailorInput, TailorScheduleUncheckedUpdateWithoutTailorInput>
  }

  export type TailorScheduleUpdateManyWithWhereWithoutTailorInput = {
    where: TailorScheduleScalarWhereInput
    data: XOR<TailorScheduleUpdateManyMutationInput, TailorScheduleUncheckedUpdateManyWithoutTailorInput>
  }

  export type TailorScheduleScalarWhereInput = {
    AND?: TailorScheduleScalarWhereInput | TailorScheduleScalarWhereInput[]
    OR?: TailorScheduleScalarWhereInput[]
    NOT?: TailorScheduleScalarWhereInput | TailorScheduleScalarWhereInput[]
    id?: IntFilter<"TailorSchedule"> | number
    tailorId?: IntFilter<"TailorSchedule"> | number
    dayOfWeek?: IntFilter<"TailorSchedule"> | number
    startTime?: StringFilter<"TailorSchedule"> | string
    endTime?: StringFilter<"TailorSchedule"> | string
  }

  export type AlterationJobPartUpsertWithWhereUniqueWithoutAssignedTailorInput = {
    where: AlterationJobPartWhereUniqueInput
    update: XOR<AlterationJobPartUpdateWithoutAssignedTailorInput, AlterationJobPartUncheckedUpdateWithoutAssignedTailorInput>
    create: XOR<AlterationJobPartCreateWithoutAssignedTailorInput, AlterationJobPartUncheckedCreateWithoutAssignedTailorInput>
  }

  export type AlterationJobPartUpdateWithWhereUniqueWithoutAssignedTailorInput = {
    where: AlterationJobPartWhereUniqueInput
    data: XOR<AlterationJobPartUpdateWithoutAssignedTailorInput, AlterationJobPartUncheckedUpdateWithoutAssignedTailorInput>
  }

  export type AlterationJobPartUpdateManyWithWhereWithoutAssignedTailorInput = {
    where: AlterationJobPartScalarWhereInput
    data: XOR<AlterationJobPartUpdateManyMutationInput, AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorInput>
  }

  export type AlterationJobPartScalarWhereInput = {
    AND?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
    OR?: AlterationJobPartScalarWhereInput[]
    NOT?: AlterationJobPartScalarWhereInput | AlterationJobPartScalarWhereInput[]
    id?: IntFilter<"AlterationJobPart"> | number
    jobId?: IntFilter<"AlterationJobPart"> | number
    part?: StringFilter<"AlterationJobPart"> | string
    taskTypeId?: IntFilter<"AlterationJobPart"> | number
    assignedTailorId?: IntNullableFilter<"AlterationJobPart"> | number | null
    scheduledTime?: DateTimeNullableFilter<"AlterationJobPart"> | Date | string | null
    duration?: IntNullableFilter<"AlterationJobPart"> | number | null
    status?: StringFilter<"AlterationJobPart"> | string
    notes?: StringNullableFilter<"AlterationJobPart"> | string | null
    createdAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
    updatedAt?: DateTimeFilter<"AlterationJobPart"> | Date | string
  }

  export type CustomerCreateWithoutPartiesInput = {
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    alterationJobs?: AlterationJobCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPartiesInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPartiesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
  }

  export type AlterationJobCreateWithoutPartyInput = {
    saleLineItemId: number
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAlterationJobsInput
    tailor?: UserCreateNestedOneWithoutAlterationJobsInput
    jobParts?: AlterationJobPartCreateNestedManyWithoutJobInput
  }

  export type AlterationJobUncheckedCreateWithoutPartyInput = {
    id?: number
    saleLineItemId: number
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutJobInput
  }

  export type AlterationJobCreateOrConnectWithoutPartyInput = {
    where: AlterationJobWhereUniqueInput
    create: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput>
  }

  export type AlterationJobCreateManyPartyInputEnvelope = {
    data: AlterationJobCreateManyPartyInput | AlterationJobCreateManyPartyInput[]
  }

  export type AppointmentCreateWithoutPartyInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPartyInput = {
    id?: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput>
  }

  export type AppointmentCreateManyPartyInputEnvelope = {
    data: AppointmentCreateManyPartyInput | AppointmentCreateManyPartyInput[]
  }

  export type PartyMemberCreateWithoutPartyInput = {
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberUncheckedCreateWithoutPartyInput = {
    id?: number
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentUncheckedCreateNestedManyWithoutMemberInput
  }

  export type PartyMemberCreateOrConnectWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    create: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput>
  }

  export type PartyMemberCreateManyPartyInputEnvelope = {
    data: PartyMemberCreateManyPartyInput | PartyMemberCreateManyPartyInput[]
  }

  export type CustomerUpsertWithoutPartiesInput = {
    update: XOR<CustomerUpdateWithoutPartiesInput, CustomerUncheckedUpdateWithoutPartiesInput>
    create: XOR<CustomerCreateWithoutPartiesInput, CustomerUncheckedCreateWithoutPartiesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPartiesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPartiesInput, CustomerUncheckedUpdateWithoutPartiesInput>
  }

  export type CustomerUpdateWithoutPartiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterationJobs?: AlterationJobUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPartiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type AlterationJobUpsertWithWhereUniqueWithoutPartyInput = {
    where: AlterationJobWhereUniqueInput
    update: XOR<AlterationJobUpdateWithoutPartyInput, AlterationJobUncheckedUpdateWithoutPartyInput>
    create: XOR<AlterationJobCreateWithoutPartyInput, AlterationJobUncheckedCreateWithoutPartyInput>
  }

  export type AlterationJobUpdateWithWhereUniqueWithoutPartyInput = {
    where: AlterationJobWhereUniqueInput
    data: XOR<AlterationJobUpdateWithoutPartyInput, AlterationJobUncheckedUpdateWithoutPartyInput>
  }

  export type AlterationJobUpdateManyWithWhereWithoutPartyInput = {
    where: AlterationJobScalarWhereInput
    data: XOR<AlterationJobUpdateManyMutationInput, AlterationJobUncheckedUpdateManyWithoutPartyInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPartyInput, AppointmentUncheckedUpdateWithoutPartyInput>
    create: XOR<AppointmentCreateWithoutPartyInput, AppointmentUncheckedCreateWithoutPartyInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPartyInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPartyInput, AppointmentUncheckedUpdateWithoutPartyInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPartyInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPartyInput>
  }

  export type PartyMemberUpsertWithWhereUniqueWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    update: XOR<PartyMemberUpdateWithoutPartyInput, PartyMemberUncheckedUpdateWithoutPartyInput>
    create: XOR<PartyMemberCreateWithoutPartyInput, PartyMemberUncheckedCreateWithoutPartyInput>
  }

  export type PartyMemberUpdateWithWhereUniqueWithoutPartyInput = {
    where: PartyMemberWhereUniqueInput
    data: XOR<PartyMemberUpdateWithoutPartyInput, PartyMemberUncheckedUpdateWithoutPartyInput>
  }

  export type PartyMemberUpdateManyWithWhereWithoutPartyInput = {
    where: PartyMemberScalarWhereInput
    data: XOR<PartyMemberUpdateManyMutationInput, PartyMemberUncheckedUpdateManyWithoutPartyInput>
  }

  export type PartyMemberScalarWhereInput = {
    AND?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
    OR?: PartyMemberScalarWhereInput[]
    NOT?: PartyMemberScalarWhereInput | PartyMemberScalarWhereInput[]
    id?: IntFilter<"PartyMember"> | number
    partyId?: IntFilter<"PartyMember"> | number
    lsCustomerId?: StringNullableFilter<"PartyMember"> | string | null
    role?: StringFilter<"PartyMember"> | string
    notes?: StringNullableFilter<"PartyMember"> | string | null
    status?: StringFilter<"PartyMember"> | string
    createdAt?: DateTimeFilter<"PartyMember"> | Date | string
    updatedAt?: DateTimeFilter<"PartyMember"> | Date | string
    measurements?: JsonNullableFilter<"PartyMember">
  }

  export type PartyCreateWithoutAlterationJobsInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutAlterationJobsInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutAlterationJobsInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutAlterationJobsInput, PartyUncheckedCreateWithoutAlterationJobsInput>
  }

  export type CustomerCreateWithoutAlterationJobsInput = {
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAlterationJobsInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parties?: PartyUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAlterationJobsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAlterationJobsInput, CustomerUncheckedCreateWithoutAlterationJobsInput>
  }

  export type UserCreateWithoutAlterationJobsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutAlterationJobsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutAlterationJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlterationJobsInput, UserUncheckedCreateWithoutAlterationJobsInput>
  }

  export type AlterationJobPartCreateWithoutJobInput = {
    part: string
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    taskType: AlterationTaskTypeCreateNestedOneWithoutJobPartsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedJobPartsInput
  }

  export type AlterationJobPartUncheckedCreateWithoutJobInput = {
    id?: number
    part: string
    taskTypeId: number
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartCreateOrConnectWithoutJobInput = {
    where: AlterationJobPartWhereUniqueInput
    create: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput>
  }

  export type AlterationJobPartCreateManyJobInputEnvelope = {
    data: AlterationJobPartCreateManyJobInput | AlterationJobPartCreateManyJobInput[]
  }

  export type PartyUpsertWithoutAlterationJobsInput = {
    update: XOR<PartyUpdateWithoutAlterationJobsInput, PartyUncheckedUpdateWithoutAlterationJobsInput>
    create: XOR<PartyCreateWithoutAlterationJobsInput, PartyUncheckedCreateWithoutAlterationJobsInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutAlterationJobsInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutAlterationJobsInput, PartyUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type PartyUpdateWithoutAlterationJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutAlterationJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type CustomerUpsertWithoutAlterationJobsInput = {
    update: XOR<CustomerUpdateWithoutAlterationJobsInput, CustomerUncheckedUpdateWithoutAlterationJobsInput>
    create: XOR<CustomerCreateWithoutAlterationJobsInput, CustomerUncheckedCreateWithoutAlterationJobsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutAlterationJobsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutAlterationJobsInput, CustomerUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type CustomerUpdateWithoutAlterationJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAlterationJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parties?: PartyUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutAlterationJobsInput = {
    update: XOR<UserUpdateWithoutAlterationJobsInput, UserUncheckedUpdateWithoutAlterationJobsInput>
    create: XOR<UserCreateWithoutAlterationJobsInput, UserUncheckedCreateWithoutAlterationJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlterationJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlterationJobsInput, UserUncheckedUpdateWithoutAlterationJobsInput>
  }

  export type UserUpdateWithoutAlterationJobsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutAlterationJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type AlterationJobPartUpsertWithWhereUniqueWithoutJobInput = {
    where: AlterationJobPartWhereUniqueInput
    update: XOR<AlterationJobPartUpdateWithoutJobInput, AlterationJobPartUncheckedUpdateWithoutJobInput>
    create: XOR<AlterationJobPartCreateWithoutJobInput, AlterationJobPartUncheckedCreateWithoutJobInput>
  }

  export type AlterationJobPartUpdateWithWhereUniqueWithoutJobInput = {
    where: AlterationJobPartWhereUniqueInput
    data: XOR<AlterationJobPartUpdateWithoutJobInput, AlterationJobPartUncheckedUpdateWithoutJobInput>
  }

  export type AlterationJobPartUpdateManyWithWhereWithoutJobInput = {
    where: AlterationJobPartScalarWhereInput
    data: XOR<AlterationJobPartUpdateManyMutationInput, AlterationJobPartUncheckedUpdateManyWithoutJobInput>
  }

  export type PartyCreateWithoutAppointmentsInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutPartyInput
    members?: PartyMemberCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutPartyInput
    members?: PartyMemberUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutAppointmentsInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
  }

  export type AppointmentCreateWithoutChildrenInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutChildrenInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutChildrenInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutChildrenInput, AppointmentUncheckedCreateWithoutChildrenInput>
  }

  export type AppointmentCreateWithoutParentInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutParentInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutParentInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput>
  }

  export type AppointmentCreateManyParentInputEnvelope = {
    data: AppointmentCreateManyParentInput | AppointmentCreateManyParentInput[]
  }

  export type PartyMemberCreateWithoutAppointmentsInput = {
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    party: PartyCreateNestedOneWithoutMembersInput
  }

  export type PartyMemberUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    partyId: number
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PartyMemberCreateOrConnectWithoutAppointmentsInput = {
    where: PartyMemberWhereUniqueInput
    create: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type SyncLogCreateWithoutAppointmentInput = {
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SyncLogUncheckedCreateWithoutAppointmentInput = {
    id?: number
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SyncLogCreateOrConnectWithoutAppointmentInput = {
    where: SyncLogWhereUniqueInput
    create: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput>
  }

  export type SyncLogCreateManyAppointmentInputEnvelope = {
    data: SyncLogCreateManyAppointmentInput | SyncLogCreateManyAppointmentInput[]
  }

  export type PartyUpsertWithoutAppointmentsInput = {
    update: XOR<PartyUpdateWithoutAppointmentsInput, PartyUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PartyCreateWithoutAppointmentsInput, PartyUncheckedCreateWithoutAppointmentsInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutAppointmentsInput, PartyUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PartyUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type AppointmentUpsertWithoutChildrenInput = {
    update: XOR<AppointmentUpdateWithoutChildrenInput, AppointmentUncheckedUpdateWithoutChildrenInput>
    create: XOR<AppointmentCreateWithoutChildrenInput, AppointmentUncheckedCreateWithoutChildrenInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutChildrenInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutChildrenInput, AppointmentUncheckedUpdateWithoutChildrenInput>
  }

  export type AppointmentUpdateWithoutChildrenInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutParentInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutParentInput, AppointmentUncheckedUpdateWithoutParentInput>
    create: XOR<AppointmentCreateWithoutParentInput, AppointmentUncheckedCreateWithoutParentInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutParentInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutParentInput, AppointmentUncheckedUpdateWithoutParentInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutParentInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutParentInput>
  }

  export type PartyMemberUpsertWithoutAppointmentsInput = {
    update: XOR<PartyMemberUpdateWithoutAppointmentsInput, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PartyMemberCreateWithoutAppointmentsInput, PartyMemberUncheckedCreateWithoutAppointmentsInput>
    where?: PartyMemberWhereInput
  }

  export type PartyMemberUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PartyMemberWhereInput
    data: XOR<PartyMemberUpdateWithoutAppointmentsInput, PartyMemberUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PartyMemberUpdateWithoutAppointmentsInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    party?: PartyUpdateOneRequiredWithoutMembersNestedInput
  }

  export type PartyMemberUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type SyncLogUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: SyncLogWhereUniqueInput
    update: XOR<SyncLogUpdateWithoutAppointmentInput, SyncLogUncheckedUpdateWithoutAppointmentInput>
    create: XOR<SyncLogCreateWithoutAppointmentInput, SyncLogUncheckedCreateWithoutAppointmentInput>
  }

  export type SyncLogUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: SyncLogWhereUniqueInput
    data: XOR<SyncLogUpdateWithoutAppointmentInput, SyncLogUncheckedUpdateWithoutAppointmentInput>
  }

  export type SyncLogUpdateManyWithWhereWithoutAppointmentInput = {
    where: SyncLogScalarWhereInput
    data: XOR<SyncLogUpdateManyMutationInput, SyncLogUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type SyncLogScalarWhereInput = {
    AND?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
    OR?: SyncLogScalarWhereInput[]
    NOT?: SyncLogScalarWhereInput | SyncLogScalarWhereInput[]
    id?: IntFilter<"SyncLog"> | number
    appointmentId?: IntFilter<"SyncLog"> | number
    direction?: EnumSyncDirectionFilter<"SyncLog"> | $Enums.SyncDirection
    status?: EnumSyncStatusFilter<"SyncLog"> | $Enums.SyncStatus
    message?: StringNullableFilter<"SyncLog"> | string | null
    payload?: JsonNullableFilter<"SyncLog">
    createdAt?: DateTimeFilter<"SyncLog"> | Date | string
  }

  export type AppointmentCreateWithoutSyncLogsInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    member?: PartyMemberCreateNestedOneWithoutAppointmentsInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutSyncLogsInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
  }

  export type AppointmentCreateOrConnectWithoutSyncLogsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutSyncLogsInput, AppointmentUncheckedCreateWithoutSyncLogsInput>
  }

  export type AppointmentUpsertWithoutSyncLogsInput = {
    update: XOR<AppointmentUpdateWithoutSyncLogsInput, AppointmentUncheckedUpdateWithoutSyncLogsInput>
    create: XOR<AppointmentCreateWithoutSyncLogsInput, AppointmentUncheckedCreateWithoutSyncLogsInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutSyncLogsInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutSyncLogsInput, AppointmentUncheckedUpdateWithoutSyncLogsInput>
  }

  export type AppointmentUpdateWithoutSyncLogsInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutSyncLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type PartyCreateWithoutMembersInput = {
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    customer: CustomerCreateNestedOneWithoutPartiesInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutPartyInput
    appointments?: AppointmentCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    eventDate: Date | string
    customerId: number
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutPartyInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyCreateOrConnectWithoutMembersInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
  }

  export type AppointmentCreateWithoutMemberInput = {
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lsEventId?: string | null
    party: PartyCreateNestedOneWithoutAppointmentsInput
    parent?: AppointmentCreateNestedOneWithoutChildrenInput
    children?: AppointmentCreateNestedManyWithoutParentInput
    tailor?: UserCreateNestedOneWithoutAppointmentsInput
    syncLogs?: SyncLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutMemberInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tailorId?: number | null
    lsEventId?: string | null
    children?: AppointmentUncheckedCreateNestedManyWithoutParentInput
    syncLogs?: SyncLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput>
  }

  export type AppointmentCreateManyMemberInputEnvelope = {
    data: AppointmentCreateManyMemberInput | AppointmentCreateManyMemberInput[]
  }

  export type PartyUpsertWithoutMembersInput = {
    update: XOR<PartyUpdateWithoutMembersInput, PartyUncheckedUpdateWithoutMembersInput>
    create: XOR<PartyCreateWithoutMembersInput, PartyUncheckedCreateWithoutMembersInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutMembersInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutMembersInput, PartyUncheckedUpdateWithoutMembersInput>
  }

  export type PartyUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutPartiesNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: IntFieldUpdateOperationsInput | number
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutMemberInput, AppointmentUncheckedUpdateWithoutMemberInput>
    create: XOR<AppointmentCreateWithoutMemberInput, AppointmentUncheckedCreateWithoutMemberInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutMemberInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutMemberInput, AppointmentUncheckedUpdateWithoutMemberInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutMemberInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutMemberInput>
  }

  export type UserCreateWithoutSaleAssignmentsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutSaleAssignmentsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutSaleAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
  }

  export type UserUpsertWithoutSaleAssignmentsInput = {
    update: XOR<UserUpdateWithoutSaleAssignmentsInput, UserUncheckedUpdateWithoutSaleAssignmentsInput>
    create: XOR<UserCreateWithoutSaleAssignmentsInput, UserUncheckedCreateWithoutSaleAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSaleAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSaleAssignmentsInput, UserUncheckedUpdateWithoutSaleAssignmentsInput>
  }

  export type UserUpdateWithoutSaleAssignmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutSaleAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserCreateWithoutSkillsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutSkillsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutSkillsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutSkillsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
    create: XOR<UserCreateWithoutSkillsInput, UserUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSkillsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSkillsInput, UserUncheckedUpdateWithoutSkillsInput>
  }

  export type UserUpdateManyWithWhereWithoutSkillsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSkillsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type TailorAbilityCreateWithoutTaskTypeInput = {
    proficiency: number
    tailor: UserCreateNestedOneWithoutTailorAbilitiesInput
  }

  export type TailorAbilityUncheckedCreateWithoutTaskTypeInput = {
    id?: number
    tailorId: number
    proficiency: number
  }

  export type TailorAbilityCreateOrConnectWithoutTaskTypeInput = {
    where: TailorAbilityWhereUniqueInput
    create: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput>
  }

  export type TailorAbilityCreateManyTaskTypeInputEnvelope = {
    data: TailorAbilityCreateManyTaskTypeInput | TailorAbilityCreateManyTaskTypeInput[]
  }

  export type AlterationJobPartCreateWithoutTaskTypeInput = {
    part: string
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: AlterationJobCreateNestedOneWithoutJobPartsInput
    assignedTailor?: UserCreateNestedOneWithoutAssignedJobPartsInput
  }

  export type AlterationJobPartUncheckedCreateWithoutTaskTypeInput = {
    id?: number
    jobId: number
    part: string
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartCreateOrConnectWithoutTaskTypeInput = {
    where: AlterationJobPartWhereUniqueInput
    create: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput>
  }

  export type AlterationJobPartCreateManyTaskTypeInputEnvelope = {
    data: AlterationJobPartCreateManyTaskTypeInput | AlterationJobPartCreateManyTaskTypeInput[]
  }

  export type TailorAbilityUpsertWithWhereUniqueWithoutTaskTypeInput = {
    where: TailorAbilityWhereUniqueInput
    update: XOR<TailorAbilityUpdateWithoutTaskTypeInput, TailorAbilityUncheckedUpdateWithoutTaskTypeInput>
    create: XOR<TailorAbilityCreateWithoutTaskTypeInput, TailorAbilityUncheckedCreateWithoutTaskTypeInput>
  }

  export type TailorAbilityUpdateWithWhereUniqueWithoutTaskTypeInput = {
    where: TailorAbilityWhereUniqueInput
    data: XOR<TailorAbilityUpdateWithoutTaskTypeInput, TailorAbilityUncheckedUpdateWithoutTaskTypeInput>
  }

  export type TailorAbilityUpdateManyWithWhereWithoutTaskTypeInput = {
    where: TailorAbilityScalarWhereInput
    data: XOR<TailorAbilityUpdateManyMutationInput, TailorAbilityUncheckedUpdateManyWithoutTaskTypeInput>
  }

  export type AlterationJobPartUpsertWithWhereUniqueWithoutTaskTypeInput = {
    where: AlterationJobPartWhereUniqueInput
    update: XOR<AlterationJobPartUpdateWithoutTaskTypeInput, AlterationJobPartUncheckedUpdateWithoutTaskTypeInput>
    create: XOR<AlterationJobPartCreateWithoutTaskTypeInput, AlterationJobPartUncheckedCreateWithoutTaskTypeInput>
  }

  export type AlterationJobPartUpdateWithWhereUniqueWithoutTaskTypeInput = {
    where: AlterationJobPartWhereUniqueInput
    data: XOR<AlterationJobPartUpdateWithoutTaskTypeInput, AlterationJobPartUncheckedUpdateWithoutTaskTypeInput>
  }

  export type AlterationJobPartUpdateManyWithWhereWithoutTaskTypeInput = {
    where: AlterationJobPartScalarWhereInput
    data: XOR<AlterationJobPartUpdateManyMutationInput, AlterationJobPartUncheckedUpdateManyWithoutTaskTypeInput>
  }

  export type UserCreateWithoutTailorAbilitiesInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutTailorAbilitiesInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutTailorAbilitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTailorAbilitiesInput, UserUncheckedCreateWithoutTailorAbilitiesInput>
  }

  export type AlterationTaskTypeCreateWithoutAbilitiesInput = {
    name: string
    defaultDuration: number
    parts: string
    jobParts?: AlterationJobPartCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeUncheckedCreateWithoutAbilitiesInput = {
    id?: number
    name: string
    defaultDuration: number
    parts: string
    jobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeCreateOrConnectWithoutAbilitiesInput = {
    where: AlterationTaskTypeWhereUniqueInput
    create: XOR<AlterationTaskTypeCreateWithoutAbilitiesInput, AlterationTaskTypeUncheckedCreateWithoutAbilitiesInput>
  }

  export type UserUpsertWithoutTailorAbilitiesInput = {
    update: XOR<UserUpdateWithoutTailorAbilitiesInput, UserUncheckedUpdateWithoutTailorAbilitiesInput>
    create: XOR<UserCreateWithoutTailorAbilitiesInput, UserUncheckedCreateWithoutTailorAbilitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTailorAbilitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTailorAbilitiesInput, UserUncheckedUpdateWithoutTailorAbilitiesInput>
  }

  export type UserUpdateWithoutTailorAbilitiesInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutTailorAbilitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type AlterationTaskTypeUpsertWithoutAbilitiesInput = {
    update: XOR<AlterationTaskTypeUpdateWithoutAbilitiesInput, AlterationTaskTypeUncheckedUpdateWithoutAbilitiesInput>
    create: XOR<AlterationTaskTypeCreateWithoutAbilitiesInput, AlterationTaskTypeUncheckedCreateWithoutAbilitiesInput>
    where?: AlterationTaskTypeWhereInput
  }

  export type AlterationTaskTypeUpdateToOneWithWhereWithoutAbilitiesInput = {
    where?: AlterationTaskTypeWhereInput
    data: XOR<AlterationTaskTypeUpdateWithoutAbilitiesInput, AlterationTaskTypeUncheckedUpdateWithoutAbilitiesInput>
  }

  export type AlterationTaskTypeUpdateWithoutAbilitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    jobParts?: AlterationJobPartUpdateManyWithoutTaskTypeNestedInput
  }

  export type AlterationTaskTypeUncheckedUpdateWithoutAbilitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutTaskTypeNestedInput
  }

  export type UserCreateWithoutTailorSchedulesInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserUncheckedCreateWithoutTailorSchedulesInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    assignedJobParts?: AlterationJobPartUncheckedCreateNestedManyWithoutAssignedTailorInput
  }

  export type UserCreateOrConnectWithoutTailorSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTailorSchedulesInput, UserUncheckedCreateWithoutTailorSchedulesInput>
  }

  export type UserUpsertWithoutTailorSchedulesInput = {
    update: XOR<UserUpdateWithoutTailorSchedulesInput, UserUncheckedUpdateWithoutTailorSchedulesInput>
    create: XOR<UserCreateWithoutTailorSchedulesInput, UserUncheckedCreateWithoutTailorSchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTailorSchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTailorSchedulesInput, UserUncheckedUpdateWithoutTailorSchedulesInput>
  }

  export type UserUpdateWithoutTailorSchedulesInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutTailorSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type AlterationJobCreateWithoutJobPartsInput = {
    saleLineItemId: number
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    party?: PartyCreateNestedOneWithoutAlterationJobsInput
    customer?: CustomerCreateNestedOneWithoutAlterationJobsInput
    tailor?: UserCreateNestedOneWithoutAlterationJobsInput
  }

  export type AlterationJobUncheckedCreateWithoutJobPartsInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobCreateOrConnectWithoutJobPartsInput = {
    where: AlterationJobWhereUniqueInput
    create: XOR<AlterationJobCreateWithoutJobPartsInput, AlterationJobUncheckedCreateWithoutJobPartsInput>
  }

  export type AlterationTaskTypeCreateWithoutJobPartsInput = {
    name: string
    defaultDuration: number
    parts: string
    abilities?: TailorAbilityCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeUncheckedCreateWithoutJobPartsInput = {
    id?: number
    name: string
    defaultDuration: number
    parts: string
    abilities?: TailorAbilityUncheckedCreateNestedManyWithoutTaskTypeInput
  }

  export type AlterationTaskTypeCreateOrConnectWithoutJobPartsInput = {
    where: AlterationTaskTypeWhereUniqueInput
    create: XOR<AlterationTaskTypeCreateWithoutJobPartsInput, AlterationTaskTypeUncheckedCreateWithoutJobPartsInput>
  }

  export type UserCreateWithoutAssignedJobPartsInput = {
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentCreateNestedManyWithoutAssociateInput
    skills?: SkillCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleCreateNestedManyWithoutTailorInput
  }

  export type UserUncheckedCreateWithoutAssignedJobPartsInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTailorInput
    alterationJobs?: AlterationJobUncheckedCreateNestedManyWithoutTailorInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    saleAssignments?: SaleAssignmentUncheckedCreateNestedManyWithoutAssociateInput
    skills?: SkillUncheckedCreateNestedManyWithoutUsersInput
    tailorAbilities?: TailorAbilityUncheckedCreateNestedManyWithoutTailorInput
    tailorSchedules?: TailorScheduleUncheckedCreateNestedManyWithoutTailorInput
  }

  export type UserCreateOrConnectWithoutAssignedJobPartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedJobPartsInput, UserUncheckedCreateWithoutAssignedJobPartsInput>
  }

  export type AlterationJobUpsertWithoutJobPartsInput = {
    update: XOR<AlterationJobUpdateWithoutJobPartsInput, AlterationJobUncheckedUpdateWithoutJobPartsInput>
    create: XOR<AlterationJobCreateWithoutJobPartsInput, AlterationJobUncheckedCreateWithoutJobPartsInput>
    where?: AlterationJobWhereInput
  }

  export type AlterationJobUpdateToOneWithWhereWithoutJobPartsInput = {
    where?: AlterationJobWhereInput
    data: XOR<AlterationJobUpdateWithoutJobPartsInput, AlterationJobUncheckedUpdateWithoutJobPartsInput>
  }

  export type AlterationJobUpdateWithoutJobPartsInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneWithoutAlterationJobsNestedInput
    customer?: CustomerUpdateOneWithoutAlterationJobsNestedInput
    tailor?: UserUpdateOneWithoutAlterationJobsNestedInput
  }

  export type AlterationJobUncheckedUpdateWithoutJobPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationTaskTypeUpsertWithoutJobPartsInput = {
    update: XOR<AlterationTaskTypeUpdateWithoutJobPartsInput, AlterationTaskTypeUncheckedUpdateWithoutJobPartsInput>
    create: XOR<AlterationTaskTypeCreateWithoutJobPartsInput, AlterationTaskTypeUncheckedCreateWithoutJobPartsInput>
    where?: AlterationTaskTypeWhereInput
  }

  export type AlterationTaskTypeUpdateToOneWithWhereWithoutJobPartsInput = {
    where?: AlterationTaskTypeWhereInput
    data: XOR<AlterationTaskTypeUpdateWithoutJobPartsInput, AlterationTaskTypeUncheckedUpdateWithoutJobPartsInput>
  }

  export type AlterationTaskTypeUpdateWithoutJobPartsInput = {
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    abilities?: TailorAbilityUpdateManyWithoutTaskTypeNestedInput
  }

  export type AlterationTaskTypeUncheckedUpdateWithoutJobPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    defaultDuration?: IntFieldUpdateOperationsInput | number
    parts?: StringFieldUpdateOperationsInput | string
    abilities?: TailorAbilityUncheckedUpdateManyWithoutTaskTypeNestedInput
  }

  export type UserUpsertWithoutAssignedJobPartsInput = {
    update: XOR<UserUpdateWithoutAssignedJobPartsInput, UserUncheckedUpdateWithoutAssignedJobPartsInput>
    create: XOR<UserCreateWithoutAssignedJobPartsInput, UserUncheckedCreateWithoutAssignedJobPartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedJobPartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedJobPartsInput, UserUncheckedUpdateWithoutAssignedJobPartsInput>
  }

  export type UserUpdateWithoutAssignedJobPartsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    skills?: SkillUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedJobPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    skills?: SkillUncheckedUpdateManyWithoutUsersNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
  }

  export type PartyCreateManyCustomerInput = {
    id?: number
    name: string
    eventDate: Date | string
    externalId?: string | null
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    syncedToLs?: boolean
    lsPartyId?: string | null
  }

  export type AlterationJobCreateManyCustomerInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartyUpdateWithoutCustomerInput = {
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterationJobs?: AlterationJobUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutPartyNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPartyNestedInput
    members?: PartyMemberUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    syncedToLs?: BoolFieldUpdateOperationsInput | boolean
    lsPartyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlterationJobUpdateWithoutCustomerInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneWithoutAlterationJobsNestedInput
    tailor?: UserUpdateOneWithoutAlterationJobsNestedInput
    jobParts?: AlterationJobPartUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyTailorInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    lsEventId?: string | null
  }

  export type AlterationJobCreateManyTailorInput = {
    id?: number
    saleLineItemId: number
    partyId?: number | null
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    action: string
    entity: string
    entityId: number
    details?: string | null
    createdAt?: Date | string
  }

  export type SaleAssignmentCreateManyAssociateInput = {
    id?: number
    saleId: string
    commissionRate: number
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TailorAbilityCreateManyTailorInput = {
    id?: number
    taskTypeId: number
    proficiency: number
  }

  export type TailorScheduleCreateManyTailorInput = {
    id?: number
    dayOfWeek: number
    startTime: string
    endTime: string
  }

  export type AlterationJobPartCreateManyAssignedTailorInput = {
    id?: number
    jobId: number
    part: string
    taskTypeId: number
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutTailorInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlterationJobUpdateWithoutTailorInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneWithoutAlterationJobsNestedInput
    customer?: CustomerUpdateOneWithoutAlterationJobsNestedInput
    jobParts?: AlterationJobPartUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    partyId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUpdateWithoutAssociateInput = {
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateWithoutAssociateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaleAssignmentUncheckedUpdateManyWithoutAssociateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleId?: StringFieldUpdateOperationsInput | string
    commissionRate?: FloatFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TailorAbilityUpdateWithoutTailorInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    taskType?: AlterationTaskTypeUpdateOneRequiredWithoutAbilitiesNestedInput
  }

  export type TailorAbilityUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskTypeId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorAbilityUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskTypeId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorScheduleUpdateWithoutTailorInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type TailorScheduleUncheckedUpdateWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type TailorScheduleUncheckedUpdateManyWithoutTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type AlterationJobPartUpdateWithoutAssignedTailorInput = {
    part?: StringFieldUpdateOperationsInput | string
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: AlterationJobUpdateOneRequiredWithoutJobPartsNestedInput
    taskType?: AlterationTaskTypeUpdateOneRequiredWithoutJobPartsNestedInput
  }

  export type AlterationJobPartUncheckedUpdateWithoutAssignedTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobCreateManyPartyInput = {
    id?: number
    saleLineItemId: number
    customerId?: number | null
    notes?: string | null
    status: string
    timeSpentMinutes?: number | null
    tailorId?: number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyPartyInput = {
    id?: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
  }

  export type PartyMemberCreateManyPartyInput = {
    id?: number
    lsCustomerId?: string | null
    role: string
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlterationJobUpdateWithoutPartyInput = {
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAlterationJobsNestedInput
    tailor?: UserUpdateOneWithoutAlterationJobsNestedInput
    jobParts?: AlterationJobPartUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobParts?: AlterationJobPartUncheckedUpdateManyWithoutJobNestedInput
  }

  export type AlterationJobUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleLineItemId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutPartyInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartyMemberUpdateWithoutPartyInput = {
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
    appointments?: AppointmentUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PartyMemberUncheckedUpdateManyWithoutPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lsCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlterationJobPartCreateManyJobInput = {
    id?: number
    part: string
    taskTypeId: number
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlterationJobPartUpdateWithoutJobInput = {
    part?: StringFieldUpdateOperationsInput | string
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taskType?: AlterationTaskTypeUpdateOneRequiredWithoutJobPartsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedJobPartsNestedInput
  }

  export type AlterationJobPartUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    taskTypeId?: IntFieldUpdateOperationsInput | number
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyParentInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    memberId?: number | null
    tailorId?: number | null
    lsEventId?: string | null
  }

  export type SyncLogCreateManyAppointmentInput = {
    id?: number
    direction: $Enums.SyncDirection
    status: $Enums.SyncStatus
    message?: string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutParentInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    member?: PartyMemberUpdateOneWithoutAppointmentsNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SyncLogUpdateWithoutAppointmentInput = {
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncLogUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    direction?: EnumSyncDirectionFieldUpdateOperationsInput | $Enums.SyncDirection
    status?: EnumSyncStatusFieldUpdateOperationsInput | $Enums.SyncStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyMemberInput = {
    id?: number
    partyId: number
    customerId?: string | null
    saleId?: string | null
    dateTime: Date | string
    durationMinutes?: number | null
    type?: $Enums.AppointmentType | null
    notes?: string | null
    status?: $Enums.AppointmentStatus
    syncedToLightspeed?: boolean
    recurrenceRule?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tailorId?: number | null
    lsEventId?: string | null
  }

  export type AppointmentUpdateWithoutMemberInput = {
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    party?: PartyUpdateOneRequiredWithoutAppointmentsNestedInput
    parent?: AppointmentUpdateOneWithoutChildrenNestedInput
    children?: AppointmentUpdateManyWithoutParentNestedInput
    tailor?: UserUpdateOneWithoutAppointmentsNestedInput
    syncLogs?: SyncLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: AppointmentUncheckedUpdateManyWithoutParentNestedInput
    syncLogs?: SyncLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    partyId?: IntFieldUpdateOperationsInput | number
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    syncedToLightspeed?: BoolFieldUpdateOperationsInput | boolean
    recurrenceRule?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tailorId?: NullableIntFieldUpdateOperationsInput | number | null
    lsEventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutSkillsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUpdateManyWithoutAssociateNestedInput
    tailorAbilities?: TailorAbilityUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTailorNestedInput
    alterationJobs?: AlterationJobUncheckedUpdateManyWithoutTailorNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    saleAssignments?: SaleAssignmentUncheckedUpdateManyWithoutAssociateNestedInput
    tailorAbilities?: TailorAbilityUncheckedUpdateManyWithoutTailorNestedInput
    tailorSchedules?: TailorScheduleUncheckedUpdateManyWithoutTailorNestedInput
    assignedJobParts?: AlterationJobPartUncheckedUpdateManyWithoutAssignedTailorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TailorAbilityCreateManyTaskTypeInput = {
    id?: number
    tailorId: number
    proficiency: number
  }

  export type AlterationJobPartCreateManyTaskTypeInput = {
    id?: number
    jobId: number
    part: string
    assignedTailorId?: number | null
    scheduledTime?: Date | string | null
    duration?: number | null
    status: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TailorAbilityUpdateWithoutTaskTypeInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    tailor?: UserUpdateOneRequiredWithoutTailorAbilitiesNestedInput
  }

  export type TailorAbilityUncheckedUpdateWithoutTaskTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type TailorAbilityUncheckedUpdateManyWithoutTaskTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    tailorId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
  }

  export type AlterationJobPartUpdateWithoutTaskTypeInput = {
    part?: StringFieldUpdateOperationsInput | string
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: AlterationJobUpdateOneRequiredWithoutJobPartsNestedInput
    assignedTailor?: UserUpdateOneWithoutAssignedJobPartsNestedInput
  }

  export type AlterationJobPartUncheckedUpdateWithoutTaskTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlterationJobPartUncheckedUpdateManyWithoutTaskTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    part?: StringFieldUpdateOperationsInput | string
    assignedTailorId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}